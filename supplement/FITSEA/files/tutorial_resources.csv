,"Accessing Resources","Accessing Resources in Code ","<h2 id="ResourcesFromCode">Accessing Resources in Code </h2> 
 <p>You can use a resource in code by passing the resource ID as a method parameter. For example, you can set an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> to use the <code>res/drawable/myimage.png</code> resource using <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code>:</p> 
 <pre>
ImageView imageView = (ImageView) findViewById(R.id.myimageview);
imageView.setImageResource(<strong>R.drawable.myimage</strong>);
</pre> 
 <p>You can also retrieve individual resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>, which you can get an instance of with <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>.</p> 
 <div class="sidebox-wrapper"> 
  <div class="sidebox"> 
   ","Context","android.content.Context","class",0
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","Context","android.content.Context","class",0
,"Bitmap","Bitmap File","<h3 id="BitmapFile">Bitmap File</h3> 
 <p>A bitmap file is a <code>.png</code>, <code>.jpg</code>, or <code>.gif</code> file. Android creates a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> resource for any of these files when you save them in the <code>res/drawable/</code> directory.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.png</code> (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>)
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd>
   With an image saved at 
   <code>res/drawable/myimage.png</code>, this layout XML applies the image to a View: 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/myimage&quot; /&gt;
</pre> 
   <p>The following application code retrieves the image as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable drawable = res.<code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.myimage);
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/2d-graphics.html">2D Graphics</a></li> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Context","android.content.Context","class",0
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","Context","android.content.Context","class",0
,"Localizing with Resources","Localization Strategies","<h2 id="strategies">Localization Strategies</h2> 
 <h4 id="failing2">Design your application to work in any locale</h4> 
 <p>You cannot assume anything about the device on which a user will run your application. The device might have hardware that you were not anticipating, or it might be set to a locale that you did not plan for or that you cannot test. Design your application so that it will function normally or fail gracefully no matter what device it runs on.</p> 
 <p class="note"><strong>Important:</strong> Make sure that your application includes a full set of default resources.</p> 
 <p>Make sure to include <code>res/drawable/</code> and a <code>res/values/</code> folders (without any additional modifiers in the folder names) that contain all the images and text that your application will need. </p> 
 <p>If an application is missing even one default resource, it will not run on a device that is set to an unsupported locale. For example, the <code>res/values/strings.xml</code> default file might lack one string that the application needs: When the application runs in an unsupported locale and attempts to load <code>res/values/strings.xml</code>, the user will see an error message and a Force Close button. An IDE such as Eclipse will not highlight this kind of error, and you will not see the problem when you test the application on a device or emulator that is set to a supported locale.</p> 
 <p>For more information, see <a href="#test-for-default">Testing for Default Resources</a>.</p> 
 <h4>Design a flexible layout</h4> 
 <p> If you need to rearrange your layout to fit a certain language (for example German with its long words), you can create an alternative layout for that language (for example <code>res/layout-de/main.xml</code>). However, doing this can make your application harder to maintain. It is better to create a single layout that is more flexible.</p> 
 <p>Another typical situation is a language that requires something different in its layout. For example, you might have a contact form that should include two name fields when the application runs in Japanese, but three name fields when the application runs in some other language. You could handle this in either of two ways:</p> 
 <ul> 
  <li>Create one layout with a field that you can programmatically enable or disable, based on the language, or</li> 
  <li>Have the main layout include another layout that includes the changeable field. The second layout can have different configurations for different languages.</li> 
 </ul> 
 <h4>Avoid creating more resource files and text strings than you need</h4> 
 <p>You probably do not need to create a locale-specific alternative for every resource in your application. For example, the layout defined in the <code>res/layout/main.xml</code> file might work in any locale, in which case there would be no need to create any alternative layout files. </p> 
 <p>Also, you might not need to create alternative text for every string. For example, assume the following:</p> 
 <ul> 
  <li>Your application's default language is American English. Every string that the application uses is defined, using American English spellings, in <code>res/values/strings.xml</code>. </li> 
  <li>For a few important phrases, you want to provide British English spelling. You want these alternative strings to be used when your application runs on a device in the United Kingdom. </li> 
 </ul> 
 <p>To do this, you could create a small file called <code>res/values-en-rGB/strings.xml</code> that includes only the strings that should be different when the application runs in the U.K. For all the rest of the strings, the application will fall back to the defaults and use what is defined in <code>res/values/strings.xml</code>.</p> 
 <h4>Use the Android Context object for manual locale lookup</h4> 
 <p>You can look up the locale using the <code><a href="../../../reference/android/content/Context.html">Context</a></code> object that Android makes available:</p> 
 <pre>String locale = context.getResources().getConfiguration().locale.getDisplayName();</pre> 
 ","Context","android.content.Context","class",0
,"More Resource Types","Bool","<h2 id="Bool">Bool</h2> 
 <p>A boolean value defined in XML.</p> 
 <p class="note"><strong>Note:</strong> A bool is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine bool resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;bool&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.bool.<em>bool_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]bool/<em>bool_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#bool-resources-element">resources</a>&gt;
    &lt;<a href="#bool-element">bool</a>
        name=&quot;<em>bool_name</em>&quot;
        &gt;[true | false]&lt;/bool&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="bool-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="bool-element">
     <code>&lt;bool&gt;</code>
    </dt> 
    <dd>
     A boolean value: 
     <code>true</code> or 
     <code>false</code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the bool value. This will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values-small/bools.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;bool name=&quot;screen_small&quot;&gt;true&lt;/bool&gt;
    &lt;bool name=&quot;adjust_view_bounds&quot;&gt;true&lt;/bool&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the boolean:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
boolean screenIsSmall = res.<code><a href="../../../reference/android/content/res/Resources.html#getBoolean(int)">getBoolean</a></code>(R.bool.screen_small);
</pre> 
   <p>This layout XML uses the boolean for an attribute:</p> 
   <pre>
&lt;ImageView
    android:layout_height=&quot;fill_parent&quot;
    android:layout_width=&quot;fill_parent&quot;
    android:src=&quot;@drawable/logo&quot;
    android:adjustViewBounds=&quot;@bool/adjust_view_bounds&quot; /&gt;
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"More Resource Types","Color","<h2 id="Color">Color</h2> 
 <p>A color value defined in XML. The color is specified with an RGB value and alpha channel. You can use a color resource any place that accepts a hexadecimal color value. You can also use a color resource when a drawable resource is expected in XML (for example, <code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 <p>The value always begins with a pound (#) character and then followed by the Alpha-Red-Green-Blue information in one of the following formats:</p> 
 <ul> 
  <li>#<em>RGB</em></li> 
  <li>#<em>ARGB</em></li> 
  <li>#<em>RRGGBB</em></li> 
  <li>#<em>AARRGGBB</em></li> 
 </ul> 
 <p class="note"><strong>Note:</strong> A color is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine color resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/colors.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;color&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.color.<em>color_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]color/<em>color_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#color-resources-element">resources</a>&gt;
    &lt;<a href="#color-element">color</a>
        name=&quot;<em>color_name</em>&quot;
        &gt;<em>hex_color</em>&lt;/color&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="color-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="color-element">
     <code>&lt;color&gt;</code>
    </dt> 
    <dd>
     A color expressed in hexadecimal, as described above. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the color. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/colors.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
   &lt;color name=&quot;opaque_red&quot;&gt;#f00&lt;/color&gt;
   &lt;color name=&quot;translucent_red&quot;&gt;#80ff0000&lt;/color&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the color resource:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int color = res.<code><a href="../../../reference/android/content/res/Resources.html#getColor(int)">getColor</a></code>(R.color.opaque_red);
</pre> 
   <p>This layout XML applies the color to an attribute:</p> 
   <pre>
&lt;TextView
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:textColor=&quot;@color/translucent_red&quot;
    android:text=&quot;Hello&quot;/&gt;
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"More Resource Types","Dimension","<h2 id="Dimension">Dimension</h2> 
 <p>A dimension value defined in XML. A dimension is specified with a number followed by a unit of measure. For example: 10px, 2in, 5sp. The following units of measure are supported by Android:</p> 
 <dl> 
  <dt>
   <code>dp</code>
  </dt> 
  <dd>
   Density-independent Pixels - An abstract unit that is based on the physical density of the screen. These units are relative to a 160 dpi (dots per inch) screen, on which 1dp is roughly equal to 1px. When running on a higher density screen, the number of pixels used to draw 1dp is scaled up by a factor appropriate for the screen's dpi. Likewise, when on a lower density screen, the number of pixels used for 1dp is scaled down. The ratio of dp-to-pixel will change with the screen density, but not necessarily in direct proportion. Using dp units (instead of px units) is a simple solution to making the view dimensions in your layout resize properly for different screen densities. In other words, it provides consistency for the real-world sizes of your UI elements across different devices.
  </dd> 
  <dt>
   <code>sp</code>
  </dt> 
  <dd>
   Scale-independent Pixels - This is like the dp unit, but it is also scaled by the user's font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user's preference.
  </dd> 
  <dt>
   <code>pt</code>
  </dt> 
  <dd>
   Points - 1/72 of an inch based on the physical size of the screen.
  </dd> 
  <dt>
   <code>px</code>
  </dt> 
  <dd>
   Pixels - Corresponds to actual pixels on the screen. This unit of measure is not recommended because the actual representation can vary across devices; each devices may have a different number of pixels per inch and may have more or fewer total pixels available on the screen.
  </dd> 
  <dt>
   <code>mm</code>
  </dt> 
  <dd>
   Millimeters - Based on the physical size of the screen.
  </dd> 
  <dt>
   <code>in</code>
  </dt> 
  <dd>
   Inches - Based on the physical size of the screen.
  </dd> 
 </dl> 
 <p class="note"><strong>Note:</strong> A dimension is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine dimension resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;dimen&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.dimen.<em>dimension_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]dimen/<em>dimension_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#dimen-resources-element">resources</a>&gt;
    &lt;<a href="#dimen-element">dimen</a>
        name=&quot;<em>dimension_name</em>&quot;
        &gt;<em>dimension</em>&lt;/dimen&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="dimen-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="dimen-element">
     <code>&lt;dimen&gt;</code>
    </dt> 
    <dd>
     A dimension, represented by a float, followed by a unit of measurement (dp, sp, pt, px, mm, in), as described above. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the dimension. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/dimens.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;dimen name=&quot;textview_height&quot;&gt;25dp&lt;/dimen&gt;
    &lt;dimen name=&quot;textview_width&quot;&gt;150dp&lt;/dimen&gt;
    &lt;dimen name=&quot;ball_radius&quot;&gt;30dp&lt;/dimen&gt;
    &lt;dimen name=&quot;font_size&quot;&gt;16sp&lt;/dimen&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves a dimension:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
float fontSize = res.<code><a href="../../../reference/android/content/res/Resources.html#getDimension(int)">getDimension</a></code>(R.dimen.font_size);
</pre> 
   <p>This layout XML applies dimensions to attributes:</p> 
   <pre>
&lt;TextView
    android:layout_height=&quot;@dimen/textview_height&quot;
    android:layout_width=&quot;@dimen/textview_width&quot;
    android:textSize=&quot;@dimen/font_size&quot;/&gt;
</pre> 
  </dd>
 </dl>  
 <!-- end example -->  
 ","Context","android.content.Context","class",1
,"More Resource Types","Integer","<h2 id="Integer">Integer</h2> 
 <p>An integer defined in XML.</p> 
 <p class="note"><strong>Note:</strong> An integer is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine integer resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename.xml</em></code>
   <br /> The filename is arbitrary. The 
   <code>&lt;integer&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.integer.<em>integer_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]integer/<em>integer_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#integer-resources-element">resources</a>&gt;
    &lt;<a href="#integer-element">integer</a>
        name=&quot;<em>integer_name</em>&quot;
        &gt;<em>integer</em>&lt;/integer&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="integer-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="integer-element">
     <code>&lt;integer&gt;</code>
    </dt> 
    <dd>
     An integer. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the integer. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/values/integers.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;integer name=&quot;max_speed&quot;&gt;75&lt;/integer&gt;
    &lt;integer name=&quot;min_speed&quot;&gt;5&lt;/integer&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves an integer:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int maxSpeed = res.<code><a href="../../../reference/android/content/res/Resources.html#getInteger(int)">getInteger</a></code>(R.integer.max_speed);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"More Resource Types","Integer Array","<h2 id="IntegerArray">Integer Array</h2> 
 <p>An array of integers defined in XML.</p> 
 <p class="note"><strong>Note:</strong> An integer array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine integer array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;integer-array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an array of integers.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>integer_array_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]array.<em>integer_array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#integer-array-resources-element">resources</a>&gt;
    &lt;<a href="#integer-array-element">integer-array</a>
        name=&quot;<em>integer_array_name</em>&quot;&gt;
        &lt;<a href="#integer-array-item-element">item</a>
            &gt;<em>integer</em>&lt;/item&gt;
    &lt;/integer-array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="integer-array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="integer-array-element">
     <code>&lt;integer-array&gt;</code>
    </dt> 
    <dd>
     Defines an array of integers. Contains one or more child 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="integer-array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     An integer. The value can be a reference to another integer resource. Must be a child of a 
     <code>&lt;integer-array&gt;</code> element. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/integers.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;integer-array name=&quot;bits&quot;&gt;
        &lt;item&gt;4&lt;/item&gt;
        &lt;item&gt;8&lt;/item&gt;
        &lt;item&gt;16&lt;/item&gt;
        &lt;item&gt;32&lt;/item&gt;
    &lt;/integer-array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the integer array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int[] bits = res.<code><a href="../../../reference/android/content/res/Resources.html#getIntArray(int)">getIntArray</a></code>(R.array.bits);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"More Resource Types","Typed Array","<h2 id="TypedArray">Typed Array</h2> 
 <p>A <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code> defined in XML. You can use this to create an array of other resources, such as drawables. Note that the array is not required to be homogeneous, so you can create an array of mixed resource types, but you must be aware of what and where the data types are in the array so that you can properly obtain each item with the <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>'s <code>get...()</code> methods.</p> 
 <p class="note"><strong>Note:</strong> A typed array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine typed array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>array_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]array.<em>array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#array-resources-element">resources</a>&gt;
    &lt;<a href="#array-element">array</a>
        name=&quot;<em>integer_array_name</em>&quot;&gt;
        &lt;<a href="#array-item-element">item</a>&gt;<em>resource</em>&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="array-element">
     <code>&lt;array&gt;</code>
    </dt> 
    <dd>
     Defines an array. Contains one or more child 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A generic resource. The value can be a reference to a resource or a simple data type. Must be a child of an 
     <code>&lt;array&gt;</code> element. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/arrays.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;array name=&quot;icons&quot;&gt;
        &lt;item&gt;@drawable/home&lt;/item&gt;
        &lt;item&gt;@drawable/settings&lt;/item&gt;
        &lt;item&gt;@drawable/logout&lt;/item&gt;
    &lt;/array&gt;
    &lt;array name=&quot;colors&quot;&gt;
        &lt;item&gt;#FFFF0000&lt;/item&gt;
        &lt;item&gt;#FF00FF00&lt;/item&gt;
        &lt;item&gt;#FF0000FF&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves each array and then obtains the first entry in each array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
TypedArray icons = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.icons);
Drawable drawable = icons.<code><a href="../../../reference/android/content/res/TypedArray.html#getDrawable(int)">getDrawable</a></code>(0);

TypedArray colors = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.colors);
int color = colors.<code><a href="../../../reference/android/content/res/TypedArray.html#getColor(int, int)">getColor</a></code>(0,0);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 <!-- TODO


","Context","android.content.Context","class",0
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Context","android.content.Context","class",0
,"String Resources","String","<h2 id="String">String</h2> 
 <p>A single string that can be referenced from the application or from other resource files (such as an XML layout).</p> 
 <p class="note"><strong>Note:</strong> A string is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). So, you can combine string resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;string&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/java/lang/String.html">String</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.string.<em>string_name</em></code>
   <br /> In XML:
   <code>@string/<em>string_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#string-resources-element">resources</a>&gt;
    &lt;<a href="#string-element">string</a>
        name=&quot;<em>string_name</em>&quot;
        &gt;<em>text_string</em>&lt;/string&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="string-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="string-element">
     <code>&lt;string&gt;</code>
    </dt> 
    <dd>
     A string, which can include styling tags. Beware that you must escape apostrophes and quotation marks. For more information about how to properly style and format your strings see 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the string. This name will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string name=&quot;hello&quot;&gt;Hello!&lt;/string&gt;
&lt;/resources&gt;
</pre> 
   <p>This layout XML applies a string to a View:</p> 
   <pre>
&lt;TextView
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    <strong>android:text=&quot;@string/hello&quot;</strong> /&gt;
</pre> 
   <p>This application code retrieves a string:</p> 
   <pre>
String string = <code><a href="../../../reference/android/content/Context.html#getString(int)">getString</a></code>(R.string.hello);
</pre> 
   <p>You can use either <code><a href="../../../reference/android/content/Context.html#getString(int)">getString(int)</a></code> or <code><a href="../../../reference/android/content/Context.html#getText(int)">getText(int)</a></code> to retrieve a string. <code><a href="../../../reference/android/content/Context.html#getText(int)">getText(int)</a></code> will retain any rich text styling applied to the string.</p> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"String Resources","String Array","<h2 id="StringArray">String Array</h2> 
 <p>An array of strings that can be referenced from the application.</p> 
 <p class="note"><strong>Note:</strong> A string array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine string array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;string-array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an array of 
   <code><a href="../../../reference/java/lang/String.html">String</a></code>s.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>string_array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#string-array-resources-element">resources</a>&gt;
    &lt;<a href="#string-array-element">string-array</a>
        name=&quot;<em>string_array_name</em>&quot;&gt;
        &lt;<a href="#string-array-item-element">item</a>
            &gt;<em>text_string</em>&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="string-array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="string-array-element">
     <code>&lt;string-array&gt;</code>
    </dt> 
    <dd>
     Defines an array of strings. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="string-array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A string, which can include styling tags. The value can be a reference to another string resource. Must be a child of a 
     <code>&lt;string-array&gt;</code> element. Beware that you must escape apostrophes and quotation marks. See 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below, for information about to properly style and format your strings. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string-array name=&quot;planets_array&quot;&gt;
        &lt;item&gt;Mercury&lt;/item&gt;
        &lt;item&gt;Venus&lt;/item&gt;
        &lt;item&gt;Earth&lt;/item&gt;
        &lt;item&gt;Mars&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves a string array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String[] planets = res.<code><a href="../../../reference/android/content/res/Resources.html#getStringArray(int)">getStringArray</a></code>(R.array.planets_array);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"String Resources","Quantity Strings (Plurals)","<h2 id="Plurals">Quantity Strings (Plurals)</h2> 
 <p>Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we'd write &quot;<i>n</i> books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions. The full set supported by Android is <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code>, and <code>other</code>. </p>
 <p>The rules for deciding which case to use for a given language and quantity can be very complex, so Android provides you with methods such as <code><a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int)">getQuantityString()</a></code> to select the appropriate resource for you. </p>
 <p>Although historically called &quot;quantity strings&quot; (and still called that in API), quantity strings should <i>only</i> be used for plurals. It would be a mistake to use quantity strings to implement something like Gmail's &quot;Inbox&quot; versus &quot;Inbox (12)&quot; when there are unread messages, for example. It might seem convenient to use quantity strings instead of an <code>if</code> statement, but it's important to note that some languages (such as Chinese) don't make these grammatical distinctions at all, so you'll always get the <code>other</code> string. </p>
 <p>The selection of which string to use is made solely based on grammatical <i>necessity</i>. In English, a string for <code>zero</code> will be ignored even if the quantity is 0, because 0 isn't grammatically different from 2, or any other number except 1 (&quot;zero books&quot;, &quot;one book&quot;, &quot;two books&quot;, and so on). </p>
 <p>Don't be misled either by the fact that, say, <code>two</code> sounds like it could only apply to the quantity 2: a language may require that 2, 12, 102 (and so on) are all treated like one another but differently to other quantities. Rely on your translator to know what distinctions their language actually insists upon. </p>
 <p>It's often possible to avoid quantity strings by using quantity-neutral formulations such as &quot;Books: 1&quot;. This will make your life and your translators' lives easier, if it's a style that's in keeping with your application. </p>
 <p class="note"><strong>Note:</strong> A plurals collection is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine plurals resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;plurals&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.plurals.<em>plural_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#plurals-resources-element">resources</a>&gt;
    &lt;<a href="#plurals-element">plurals</a>
        name=&quot;<em>plural_name</em>&quot;&gt;
        &lt;<a href="#plurals-item-element">item</a>
            quantity=[&quot;zero&quot; | &quot;one&quot; | &quot;two&quot; | &quot;few&quot; | &quot;many&quot; | &quot;other&quot;]
            &gt;<em>text_string</em>&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="plurals-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="plurals-element">
     <code>&lt;plurals&gt;</code>
    </dt> 
    <dd>
     A collection of strings, of which, one string is provided depending on the amount of something. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the pair of strings. This name will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
    <dt id="plurals-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A plural or singular string. The value can be a reference to another string resource. Must be a child of a 
     <code>&lt;plurals&gt;</code> element. Beware that you must escape apostrophes and quotation marks. See 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below, for information about to properly style and format your strings. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>quantity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. A value indicating when this string should be used. Valid values, with non-exhaustive examples in parentheses: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr> 
          <td><code>zero</code></td>
          <td>When the language requires special treatment of the number 0 (as in Arabic).</td> 
         </tr> 
         <tr> 
          <td><code>one</code></td>
          <td>When the language requires special treatment of numbers like one (as with the number 1 in English and most other languages; in Russian, any number ending in 1 but not ending in 11 is in this class).</td> 
         </tr> 
         <tr> 
          <td><code>two</code></td>
          <td>When the language requires special treatment of numbers like two (as with 2 in Welsh, or 102 in Slovenian).</td> 
         </tr> 
         <tr> 
          <td><code>few</code></td>
          <td>When the language requires special treatment of &quot;small&quot; numbers (as with 2, 3, and 4 in Czech; or numbers ending 2, 3, or 4 but not 12, 13, or 14 in Polish).</td> 
         </tr> 
         <tr> 
          <td><code>many</code></td>
          <td>When the language requires special treatment of &quot;large&quot; numbers (as with numbers ending 11-99 in Maltese).</td> 
         </tr> 
         <tr> 
          <td><code>other</code></td>
          <td>When the language does not require special treatment of the given quantity (as with all numbers in Chinese, or 42 in English).</td> 
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>:
   <p></p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;plurals name=&quot;numberOfSongsAvailable&quot;&gt;
        &lt;item quantity=&quot;one&quot;&gt;One song found.&lt;/item&gt;
        &lt;item quantity=&quot;other&quot;&gt;%d songs found.&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
   <p>XML file saved at <code>res/values-pl/strings.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;plurals name=&quot;numberOfSongsAvailable&quot;&gt;
        &lt;item quantity=&quot;one&quot;&gt;Znaleziono jedn? piosenk?.&lt;/item&gt;
        &lt;item quantity=&quot;few&quot;&gt;Znaleziono %d piosenki.&lt;/item&gt;
        &lt;item quantity=&quot;other&quot;&gt;Znaleziono %d piosenek.&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
   <p>Java code:</p> 
   <pre>
int count = getNumberOfsongsAvailable();
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String songsFound = res.<a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int, java.lang.Object...)">getQuantityString</a>(R.plurals.numberOfSongsAvailable, count, count);
</pre> 
   <p>When using the <a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int, java.lang.Object...)"><code>getQuantityString()</code></a> method, you need to pass the <code>count</code> twice if your string includes <a href="#FormattingAndStyling">string formatting</a> with a number. For example, for the string <code>%d songs found</code>, the first <code>count</code> parameter selects the appropriate plural string and the second <code>count</code> parameter is inserted into the <code>%d</code> placeholder. If your plural strings do not include string formatting, you don't need to pass the third parameter to <code><a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int)">getQuantityString</a></code>.</p> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Context","android.content.Context","class",0
,"Formatting and Styling","Formatting strings","<h3>Formatting strings</h3> 
 <p>If you need to format your strings using <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format(String, Object...)</code></a>, then you can do so by putting your format arguments in the string resource. For example, with the following resource:</p> 
 <pre>
&lt;string name=&quot;welcome_messages&quot;&gt;Hello, %1$s! You have %2$d new messages.&lt;/string&gt;
</pre> 
 <p>In this example, the format string has two arguments: <code>%1$s</code> is a string and <code>%2$d</code> is a decimal number. You can format the string with arguments from your application like this:</p> 
 <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), username, mailCount);
</pre> 
 ","Context","android.content.Context","class",1
,"Formatting and Styling","Styling with HTML markup","<h3>Styling with HTML markup</h3> 
 <p>You can add styling to your strings with HTML markup. For example:</p> 
 <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string name=&quot;welcome&quot;&gt;Welcome to &lt;b&gt;Android&lt;/b&gt;!&lt;/string&gt;
&lt;/resources&gt;
</pre> 
 <p>Supported HTML elements include:</p> 
 <ul> 
  <li><code>&lt;b&gt;</code> for <b>bold</b> text.</li> 
  <li><code>&lt;i&gt;</code> for <i>italic</i> text.</li> 
  <li><code>&lt;u&gt;</code> for <u>underline</u> text.</li> 
 </ul> 
 <p>Sometimes you may want to create a styled text resource that is also used as a format string. Normally, this won't work because the <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format(String, Object...)</code></a> method will strip all the style information from the string. The work-around to this is to write the HTML tags with escaped entities, which are then recovered with <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, after the formatting takes place. For example:</p> 
 <ol> 
  <li>Store your styled text resource as an HTML-escaped string: <pre>
&lt;resources&gt;
  &lt;string name=&quot;welcome_messages&quot;&gt;Hello, %1$s! You have &amp;lt;b&gt;%2$d new messages&amp;lt;/b&gt;.&lt;/string&gt;
&lt;/resources&gt;
</pre> <p>In this formatted string, a <code>&lt;b&gt;</code> element is added. Notice that the opening bracket is HTML-escaped, using the <code>&amp;lt;</code> notation.</p> </li> 
  <li>Then format the string as usual, but also call <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> to convert the HTML text into styled text: <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), username, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> </li> 
 </ol> 
 <p>Because the <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> method will format all HTML entities, be sure to escape any possible HTML characters in the strings you use with the formatted text, using <code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode(String)</a></code>. For instance, if you'll be passing a string argument to <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format()</code></a> that may contain characters such as &quot;&lt;&quot; or &quot;&amp;&quot;, then they must be escaped before formatting, so that when the formatted string is passed through <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, the characters come out the way they were originally written. For example:</p> 
 <pre>
String escapedUsername = TextUtil.<code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode</a></code>(username);

Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), escapedUsername, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> 
</div> 
","Context","android.content.Context","class",0
,"Accessing Resources","Accessing Resources in Code ","<h2 id="ResourcesFromCode">Accessing Resources in Code </h2> 
 <p>You can use a resource in code by passing the resource ID as a method parameter. For example, you can set an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> to use the <code>res/drawable/myimage.png</code> resource using <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code>:</p> 
 <pre>
ImageView imageView = (ImageView) findViewById(R.id.myimageview);
imageView.setImageResource(<strong>R.drawable.myimage</strong>);
</pre> 
 <p>You can also retrieve individual resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>, which you can get an instance of with <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>.</p> 
 <div class="sidebox-wrapper"> 
  <div class="sidebox"> 
   ","ImageView","android.widget.ImageView","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","ImageView","android.widget.ImageView","class",0
,"Drawable Resources","Level List","<h2 id="LevelList">Level List</h2> 
 <p>A Drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the drawable with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> loads the drawable resource in the level list that has a <code>android:maxLevel</code> value greater than or equal to the value passed to the method.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#levellist-element">level-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#levellist-item-element">item</a>
        android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
        android:maxLevel=&quot;<i>integer</i>&quot;
        android:minLevel=&quot;<i>integer</i>&quot; /&gt;
&lt;/level-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="levellist-element">
     <code>&lt;level-list&gt;</code>
    </dt> 
    <dd>
     This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="levellist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use at a certain level. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be inset.
      </dd> 
      <dt>
       <code>android:maxLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The maximum level allowed for this item.
      </dd> 
      <dt>
       <code>android:minLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The minimum level allowed for this item.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;item
        android:drawable=&quot;@drawable/status_off&quot;
        android:maxLevel=&quot;0&quot; /&gt;
    &lt;item
        android:drawable=&quot;@drawable/status_on&quot;
        android:maxLevel=&quot;1&quot; /&gt;
&lt;/level-list&gt;
</pre> 
   <p>Once this is applied to a <code><a href="../../../reference/android/view/View.html">View</a></code>, the level can be changed with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> or <code><a href="../../../reference/android/widget/ImageView.html#setImageLevel(int)">setImageLevel()</a></code>.</p> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","ImageView","android.widget.ImageView","class",0
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","ImageView","android.widget.ImageView","class",0
,"Handling Runtime Changes","Handling the Configuration Change Yourself","<h2 id="HandlingTheChange">Handling the Configuration Change Yourself</h2> 
 <p>If your application doesn't need to update resources during a specific configuration change <em>and</em> you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity.</p> 
 <p class="note"><strong>Note:</strong> Handling the configuration change yourself can make it much more difficult to use alternative resources, because the system does not automatically apply them for you. This technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications.</p> 
 <p>To declare that your activity handles a configuration change, edit the appropriate <a href="../../../guide/topics/manifest/activity-element.html"><code>&lt;activity&gt;</code></a> element in your manifest file to include the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute with a value that represents the configuration you want to handle. Possible values are listed in the documentation for the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute (the most commonly used values are <code>&quot;orientation&quot;</code> to prevent restarts when the screen orientation changes and <code>&quot;keyboardHidden&quot;</code> to prevent restarts when the keyboard availability changes). You can declare multiple configuration values in the attribute by separating them with a pipe <code>|</code> character.</p> 
 <p>For example, the following manifest code declares an activity that handles both the screen orientation change and keyboard availability change:</p> 
 <pre>
&lt;activity android:name=&quot;.MyActivity&quot;
          android:configChanges=&quot;orientation|keyboardHidden&quot;
          android:label=&quot;@string/app_name&quot;&gt;
</pre> 
 <p>Now, when one of these configurations change, <code>MyActivity</code> does not restart. Instead, the <code>MyActivity</code> receives a call to <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. This method is passed a <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object that specifies the new device configuration. By reading fields in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code>, you can determine the new configuration and make appropriate changes by updating the resources used in your interface. At the time this method is called, your activity's <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is updated to return resources based on the new configuration, so you can easily reset elements of your UI without the system restarting your activity.</p> 
 <p class="caution"><strong>Caution:</strong> Beginning with Android 3.2 (API level 13), <strong>the &quot;screen size&quot; also changes</strong> when the device switches between portrait and landscape orientation. Thus, if you want to prevent runtime restarts due to orientation change when developing for API level 13 or higher (as declared by the <a href="../../../guide/topics/manifest/uses-sdk-element.html#min"><code>minSdkVersion</code></a> and <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> attributes), you must include the <code>&quot;screenSize&quot;</code> value in addition to the <code>&quot;orientation&quot;</code> value. That is, you must decalare <code>android:configChanges=&quot;orientation|screenSize&quot;</code>. However, if your application targets API level 12 or lower, then your activity always handles this configuration change itself (this configuration change does not restart your activity, even when running on an Android 3.2 or higher device).</p> 
 <p>For example, the following <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code> implementation checks the current device orientation:</p> 
 <pre>
@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks the orientation of the screen
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        Toast.makeText(this, &quot;landscape&quot;, Toast.LENGTH_SHORT).show();
    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
        Toast.makeText(this, &quot;portrait&quot;, Toast.LENGTH_SHORT).show();
    }
}
</pre> 
 <p>The <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object represents all of the current configurations, not just the ones that have changed. Most of the time, you won't care exactly how the configuration has changed and can simply re-assign all your resources that provide alternatives to the configuration that you're handling. For example, because the <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is now updated, you can reset any <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>s with <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code> and the appropriate resource for the new configuration is used (as described in <a href="providing-resources.html#AlternateResources">Providing Resources</a>).</p> 
 <p>Notice that the values from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> fields are integers that are matched to specific constants from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class. For documentation about which constants to use with each field, refer to the appropriate field in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> reference.</p> 
 <p class="note"><strong>Remember:</strong> When you declare your activity to handle a configuration change, you are responsible for resetting any elements for which you provide alternatives. If you declare your activity to handle the orientation change and have images that should change between landscape and portrait, you must re-assign each resource to each element during <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>.</p> 
 <p>If you don't need to update your application based on these configuration changes, you can instead <em>not</em> implement <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. In which case, all of the resources used before the configuration change are still used and you've only avoided the restart of your activity. However, your application should always be able to shutdown and restart with its previous state intact, so you should not consider this technique an escape from retaining your state during normal activity lifecycle. Not only because there are other configuration changes that you cannot prevent from restarting your application, but also because you should handle events such as when the user leaves your application and it gets destroyed before the user returns to it.</p> 
 <p>For more about which configuration changes you can handle in your activity, see the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> documentation and the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class.</p> 
</div> 
","ImageView","android.widget.ImageView","class",0
,"Accessing Resources","Accessing Resources in Code ","<h2 id="ResourcesFromCode">Accessing Resources in Code </h2> 
 <p>You can use a resource in code by passing the resource ID as a method parameter. For example, you can set an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> to use the <code>res/drawable/myimage.png</code> resource using <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code>:</p> 
 <pre>
ImageView imageView = (ImageView) findViewById(R.id.myimageview);
imageView.setImageResource(<strong>R.drawable.myimage</strong>);
</pre> 
 <p>You can also retrieve individual resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>, which you can get an instance of with <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>.</p> 
 <div class="sidebox-wrapper"> 
  <div class="sidebox"> 
   ","Resources","android.content.res.Resources","class",1
,"Accessing Resources","Access to Original Files","<h2>Access to Original Files</h2> 
   <p>While uncommon, you might need access your original files and directories. If you do, then saving your files in <code>res/</code> won't work for you, because the only way to read a resource from <code>res/</code> is with the resource ID. Instead, you can save your resources in the <code>assets/</code> directory.</p> 
   <p>Files saved in the <code>assets/</code> directory are <em>not</em> given a resource ID, so you can't reference them through the <code>R</code> class or from XML resources. Instead, you can query files in the <code>assets/</code> directory like a normal file system and read raw data using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>.</p> 
   <p>However, if all you require is the ability to read raw data (such as a video or audio file), then save the file in the <code>res/raw/</code> directory and read a stream of bytes using <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">openRawResource()</a></code>.</p> 
  </div> 
 </div> 
 ","Resources","android.content.res.Resources","class",0
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","Resources","android.content.res.Resources","class",0
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","Resources","android.content.res.Resources","class",0
,"Bitmap","Bitmap File","<h3 id="BitmapFile">Bitmap File</h3> 
 <p>A bitmap file is a <code>.png</code>, <code>.jpg</code>, or <code>.gif</code> file. Android creates a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> resource for any of these files when you save them in the <code>res/drawable/</code> directory.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.png</code> (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>)
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd>
   With an image saved at 
   <code>res/drawable/myimage.png</code>, this layout XML applies the image to a View: 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/myimage&quot; /&gt;
</pre> 
   <p>The following application code retrieves the image as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable drawable = res.<code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.myimage);
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/2d-graphics.html">2D Graphics</a></li> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Resources","android.content.res.Resources","class",0
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","Resources","android.content.res.Resources","class",0
,"More Resource Types","Bool","<h2 id="Bool">Bool</h2> 
 <p>A boolean value defined in XML.</p> 
 <p class="note"><strong>Note:</strong> A bool is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine bool resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;bool&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.bool.<em>bool_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]bool/<em>bool_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#bool-resources-element">resources</a>&gt;
    &lt;<a href="#bool-element">bool</a>
        name=&quot;<em>bool_name</em>&quot;
        &gt;[true | false]&lt;/bool&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="bool-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="bool-element">
     <code>&lt;bool&gt;</code>
    </dt> 
    <dd>
     A boolean value: 
     <code>true</code> or 
     <code>false</code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the bool value. This will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values-small/bools.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;bool name=&quot;screen_small&quot;&gt;true&lt;/bool&gt;
    &lt;bool name=&quot;adjust_view_bounds&quot;&gt;true&lt;/bool&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the boolean:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
boolean screenIsSmall = res.<code><a href="../../../reference/android/content/res/Resources.html#getBoolean(int)">getBoolean</a></code>(R.bool.screen_small);
</pre> 
   <p>This layout XML uses the boolean for an attribute:</p> 
   <pre>
&lt;ImageView
    android:layout_height=&quot;fill_parent&quot;
    android:layout_width=&quot;fill_parent&quot;
    android:src=&quot;@drawable/logo&quot;
    android:adjustViewBounds=&quot;@bool/adjust_view_bounds&quot; /&gt;
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",1
,"More Resource Types","Color","<h2 id="Color">Color</h2> 
 <p>A color value defined in XML. The color is specified with an RGB value and alpha channel. You can use a color resource any place that accepts a hexadecimal color value. You can also use a color resource when a drawable resource is expected in XML (for example, <code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 <p>The value always begins with a pound (#) character and then followed by the Alpha-Red-Green-Blue information in one of the following formats:</p> 
 <ul> 
  <li>#<em>RGB</em></li> 
  <li>#<em>ARGB</em></li> 
  <li>#<em>RRGGBB</em></li> 
  <li>#<em>AARRGGBB</em></li> 
 </ul> 
 <p class="note"><strong>Note:</strong> A color is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine color resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/colors.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;color&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.color.<em>color_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]color/<em>color_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#color-resources-element">resources</a>&gt;
    &lt;<a href="#color-element">color</a>
        name=&quot;<em>color_name</em>&quot;
        &gt;<em>hex_color</em>&lt;/color&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="color-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="color-element">
     <code>&lt;color&gt;</code>
    </dt> 
    <dd>
     A color expressed in hexadecimal, as described above. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the color. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/colors.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
   &lt;color name=&quot;opaque_red&quot;&gt;#f00&lt;/color&gt;
   &lt;color name=&quot;translucent_red&quot;&gt;#80ff0000&lt;/color&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the color resource:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int color = res.<code><a href="../../../reference/android/content/res/Resources.html#getColor(int)">getColor</a></code>(R.color.opaque_red);
</pre> 
   <p>This layout XML applies the color to an attribute:</p> 
   <pre>
&lt;TextView
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:textColor=&quot;@color/translucent_red&quot;
    android:text=&quot;Hello&quot;/&gt;
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",1
,"More Resource Types","Dimension","<h2 id="Dimension">Dimension</h2> 
 <p>A dimension value defined in XML. A dimension is specified with a number followed by a unit of measure. For example: 10px, 2in, 5sp. The following units of measure are supported by Android:</p> 
 <dl> 
  <dt>
   <code>dp</code>
  </dt> 
  <dd>
   Density-independent Pixels - An abstract unit that is based on the physical density of the screen. These units are relative to a 160 dpi (dots per inch) screen, on which 1dp is roughly equal to 1px. When running on a higher density screen, the number of pixels used to draw 1dp is scaled up by a factor appropriate for the screen's dpi. Likewise, when on a lower density screen, the number of pixels used for 1dp is scaled down. The ratio of dp-to-pixel will change with the screen density, but not necessarily in direct proportion. Using dp units (instead of px units) is a simple solution to making the view dimensions in your layout resize properly for different screen densities. In other words, it provides consistency for the real-world sizes of your UI elements across different devices.
  </dd> 
  <dt>
   <code>sp</code>
  </dt> 
  <dd>
   Scale-independent Pixels - This is like the dp unit, but it is also scaled by the user's font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user's preference.
  </dd> 
  <dt>
   <code>pt</code>
  </dt> 
  <dd>
   Points - 1/72 of an inch based on the physical size of the screen.
  </dd> 
  <dt>
   <code>px</code>
  </dt> 
  <dd>
   Pixels - Corresponds to actual pixels on the screen. This unit of measure is not recommended because the actual representation can vary across devices; each devices may have a different number of pixels per inch and may have more or fewer total pixels available on the screen.
  </dd> 
  <dt>
   <code>mm</code>
  </dt> 
  <dd>
   Millimeters - Based on the physical size of the screen.
  </dd> 
  <dt>
   <code>in</code>
  </dt> 
  <dd>
   Inches - Based on the physical size of the screen.
  </dd> 
 </dl> 
 <p class="note"><strong>Note:</strong> A dimension is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine dimension resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;dimen&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.dimen.<em>dimension_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]dimen/<em>dimension_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#dimen-resources-element">resources</a>&gt;
    &lt;<a href="#dimen-element">dimen</a>
        name=&quot;<em>dimension_name</em>&quot;
        &gt;<em>dimension</em>&lt;/dimen&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="dimen-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="dimen-element">
     <code>&lt;dimen&gt;</code>
    </dt> 
    <dd>
     A dimension, represented by a float, followed by a unit of measurement (dp, sp, pt, px, mm, in), as described above. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the dimension. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/dimens.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;dimen name=&quot;textview_height&quot;&gt;25dp&lt;/dimen&gt;
    &lt;dimen name=&quot;textview_width&quot;&gt;150dp&lt;/dimen&gt;
    &lt;dimen name=&quot;ball_radius&quot;&gt;30dp&lt;/dimen&gt;
    &lt;dimen name=&quot;font_size&quot;&gt;16sp&lt;/dimen&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves a dimension:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
float fontSize = res.<code><a href="../../../reference/android/content/res/Resources.html#getDimension(int)">getDimension</a></code>(R.dimen.font_size);
</pre> 
   <p>This layout XML applies dimensions to attributes:</p> 
   <pre>
&lt;TextView
    android:layout_height=&quot;@dimen/textview_height&quot;
    android:layout_width=&quot;@dimen/textview_width&quot;
    android:textSize=&quot;@dimen/font_size&quot;/&gt;
</pre> 
  </dd>
 </dl>  
 <!-- end example -->  
 ","Resources","android.content.res.Resources","class",0
,"More Resource Types","Integer","<h2 id="Integer">Integer</h2> 
 <p>An integer defined in XML.</p> 
 <p class="note"><strong>Note:</strong> An integer is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine integer resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename.xml</em></code>
   <br /> The filename is arbitrary. The 
   <code>&lt;integer&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.integer.<em>integer_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]integer/<em>integer_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#integer-resources-element">resources</a>&gt;
    &lt;<a href="#integer-element">integer</a>
        name=&quot;<em>integer_name</em>&quot;
        &gt;<em>integer</em>&lt;/integer&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="integer-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="integer-element">
     <code>&lt;integer&gt;</code>
    </dt> 
    <dd>
     An integer. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the integer. This will be used as the resource ID. 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/values/integers.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;integer name=&quot;max_speed&quot;&gt;75&lt;/integer&gt;
    &lt;integer name=&quot;min_speed&quot;&gt;5&lt;/integer&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves an integer:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int maxSpeed = res.<code><a href="../../../reference/android/content/res/Resources.html#getInteger(int)">getInteger</a></code>(R.integer.max_speed);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",1
,"More Resource Types","Integer Array","<h2 id="IntegerArray">Integer Array</h2> 
 <p>An array of integers defined in XML.</p> 
 <p class="note"><strong>Note:</strong> An integer array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine integer array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;integer-array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an array of integers.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>integer_array_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]array.<em>integer_array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#integer-array-resources-element">resources</a>&gt;
    &lt;<a href="#integer-array-element">integer-array</a>
        name=&quot;<em>integer_array_name</em>&quot;&gt;
        &lt;<a href="#integer-array-item-element">item</a>
            &gt;<em>integer</em>&lt;/item&gt;
    &lt;/integer-array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="integer-array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="integer-array-element">
     <code>&lt;integer-array&gt;</code>
    </dt> 
    <dd>
     Defines an array of integers. Contains one or more child 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="integer-array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     An integer. The value can be a reference to another integer resource. Must be a child of a 
     <code>&lt;integer-array&gt;</code> element. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/integers.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;integer-array name=&quot;bits&quot;&gt;
        &lt;item&gt;4&lt;/item&gt;
        &lt;item&gt;8&lt;/item&gt;
        &lt;item&gt;16&lt;/item&gt;
        &lt;item&gt;32&lt;/item&gt;
    &lt;/integer-array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves the integer array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
int[] bits = res.<code><a href="../../../reference/android/content/res/Resources.html#getIntArray(int)">getIntArray</a></code>(R.array.bits);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",1
,"More Resource Types","Typed Array","<h2 id="TypedArray">Typed Array</h2> 
 <p>A <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code> defined in XML. You can use this to create an array of other resources, such as drawables. Note that the array is not required to be homogeneous, so you can create an array of mixed resource types, but you must be aware of what and where the data types are in the array so that you can properly obtain each item with the <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>'s <code>get...()</code> methods.</p> 
 <p class="note"><strong>Note:</strong> A typed array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine typed array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>array_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]array.<em>array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#array-resources-element">resources</a>&gt;
    &lt;<a href="#array-element">array</a>
        name=&quot;<em>integer_array_name</em>&quot;&gt;
        &lt;<a href="#array-item-element">item</a>&gt;<em>resource</em>&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="array-element">
     <code>&lt;array&gt;</code>
    </dt> 
    <dd>
     Defines an array. Contains one or more child 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A generic resource. The value can be a reference to a resource or a simple data type. Must be a child of an 
     <code>&lt;array&gt;</code> element. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/arrays.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;array name=&quot;icons&quot;&gt;
        &lt;item&gt;@drawable/home&lt;/item&gt;
        &lt;item&gt;@drawable/settings&lt;/item&gt;
        &lt;item&gt;@drawable/logout&lt;/item&gt;
    &lt;/array&gt;
    &lt;array name=&quot;colors&quot;&gt;
        &lt;item&gt;#FFFF0000&lt;/item&gt;
        &lt;item&gt;#FF00FF00&lt;/item&gt;
        &lt;item&gt;#FF0000FF&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves each array and then obtains the first entry in each array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
TypedArray icons = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.icons);
Drawable drawable = icons.<code><a href="../../../reference/android/content/res/TypedArray.html#getDrawable(int)">getDrawable</a></code>(0);

TypedArray colors = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.colors);
int color = colors.<code><a href="../../../reference/android/content/res/TypedArray.html#getColor(int, int)">getColor</a></code>(0,0);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 <!-- TODO


","Resources","android.content.res.Resources","class",0
,"Resources Overview","Raw Assets","<h2>Raw Assets</h2>

<p>An alternative to saving files in <code>res/</code> is to save files in the <code>assets/</code> directory. This should only be necessary if you need direct access to original files and
directories by name. Files saved in the <code>assets/</code> directory will not be given a resource
ID, so you can't reference them through the <code>R</code> class or from XML resources. Instead, you can
query data in the <code>assets/</code> directory like an ordinary file system, search through the
directory and
read raw data using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>. For example, this can be more useful
when dealing with textures for a game. However, if you only need to read raw data from a file
(such as a video or audio file), then you should save files into the <code>res/raw/</code> directory and
then read a stream of bytes using <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">openRawResource(int)</a></code>. This
is uncommon, but if you need direct access to original files in <code>assets/</code>, refer to the <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code> documentation.</p>
--> 
</div> 
","Resources","android.content.res.Resources","class",1
,"Providing Resources","Grouping Resource Types","<h2 id="ResourceTypes">Grouping Resource Types</h2> 
 <p>You should place each type of resource in a specific subdirectory of your project's <code>res/</code> directory. For example, here's the file hierarchy for a simple project:</p> 
 <pre class="classic no-pretty-print">
MyProject/
    src/  <span style="color:black">
        MyActivity.java  </span>
    res/
        drawable/  <span style="color:black">
            icon.png  </span>
        layout/  <span style="color:black">
            main.xml
            info.xml</span>
        values/  <span style="color:black">
            strings.xml  </span>
</pre> 
 <p>As you can see in this example, the <code>res/</code> directory contains all the resources (in subdirectories): an image resource, two layout resources, and a string resource file. The resource directory names are important and are described in table 1.</p> 
 <p class="table-caption" id="table1"><strong>Table 1.</strong> Resource directories supported inside project <code>res/</code> directory.</p> 
 <table> 
  <tbody>
   <tr> 
    <th scope="col">Directory</th> 
    <th scope="col">Resource Type</th> 
   </tr> 
   <tr> 
    <td><code>animator/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/prop-animation.html">property animations</a>.</td> 
   </tr> 
   <tr> 
    <td><code>anim/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/view-animation.html#tween-animation">tween animations</a>. (Property animations can also be saved in this directory, but the <code>animator/</code> directory is preferred for property animations to distinguish between the two types.)</td> 
   </tr> 
   <tr> 
    <td><code>color/</code></td> 
    <td>XML files that define a state list of colors. See <a href="color-list-resource.html">Color State List Resource</a></td> 
   </tr> 
   <tr> 
    <td><code>drawable/</code></td> 
    <td><p>Bitmap files (<code>.png</code>, <code>.9.png</code>, <code>.jpg</code>, <code>.gif</code>) or XML files that are compiled into the following drawable resource subtypes:</p> 
     <ul> 
      <li>Bitmap files</li> 
      <li>Nine-Patches (re-sizable bitmaps)</li> 
      <li>State lists</li> 
      <li>Shapes</li> 
      <li>Animation drawables</li> 
      <li>Other drawables</li> 
     </ul> <p>See <a href="drawable-resource.html">Drawable Resources</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>layout/</code></td> 
    <td>XML files that define a user interface layout. See <a href="layout-resource.html">Layout Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>menu/</code></td> 
    <td>XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See <a href="menu-resource.html">Menu Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>raw/</code></td> 
    <td><p>Arbitrary files to save in their raw form. To open these resources with a raw <code><a href="../../../reference/java/io/InputStream.html">InputStream</a></code>, call <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">Resources.openRawResource()</a></code> with the resource ID, which is <code>R.raw.<em>filename</em></code>.</p> <p>However, if you need access to original file names and file hierarchy, you might consider saving some resources in the <code>assets/</code> directory (instead of <code>res/raw/</code>). Files in <code>assets/</code> are not given a resource ID, so you can read them only using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>.</p></td> 
   </tr> 
   <tr> 
    <td><code>values/</code></td> 
    <td><p>XML files that contain simple values, such as strings, integers, and colors.</p> <p>Whereas XML resource files in other <code>res/</code> subdirectories define a single resource based on the XML filename, files in the <code>values/</code> directory describe multiple resources. For a file in this directory, each child of the <code>&lt;resources&gt;</code> element defines a single resource. For example, a <code>&lt;string&gt;</code> element creates an <code>R.string</code> resource and a <code>&lt;color&gt;</code> element creates an <code>R.color</code> resource.</p> <p>Because each resource is defined with its own XML element, you can name the file whatever you want and place different resource types in one file. However, for clarity, you might want to place unique resource types in different files. For example, here are some filename conventions for resources you can create in this directory:</p> 
     <ul> 
      <li>arrays.xml for resource arrays (<a href="more-resources.html#TypedArray">typed arrays</a>).</li> 
      <li>colors.xml for <a href="more-resources.html#Color">color values</a></li> 
      <li>dimens.xml for <a href="more-resources.html#Dimension">dimension values</a>.</li> 
      <li>strings.xml for <a href="string-resource.html">string values</a>.</li> 
      <li>styles.xml for <a href="style-resource.html">styles</a>.</li> 
     </ul> <p>See <a href="string-resource.html">String Resources</a>, <a href="style-resource.html">Style Resource</a>, and <a href="more-resources.html">More Resource Types</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>xml/</code></td> 
    <td>Arbitrary XML files that can be read at runtime by calling <code><a href="../../../reference/android/content/res/Resources.html#getXml(int)">Resources.getXML()</a></code>. Various XML configuration files must be saved here, such as a <a href="../../../guide/topics/search/searchable-config.html">searchable configuration</a>. 
     <!-- or preferences configuration. --></td> 
   </tr> 
  </tbody>
 </table> 
 <p class="caution"><strong>Caution:</strong> Never save resource files directly inside the <code>res/</code> directory¡ªit will cause a compiler error.</p> 
 <p>For more information about certain types of resources, see the <a href="available-resources.html">Resource Types</a> documentation.</p> 
 <p>The resources that you save in the subdirectories defined in table 1 are your &quot;default&quot; resources. That is, these resources define the default design and content for your application. However, different types of Android-powered devices might call for different types of resources. For example, if a device has a larger than normal screen, then you should provide different layout resources that take advantage of the extra screen space. Or, if a device has a different language setting, then you should provide different string resources that translate the text in your user interface. To provide these different resources for different device configurations, you need to provide alternative resources, in addition to your default resources.</p> 
 ","Resources","android.content.res.Resources","class",1
,"Handling Runtime Changes","Handling the Configuration Change Yourself","<h2 id="HandlingTheChange">Handling the Configuration Change Yourself</h2> 
 <p>If your application doesn't need to update resources during a specific configuration change <em>and</em> you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity.</p> 
 <p class="note"><strong>Note:</strong> Handling the configuration change yourself can make it much more difficult to use alternative resources, because the system does not automatically apply them for you. This technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications.</p> 
 <p>To declare that your activity handles a configuration change, edit the appropriate <a href="../../../guide/topics/manifest/activity-element.html"><code>&lt;activity&gt;</code></a> element in your manifest file to include the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute with a value that represents the configuration you want to handle. Possible values are listed in the documentation for the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute (the most commonly used values are <code>&quot;orientation&quot;</code> to prevent restarts when the screen orientation changes and <code>&quot;keyboardHidden&quot;</code> to prevent restarts when the keyboard availability changes). You can declare multiple configuration values in the attribute by separating them with a pipe <code>|</code> character.</p> 
 <p>For example, the following manifest code declares an activity that handles both the screen orientation change and keyboard availability change:</p> 
 <pre>
&lt;activity android:name=&quot;.MyActivity&quot;
          android:configChanges=&quot;orientation|keyboardHidden&quot;
          android:label=&quot;@string/app_name&quot;&gt;
</pre> 
 <p>Now, when one of these configurations change, <code>MyActivity</code> does not restart. Instead, the <code>MyActivity</code> receives a call to <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. This method is passed a <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object that specifies the new device configuration. By reading fields in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code>, you can determine the new configuration and make appropriate changes by updating the resources used in your interface. At the time this method is called, your activity's <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is updated to return resources based on the new configuration, so you can easily reset elements of your UI without the system restarting your activity.</p> 
 <p class="caution"><strong>Caution:</strong> Beginning with Android 3.2 (API level 13), <strong>the &quot;screen size&quot; also changes</strong> when the device switches between portrait and landscape orientation. Thus, if you want to prevent runtime restarts due to orientation change when developing for API level 13 or higher (as declared by the <a href="../../../guide/topics/manifest/uses-sdk-element.html#min"><code>minSdkVersion</code></a> and <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> attributes), you must include the <code>&quot;screenSize&quot;</code> value in addition to the <code>&quot;orientation&quot;</code> value. That is, you must decalare <code>android:configChanges=&quot;orientation|screenSize&quot;</code>. However, if your application targets API level 12 or lower, then your activity always handles this configuration change itself (this configuration change does not restart your activity, even when running on an Android 3.2 or higher device).</p> 
 <p>For example, the following <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code> implementation checks the current device orientation:</p> 
 <pre>
@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks the orientation of the screen
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        Toast.makeText(this, &quot;landscape&quot;, Toast.LENGTH_SHORT).show();
    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
        Toast.makeText(this, &quot;portrait&quot;, Toast.LENGTH_SHORT).show();
    }
}
</pre> 
 <p>The <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object represents all of the current configurations, not just the ones that have changed. Most of the time, you won't care exactly how the configuration has changed and can simply re-assign all your resources that provide alternatives to the configuration that you're handling. For example, because the <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is now updated, you can reset any <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>s with <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code> and the appropriate resource for the new configuration is used (as described in <a href="providing-resources.html#AlternateResources">Providing Resources</a>).</p> 
 <p>Notice that the values from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> fields are integers that are matched to specific constants from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class. For documentation about which constants to use with each field, refer to the appropriate field in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> reference.</p> 
 <p class="note"><strong>Remember:</strong> When you declare your activity to handle a configuration change, you are responsible for resetting any elements for which you provide alternatives. If you declare your activity to handle the orientation change and have images that should change between landscape and portrait, you must re-assign each resource to each element during <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>.</p> 
 <p>If you don't need to update your application based on these configuration changes, you can instead <em>not</em> implement <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. In which case, all of the resources used before the configuration change are still used and you've only avoided the restart of your activity. However, your application should always be able to shutdown and restart with its previous state intact, so you should not consider this technique an escape from retaining your state during normal activity lifecycle. Not only because there are other configuration changes that you cannot prevent from restarting your application, but also because you should handle events such as when the user leaves your application and it gets destroyed before the user returns to it.</p> 
 <p>For more about which configuration changes you can handle in your activity, see the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> documentation and the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class.</p> 
</div> 
","Resources","android.content.res.Resources","class",0
,"String Resources","String Array","<h2 id="StringArray">String Array</h2> 
 <p>An array of strings that can be referenced from the application.</p> 
 <p class="note"><strong>Note:</strong> A string array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine string array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;string-array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an array of 
   <code><a href="../../../reference/java/lang/String.html">String</a></code>s.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>string_array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#string-array-resources-element">resources</a>&gt;
    &lt;<a href="#string-array-element">string-array</a>
        name=&quot;<em>string_array_name</em>&quot;&gt;
        &lt;<a href="#string-array-item-element">item</a>
            &gt;<em>text_string</em>&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="string-array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="string-array-element">
     <code>&lt;string-array&gt;</code>
    </dt> 
    <dd>
     Defines an array of strings. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="string-array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A string, which can include styling tags. The value can be a reference to another string resource. Must be a child of a 
     <code>&lt;string-array&gt;</code> element. Beware that you must escape apostrophes and quotation marks. See 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below, for information about to properly style and format your strings. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string-array name=&quot;planets_array&quot;&gt;
        &lt;item&gt;Mercury&lt;/item&gt;
        &lt;item&gt;Venus&lt;/item&gt;
        &lt;item&gt;Earth&lt;/item&gt;
        &lt;item&gt;Mars&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves a string array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String[] planets = res.<code><a href="../../../reference/android/content/res/Resources.html#getStringArray(int)">getStringArray</a></code>(R.array.planets_array);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",0
,"String Resources","Quantity Strings (Plurals)","<h2 id="Plurals">Quantity Strings (Plurals)</h2> 
 <p>Different languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write &quot;1 book&quot;, but for any other quantity we'd write &quot;<i>n</i> books&quot;. This distinction between singular and plural is very common, but other languages make finer distinctions. The full set supported by Android is <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code>, and <code>other</code>. </p>
 <p>The rules for deciding which case to use for a given language and quantity can be very complex, so Android provides you with methods such as <code><a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int)">getQuantityString()</a></code> to select the appropriate resource for you. </p>
 <p>Although historically called &quot;quantity strings&quot; (and still called that in API), quantity strings should <i>only</i> be used for plurals. It would be a mistake to use quantity strings to implement something like Gmail's &quot;Inbox&quot; versus &quot;Inbox (12)&quot; when there are unread messages, for example. It might seem convenient to use quantity strings instead of an <code>if</code> statement, but it's important to note that some languages (such as Chinese) don't make these grammatical distinctions at all, so you'll always get the <code>other</code> string. </p>
 <p>The selection of which string to use is made solely based on grammatical <i>necessity</i>. In English, a string for <code>zero</code> will be ignored even if the quantity is 0, because 0 isn't grammatically different from 2, or any other number except 1 (&quot;zero books&quot;, &quot;one book&quot;, &quot;two books&quot;, and so on). </p>
 <p>Don't be misled either by the fact that, say, <code>two</code> sounds like it could only apply to the quantity 2: a language may require that 2, 12, 102 (and so on) are all treated like one another but differently to other quantities. Rely on your translator to know what distinctions their language actually insists upon. </p>
 <p>It's often possible to avoid quantity strings by using quantity-neutral formulations such as &quot;Books: 1&quot;. This will make your life and your translators' lives easier, if it's a style that's in keeping with your application. </p>
 <p class="note"><strong>Note:</strong> A plurals collection is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine plurals resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;plurals&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.plurals.<em>plural_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#plurals-resources-element">resources</a>&gt;
    &lt;<a href="#plurals-element">plurals</a>
        name=&quot;<em>plural_name</em>&quot;&gt;
        &lt;<a href="#plurals-item-element">item</a>
            quantity=[&quot;zero&quot; | &quot;one&quot; | &quot;two&quot; | &quot;few&quot; | &quot;many&quot; | &quot;other&quot;]
            &gt;<em>text_string</em>&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="plurals-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="plurals-element">
     <code>&lt;plurals&gt;</code>
    </dt> 
    <dd>
     A collection of strings, of which, one string is provided depending on the amount of something. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the pair of strings. This name will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
    <dt id="plurals-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A plural or singular string. The value can be a reference to another string resource. Must be a child of a 
     <code>&lt;plurals&gt;</code> element. Beware that you must escape apostrophes and quotation marks. See 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below, for information about to properly style and format your strings. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>quantity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. A value indicating when this string should be used. Valid values, with non-exhaustive examples in parentheses: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr> 
          <td><code>zero</code></td>
          <td>When the language requires special treatment of the number 0 (as in Arabic).</td> 
         </tr> 
         <tr> 
          <td><code>one</code></td>
          <td>When the language requires special treatment of numbers like one (as with the number 1 in English and most other languages; in Russian, any number ending in 1 but not ending in 11 is in this class).</td> 
         </tr> 
         <tr> 
          <td><code>two</code></td>
          <td>When the language requires special treatment of numbers like two (as with 2 in Welsh, or 102 in Slovenian).</td> 
         </tr> 
         <tr> 
          <td><code>few</code></td>
          <td>When the language requires special treatment of &quot;small&quot; numbers (as with 2, 3, and 4 in Czech; or numbers ending 2, 3, or 4 but not 12, 13, or 14 in Polish).</td> 
         </tr> 
         <tr> 
          <td><code>many</code></td>
          <td>When the language requires special treatment of &quot;large&quot; numbers (as with numbers ending 11-99 in Maltese).</td> 
         </tr> 
         <tr> 
          <td><code>other</code></td>
          <td>When the language does not require special treatment of the given quantity (as with all numbers in Chinese, or 42 in English).</td> 
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>:
   <p></p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;plurals name=&quot;numberOfSongsAvailable&quot;&gt;
        &lt;item quantity=&quot;one&quot;&gt;One song found.&lt;/item&gt;
        &lt;item quantity=&quot;other&quot;&gt;%d songs found.&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
   <p>XML file saved at <code>res/values-pl/strings.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;plurals name=&quot;numberOfSongsAvailable&quot;&gt;
        &lt;item quantity=&quot;one&quot;&gt;Znaleziono jedn? piosenk?.&lt;/item&gt;
        &lt;item quantity=&quot;few&quot;&gt;Znaleziono %d piosenki.&lt;/item&gt;
        &lt;item quantity=&quot;other&quot;&gt;Znaleziono %d piosenek.&lt;/item&gt;
    &lt;/plurals&gt;
&lt;/resources&gt;
</pre> 
   <p>Java code:</p> 
   <pre>
int count = getNumberOfsongsAvailable();
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String songsFound = res.<a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int, java.lang.Object...)">getQuantityString</a>(R.plurals.numberOfSongsAvailable, count, count);
</pre> 
   <p>When using the <a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int, java.lang.Object...)"><code>getQuantityString()</code></a> method, you need to pass the <code>count</code> twice if your string includes <a href="#FormattingAndStyling">string formatting</a> with a number. For example, for the string <code>%d songs found</code>, the first <code>count</code> parameter selects the appropriate plural string and the second <code>count</code> parameter is inserted into the <code>%d</code> placeholder. If your plural strings do not include string formatting, you don't need to pass the third parameter to <code><a href="../../../reference/android/content/res/Resources.html#getQuantityString(int, int)">getQuantityString</a></code>.</p> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Resources","android.content.res.Resources","class",1
,"Accessing Resources","Access to Original Files","<h2>Access to Original Files</h2> 
   <p>While uncommon, you might need access your original files and directories. If you do, then saving your files in <code>res/</code> won't work for you, because the only way to read a resource from <code>res/</code> is with the resource ID. Instead, you can save your resources in the <code>assets/</code> directory.</p> 
   <p>Files saved in the <code>assets/</code> directory are <em>not</em> given a resource ID, so you can't reference them through the <code>R</code> class or from XML resources. Instead, you can query files in the <code>assets/</code> directory like a normal file system and read raw data using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>.</p> 
   <p>However, if all you require is the ability to read raw data (such as a video or audio file), then save the file in the <code>res/raw/</code> directory and read a stream of bytes using <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">openRawResource()</a></code>.</p> 
  </div> 
 </div> 
 ","AssetManager","android.content.res.AssetManager","class",0
,"Resources Overview","Raw Assets","<h2>Raw Assets</h2>

<p>An alternative to saving files in <code>res/</code> is to save files in the <code>assets/</code> directory. This should only be necessary if you need direct access to original files and
directories by name. Files saved in the <code>assets/</code> directory will not be given a resource
ID, so you can't reference them through the <code>R</code> class or from XML resources. Instead, you can
query data in the <code>assets/</code> directory like an ordinary file system, search through the
directory and
read raw data using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>. For example, this can be more useful
when dealing with textures for a game. However, if you only need to read raw data from a file
(such as a video or audio file), then you should save files into the <code>res/raw/</code> directory and
then read a stream of bytes using <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">openRawResource(int)</a></code>. This
is uncommon, but if you need direct access to original files in <code>assets/</code>, refer to the <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code> documentation.</p>
--> 
</div> 
","AssetManager","android.content.res.AssetManager","class",0
,"Providing Resources","Grouping Resource Types","<h2 id="ResourceTypes">Grouping Resource Types</h2> 
 <p>You should place each type of resource in a specific subdirectory of your project's <code>res/</code> directory. For example, here's the file hierarchy for a simple project:</p> 
 <pre class="classic no-pretty-print">
MyProject/
    src/  <span style="color:black">
        MyActivity.java  </span>
    res/
        drawable/  <span style="color:black">
            icon.png  </span>
        layout/  <span style="color:black">
            main.xml
            info.xml</span>
        values/  <span style="color:black">
            strings.xml  </span>
</pre> 
 <p>As you can see in this example, the <code>res/</code> directory contains all the resources (in subdirectories): an image resource, two layout resources, and a string resource file. The resource directory names are important and are described in table 1.</p> 
 <p class="table-caption" id="table1"><strong>Table 1.</strong> Resource directories supported inside project <code>res/</code> directory.</p> 
 <table> 
  <tbody>
   <tr> 
    <th scope="col">Directory</th> 
    <th scope="col">Resource Type</th> 
   </tr> 
   <tr> 
    <td><code>animator/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/prop-animation.html">property animations</a>.</td> 
   </tr> 
   <tr> 
    <td><code>anim/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/view-animation.html#tween-animation">tween animations</a>. (Property animations can also be saved in this directory, but the <code>animator/</code> directory is preferred for property animations to distinguish between the two types.)</td> 
   </tr> 
   <tr> 
    <td><code>color/</code></td> 
    <td>XML files that define a state list of colors. See <a href="color-list-resource.html">Color State List Resource</a></td> 
   </tr> 
   <tr> 
    <td><code>drawable/</code></td> 
    <td><p>Bitmap files (<code>.png</code>, <code>.9.png</code>, <code>.jpg</code>, <code>.gif</code>) or XML files that are compiled into the following drawable resource subtypes:</p> 
     <ul> 
      <li>Bitmap files</li> 
      <li>Nine-Patches (re-sizable bitmaps)</li> 
      <li>State lists</li> 
      <li>Shapes</li> 
      <li>Animation drawables</li> 
      <li>Other drawables</li> 
     </ul> <p>See <a href="drawable-resource.html">Drawable Resources</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>layout/</code></td> 
    <td>XML files that define a user interface layout. See <a href="layout-resource.html">Layout Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>menu/</code></td> 
    <td>XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See <a href="menu-resource.html">Menu Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>raw/</code></td> 
    <td><p>Arbitrary files to save in their raw form. To open these resources with a raw <code><a href="../../../reference/java/io/InputStream.html">InputStream</a></code>, call <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">Resources.openRawResource()</a></code> with the resource ID, which is <code>R.raw.<em>filename</em></code>.</p> <p>However, if you need access to original file names and file hierarchy, you might consider saving some resources in the <code>assets/</code> directory (instead of <code>res/raw/</code>). Files in <code>assets/</code> are not given a resource ID, so you can read them only using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>.</p></td> 
   </tr> 
   <tr> 
    <td><code>values/</code></td> 
    <td><p>XML files that contain simple values, such as strings, integers, and colors.</p> <p>Whereas XML resource files in other <code>res/</code> subdirectories define a single resource based on the XML filename, files in the <code>values/</code> directory describe multiple resources. For a file in this directory, each child of the <code>&lt;resources&gt;</code> element defines a single resource. For example, a <code>&lt;string&gt;</code> element creates an <code>R.string</code> resource and a <code>&lt;color&gt;</code> element creates an <code>R.color</code> resource.</p> <p>Because each resource is defined with its own XML element, you can name the file whatever you want and place different resource types in one file. However, for clarity, you might want to place unique resource types in different files. For example, here are some filename conventions for resources you can create in this directory:</p> 
     <ul> 
      <li>arrays.xml for resource arrays (<a href="more-resources.html#TypedArray">typed arrays</a>).</li> 
      <li>colors.xml for <a href="more-resources.html#Color">color values</a></li> 
      <li>dimens.xml for <a href="more-resources.html#Dimension">dimension values</a>.</li> 
      <li>strings.xml for <a href="string-resource.html">string values</a>.</li> 
      <li>styles.xml for <a href="style-resource.html">styles</a>.</li> 
     </ul> <p>See <a href="string-resource.html">String Resources</a>, <a href="style-resource.html">Style Resource</a>, and <a href="more-resources.html">More Resource Types</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>xml/</code></td> 
    <td>Arbitrary XML files that can be read at runtime by calling <code><a href="../../../reference/android/content/res/Resources.html#getXml(int)">Resources.getXML()</a></code>. Various XML configuration files must be saved here, such as a <a href="../../../guide/topics/search/searchable-config.html">searchable configuration</a>. 
     <!-- or preferences configuration. --></td> 
   </tr> 
  </tbody>
 </table> 
 <p class="caution"><strong>Caution:</strong> Never save resource files directly inside the <code>res/</code> directory¡ªit will cause a compiler error.</p> 
 <p>For more information about certain types of resources, see the <a href="available-resources.html">Resource Types</a> documentation.</p> 
 <p>The resources that you save in the subdirectories defined in table 1 are your &quot;default&quot; resources. That is, these resources define the default design and content for your application. However, different types of Android-powered devices might call for different types of resources. For example, if a device has a larger than normal screen, then you should provide different layout resources that take advantage of the extra screen space. Or, if a device has a different language setting, then you should provide different string resources that translate the text in your user interface. To provide these different resources for different device configurations, you need to provide alternative resources, in addition to your default resources.</p> 
 ","AssetManager","android.content.res.AssetManager","class",0
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","TextView","android.widget.TextView","class",1
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","ViewAnimator","android.widget.ViewAnimator","class",0
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","Window","android.view.Window","class",0
,"Access to Original Files","Use cases","<h3>Use cases</h3> 
 <p>There are many methods that accept a resource ID parameter and you can retrieve resources using methods in <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code>. You can get an instance of <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> with <code><a href="../../../reference/android/content/Context.html#getResources()">Context.getResources()</a></code>.</p> 
 <p>Here are some examples of accessing resources in code:</p> 
 <pre>
// Load a background for the current screen from a drawable resource
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setBackgroundDrawableResource(int)">setBackgroundDrawableResource</a></code>(<strong>R.drawable.my_background_image</strong>) ;

// Set the Activity title by getting a string from the Resources object, because
//  this method requires a CharSequence rather than a resource ID
<code><a href="../../../reference/android/app/Activity.html#getWindow()">getWindow()</a></code>.<code><a href="../../../reference/android/view/Window.html#setTitle(java.lang.CharSequence)">setTitle</a></code>(getResources().<code><a href="../../../reference/android/content/res/Resources.html#getText(int)">getText</a></code>(<strong>R.string.main_title</strong>));

// Load a custom layout for the current screen
<code><a href="../../../reference/android/app/Activity.html#setContentView(int)">setContentView</a></code>(<strong>R.layout.main_screen</strong>);

// Set a slide in animation by getting an Animation from the Resources object
mFlipper.<code><a href="../../../reference/android/widget/ViewAnimator.html#setInAnimation(android.view.animation.Animation)">setInAnimation</a></code>(AnimationUtils.loadAnimation(this,
        <strong>R.anim.hyperspace_in</strong>));

// Set the text on a TextView object using a resource ID
TextView msgTextView = (TextView) findViewById(<strong>R.id.msg</strong>);
msgTextView.<code><a href="../../../reference/android/widget/TextView.html#setText(int)">setText</a></code>(<strong>R.string.hello_message</strong>);
</pre> 
 <p class="caution"><strong>Caution:</strong> You should never modify the <code>R.java</code> file by hand¡ªit is generated by the <code>aapt</code> tool when your project is compiled. Any changes are overridden next time you compile.</p> 
 ","Activity","android.app.Activity","class",0
,"Drawable Resources","Layer List","<h2 id="LayerList">Layer List</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code> is a drawable object that manages an array of other drawables. Each drawable in the list is drawn in the order of the list¡ªthe last drawable in the list is drawn on top.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;layer-list&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#layerlist-element">layer-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#layerlist-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/layer-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="layerlist-element">
     <code>&lt;layer-list&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="layerlist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to place in the layer drawable, in a position defined by its attributes. Must be a child of a 
     <code>&lt;selector&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
     <p>All drawable items are scaled to fit the size of the containing View, by default. Thus, placing your images in a layer list at different positions might increase the size of the View and some images scale as appropriate. To avoid scaling items in the list, use a <code>&lt;bitmap&gt;</code> element inside the <code>&lt;item&gt;</code> element to specify the drawable and define the gravity to something that does not scale, such as <code>&quot;center&quot;</code>. For example, the following <code>&lt;item&gt;</code> defines an item that scales to fit its container View:</p> 
     <pre>
&lt;item android:drawable=&quot;@drawable/image&quot; /&gt;
</pre> 
     <p>To avoid scaling, the following example uses a <code>&lt;bitmap&gt;</code> element with centered gravity:</p> 
     <pre>
&lt;item&gt;
  &lt;bitmap android:src=&quot;<b>@drawable/image</b>&quot;
          android:gravity=&quot;center&quot; /&gt;
&lt;/item&gt;
</pre> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/layers.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item&gt;
      &lt;bitmap android:src=&quot;@drawable/android_red&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;10dp&quot; android:left=&quot;10dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_green&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;20dp&quot; android:left=&quot;20dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_blue&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
&lt;/layer-list&gt;
</pre> 
   <p>Notice that this example uses a nested <code>&lt;bitmap&gt;</code> element to define the drawable resource for each item with a &quot;center&quot; gravity. This ensures that none of the images are scaled to fit the size of the container, due to resizing caused by the offset images.</p> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/layers&quot; /&gt;
</pre> 
   <p>The result is a stack of increasingly offset images:</p> 
   <img src="../../../images/resources/layers.png" alt="" /> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Activity","android.app.Activity","class",0
,"Drawable Resources","Transition Drawable","<h2 id="Transition">Transition Drawable</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code> is a drawable object that can cross-fade between the two drawable resources.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;transition&gt;</code> element. No more than two items are supported. To transition forward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#startTransition(int)">startTransition()</a></code>. To transition backward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#reverseTransition(int)">reverseTransition()</a></code>.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#transition-element">transition</a>
xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#transition-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/transition&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="transition-element">
     <code>&lt;transition&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="transition-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use as part of the drawable transition. Must be a child of a 
     <code>&lt;transition&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/transition.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;transition xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:drawable=&quot;@drawable/on&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/off&quot; /&gt;
&lt;/transition&gt;
</pre> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageButton
    android:id=&quot;@+id/button&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/transition&quot; /&gt;
</pre> 
   <p>And the following code performs a 500ms transition from the first item to the second:</p> 
   <pre>
ImageButton button = (ImageButton) findViewById(R.id.button);
TransitionDrawable drawable = (TransitionDrawable) button.getDrawable();
drawable.startTransition(500);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Activity","android.app.Activity","class",0
,"More Resource Types","ID","<h2 id="Id">ID</h2> 
 <p>A unique resource ID defined in XML. Using the name you provide in the <code>&lt;item&gt;</code> element, the Android developer tools create a unique integer in your project's <code>R.java</code> class, which you can use as an identifier for an application resources (for example, a <code><a href="../../../reference/android/view/View.html">View</a></code> in your UI layout) or a unique integer for use in your application code (for example, as an ID for a dialog or a result code).</p> 
 <p class="note"><strong>Note:</strong> An ID is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine ID resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element. Also, remember that an ID resources does not reference an actual resource item; it is simply a unique ID that you can attach to other resources or use as a unique integer in your application.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename.xml</em></code>
   <br /> The filename is arbitrary.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.id.<em>name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]id/<em>name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#id-resources-element">resources</a>&gt;
    &lt;<a href="#id-item-element">item</a>
        type=&quot;id&quot;
        name=&quot;<em>id_name</em>&quot; /&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="id-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="id-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a unique ID. Takes no value, only attributes. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>type</code>
      </dt> 
      <dd>
       Must be &quot;id&quot;.
      </dd> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A unique name for the ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/values/ids.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;item type=&quot;id&quot; name=&quot;button_ok&quot; /&gt;
    &lt;item type=&quot;id&quot; name=&quot;dialog_exit&quot; /&gt;
&lt;/resources&gt;
</pre> 
   <p>Then, this layout snippet uses the &quot;button_ok&quot; ID for a Button widget:</p> 
   <pre>
&lt;Button android:id=&quot;<b>@id/button_ok</b>&quot;
    style=&quot;@style/button_style&quot; /&gt;
</pre> 
   <p>Notice that the <code>android:id</code> value does not include the plus sign in the ID reference, because the ID already exists, as defined in the <code>ids.xml</code> example above. (When you specify an ID to an XML resource using the plus sign¡ªin the format <code>android:id=&quot;@+id/name&quot;</code>¡ªit means that the &quot;name&quot; ID does not exist and should be created.)</p> 
   <p>As another example, the following code snippet uses the &quot;dialog_exit&quot; ID as a unique identifier for a dialog:</p> 
   <pre>
<code><a href="../../../reference/android/app/Activity.html#showDialog(int)">showDialog</a></code>(<b>R.id.dialog_exit</b>);
</pre> 
   <p>In the same application, the &quot;dialog_exit&quot; ID is compared when creating a dialog:</p> 
   <pre>
protected Dialog <code><a href="../../../reference/android/app/Activity.html#onCreateDialog(int)">onCreateDialog(int)</a></code>(int id) {
    Dialog dialog;
    switch(id) {
    case <b>R.id.dialog_exit</b>:
        ...
        break;
    default:
        dialog = null;
    }
    return dialog;
}
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","Activity","android.app.Activity","class",0
,"Handling Runtime Changes","Handling Runtime Changes","<p>Some device configurations can change during runtime (such as screen orientation, keyboard availability, and language). When such a change occurs, Android restarts the running <code><a href="../../../reference/android/app/Activity.html">Activity</a></code> (<code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> is called, followed by <code><a href="../../../reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code>). The restart behavior is designed to help your application adapt to new configurations by automatically reloading your application with alternative resources that match the new device configuration.</p> 
 <p>To properly handle a restart, it is important that your activity restores its previous state through the normal <a href="../../../guide/components/activities.html#Lifecycle">Activity lifecycle</a>, in which Android calls <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> before it destroys your activity so that you can save data about the application state. You can then restore the state during <code><a href="../../../reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code> or <code><a href="../../../reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle)">onRestoreInstanceState()</a></code>.</p> 
 <p>To test that your application restarts itself with the application state intact, you should invoke configuration changes (such as changing the screen orientation) while performing various tasks in your application. Your application should be able to restart at any time without loss of user data or state in order to handle events such as configuration changes or when the user receives an incoming phone call and then returns to your application much later after your application process may have been destroyed. To learn how you can restore your activity state, read about the <a href="../../../guide/components/activities.html#Lifecycle">Activity lifecycle</a>.</p> 
 <p>However, you might encounter a situation in which restarting your application and restoring significant amounts of data can be costly and create a poor user experience. In such a situation, you have two other options:</p> 
 <ol type="a"> 
  <li><a href="#RetainingAnObject">Retain an object during a configuration change</a> <p>Allow your activity to restart when a configuration changes, but carry a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> to the new instance of your activity.</p> </li> 
  <li><a href="#HandlingTheChange">Handle the configuration change yourself</a> <p>Prevent the system from restarting your activity during certain configuration changes, but receive a callback when the configurations do change, so that you can manually update your activity as necessary.</p> </li> 
 </ol> 
 ","Activity","android.app.Activity","class",1
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Activity","android.app.Activity","class",0
,"Handling Runtime Changes","Handling the Configuration Change Yourself","<h2 id="HandlingTheChange">Handling the Configuration Change Yourself</h2> 
 <p>If your application doesn't need to update resources during a specific configuration change <em>and</em> you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity.</p> 
 <p class="note"><strong>Note:</strong> Handling the configuration change yourself can make it much more difficult to use alternative resources, because the system does not automatically apply them for you. This technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications.</p> 
 <p>To declare that your activity handles a configuration change, edit the appropriate <a href="../../../guide/topics/manifest/activity-element.html"><code>&lt;activity&gt;</code></a> element in your manifest file to include the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute with a value that represents the configuration you want to handle. Possible values are listed in the documentation for the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute (the most commonly used values are <code>&quot;orientation&quot;</code> to prevent restarts when the screen orientation changes and <code>&quot;keyboardHidden&quot;</code> to prevent restarts when the keyboard availability changes). You can declare multiple configuration values in the attribute by separating them with a pipe <code>|</code> character.</p> 
 <p>For example, the following manifest code declares an activity that handles both the screen orientation change and keyboard availability change:</p> 
 <pre>
&lt;activity android:name=&quot;.MyActivity&quot;
          android:configChanges=&quot;orientation|keyboardHidden&quot;
          android:label=&quot;@string/app_name&quot;&gt;
</pre> 
 <p>Now, when one of these configurations change, <code>MyActivity</code> does not restart. Instead, the <code>MyActivity</code> receives a call to <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. This method is passed a <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object that specifies the new device configuration. By reading fields in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code>, you can determine the new configuration and make appropriate changes by updating the resources used in your interface. At the time this method is called, your activity's <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is updated to return resources based on the new configuration, so you can easily reset elements of your UI without the system restarting your activity.</p> 
 <p class="caution"><strong>Caution:</strong> Beginning with Android 3.2 (API level 13), <strong>the &quot;screen size&quot; also changes</strong> when the device switches between portrait and landscape orientation. Thus, if you want to prevent runtime restarts due to orientation change when developing for API level 13 or higher (as declared by the <a href="../../../guide/topics/manifest/uses-sdk-element.html#min"><code>minSdkVersion</code></a> and <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> attributes), you must include the <code>&quot;screenSize&quot;</code> value in addition to the <code>&quot;orientation&quot;</code> value. That is, you must decalare <code>android:configChanges=&quot;orientation|screenSize&quot;</code>. However, if your application targets API level 12 or lower, then your activity always handles this configuration change itself (this configuration change does not restart your activity, even when running on an Android 3.2 or higher device).</p> 
 <p>For example, the following <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code> implementation checks the current device orientation:</p> 
 <pre>
@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks the orientation of the screen
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        Toast.makeText(this, &quot;landscape&quot;, Toast.LENGTH_SHORT).show();
    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
        Toast.makeText(this, &quot;portrait&quot;, Toast.LENGTH_SHORT).show();
    }
}
</pre> 
 <p>The <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object represents all of the current configurations, not just the ones that have changed. Most of the time, you won't care exactly how the configuration has changed and can simply re-assign all your resources that provide alternatives to the configuration that you're handling. For example, because the <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is now updated, you can reset any <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>s with <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code> and the appropriate resource for the new configuration is used (as described in <a href="providing-resources.html#AlternateResources">Providing Resources</a>).</p> 
 <p>Notice that the values from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> fields are integers that are matched to specific constants from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class. For documentation about which constants to use with each field, refer to the appropriate field in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> reference.</p> 
 <p class="note"><strong>Remember:</strong> When you declare your activity to handle a configuration change, you are responsible for resetting any elements for which you provide alternatives. If you declare your activity to handle the orientation change and have images that should change between landscape and portrait, you must re-assign each resource to each element during <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>.</p> 
 <p>If you don't need to update your application based on these configuration changes, you can instead <em>not</em> implement <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. In which case, all of the resources used before the configuration change are still used and you've only avoided the restart of your activity. However, your application should always be able to shutdown and restart with its previous state intact, so you should not consider this technique an escape from retaining your state during normal activity lifecycle. Not only because there are other configuration changes that you cannot prevent from restarting your application, but also because you should handle events such as when the user leaves your application and it gets destroyed before the user returns to it.</p> 
 <p>For more about which configuration changes you can handle in your activity, see the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> documentation and the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class.</p> 
</div> 
","Activity","android.app.Activity","class",0
,"Accessing Resources","Accessing Resources from XML","<h2 id="ResourcesFromXml">Accessing Resources from XML</h2> 
 <p>You can define values for some XML attributes and elements using a reference to an existing resource. You will often do this when creating layout files, to supply strings and images for your widgets.</p> 
 <p>For example, if you add a <code><a href="../../../reference/android/widget/Button.html">Button</a></code> to your layout, you should use a <a href="string-resource.html">string resource</a> for the button text:</p> 
 <pre>
&lt;Button
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:text=&quot;<strong>@string/submit</strong>&quot; /&gt;
</pre> 
 ","Button","android.widget.Button","class",0
,"Drawable Resources","Nine-Patch","<h2 id="NinePatch">Nine-Patch</h2> 
 <p>A <code><a href="../../../reference/android/graphics/NinePatch.html">NinePatch</a></code> is a PNG image in which you can define stretchable regions that Android scales when content within the View exceeds the normal image bounds. You typically assign this type of image as the background of a View that has at least one dimension set to <code>&quot;wrap_content&quot;</code>, and when the View grows to accomodate the content, the Nine-Patch image is also scaled to match the size of the View. An example use of a Nine-Patch image is the background used by Android's standard <code><a href="../../../reference/android/widget/Button.html">Button</a></code> widget, which must stretch to accommodate the text (or image) inside the button.</p> 
 <p>Same as with a normal <a href="#Bitmap">bitmap</a>, you can reference a Nine-Patch file directly or from a resource defined by XML.</p> 
 <p>For a complete discussion about how to create a Nine-Patch file with stretchable regions, see the <a href="../../../guide/topics/graphics/2d-graphics.html#nine-patch">2D Graphics</a> document.</p> 
 ","Button","android.widget.Button","class",0
,"Drawable Resources","State List","<h2 id="StateList">State List</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code> is a drawable object defined in XML that uses a several different images to represent the same graphic, depending on the state of the object. For example, a <code><a href="../../../reference/android/widget/Button.html">Button</a></code> widget can exist in one of several different states (pressed, focused, or niether) and, using a state list drawable, you can provide a different background image for each state.</p> 
 <p>You can describe the state list in an XML file. Each graphic is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;selector&gt;</code> element. Each <code>&lt;item&gt;</code> uses various attributes to describe the state in which it should be used as the graphic for the drawable.</p> 
 <p>During each state change, the state list is traversed top to bottom and the first item that matches the current state is used¡ªthe selection is <em>not</em> based on the &quot;best match,&quot; but simply the first item that meets the minimum criteria of the state.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#selector-element">selector</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:constantSize=[&quot;true&quot; | &quot;false&quot;]
    android:dither=[&quot;true&quot; | &quot;false&quot;]
    android:variablePadding=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:state_pressed=[&quot;true&quot; | &quot;false&quot;]
        android:state_focused=[&quot;true&quot; | &quot;false&quot;]
        android:state_hovered=[&quot;true&quot; | &quot;false&quot;]
        android:state_selected=[&quot;true&quot; | &quot;false&quot;]
        android:state_checkable=[&quot;true&quot; | &quot;false&quot;]
        android:state_checked=[&quot;true&quot; | &quot;false&quot;]
        android:state_enabled=[&quot;true&quot; | &quot;false&quot;]
        android:state_activated=[&quot;true&quot; | &quot;false&quot;]
        android:state_window_focused=[&quot;true&quot; | &quot;false&quot;] /&gt;
&lt;/selector&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="selector-element">
     <code>&lt;selector&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:constantSize</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if the drawable's reported internal size remains constant as the state changes (the size is the maximum of all of the states); &quot;false&quot; if the size varies based on the current state. Default is false.
      </dd> 
      <dt>
       <code>android:dither</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; to enable dithering of the bitmap if the bitmap does not have the same pixel configuration as the screen (for instance, an ARGB 8888 bitmap with an RGB 565 screen); &quot;false&quot; to disable dithering. Default is true.
      </dd> 
      <dt>
       <code>android:variablePadding</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if the drawable's padding should change based on the current state that is selected; &quot;false&quot; if the padding should stay the same (based on the maximum padding of all the states). Enabling this feature requires that you deal with performing layout when the state changes, which is often not supported. Default is false.
      </dd> 
     </dl> 
    </dd> 
    <dt id="item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use during certain states, as described by its attributes. Must be a child of a 
     <code>&lt;selector&gt;</code> element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:state_pressed</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is pressed (such as when a button is touched/clicked); &quot;false&quot; if this item should be used in the default, non-pressed state.
      </dd> 
      <dt>
       <code>android:state_focused</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object has input focus (such as when the user selects a text input); &quot;false&quot; if this item should be used in the default, non-focused state.
      </dd> 
      <dt>
       <code>android:state_hovered</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is being hovered by a cursor; &quot;false&quot; if this item should be used in the default, non-hovered state. Often, this drawable may be the same drawable used for the &quot;focused&quot; state. 
       <p>Introduced in API level 14.</p>
      </dd> 
      <dt>
       <code>android:state_selected</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is the current user selection when navigating with a directional control (such as when navigating through a list with a d-pad); &quot;false&quot; if this item should be used when the object is not selected. 
       <p>The selected state is used when focus (<code>android:state_focused</code>) is not sufficient (such as when list view has focus and an item within it is selected with a d-pad).</p>
      </dd> 
      <dt>
       <code>android:state_checkable</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is checkable; &quot;false&quot; if this item should be used when the object is not checkable. (Only useful if the object can transition between a checkable and non-checkable widget.)
      </dd> 
      <dt>
       <code>android:state_checked</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is checked; &quot;false&quot; if it should be used when the object is un-checked.
      </dd> 
      <dt>
       <code>android:state_enabled</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is enabled (capable of receiving touch/click events); &quot;false&quot; if it should be used when the object is disabled.
      </dd> 
      <dt>
       <code>android:state_activated</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is activated as the persistent selection (such as to &quot;highlight&quot; the previously selected list item in a persistent navigation view); &quot;false&quot; if it should be used when the object is not activated. 
       <p>Introduced in API level 11.</p>
      </dd> 
      <dt>
       <code>android:state_window_focused</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the application window has focus (the application is in the foreground), &quot;false&quot; if this item should be used when the application window does not have focus (for example, if the notification shade is pulled down or a dialog appears).
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Remember that Android applies the first item in the state list that matches the current state of the object. So, if the first item in the list contains none of the state attributes above, then it is applied every time, which is why your default value should always be last (as demonstrated in the following example).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/button.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:state_pressed=&quot;true&quot;
          android:drawable=&quot;@drawable/button_pressed&quot; /&gt; &lt;!-- pressed --&gt;
    &lt;item android:state_focused=&quot;true&quot;
          android:drawable=&quot;@drawable/button_focused&quot; /&gt; &lt;!-- focused --&gt;
    &lt;item android:state_hovered=&quot;true&quot;
          android:drawable=&quot;@drawable/button_focused&quot; /&gt; &lt;!-- hovered --&gt;
    &lt;item android:drawable=&quot;@drawable/button_normal&quot; /&gt; &lt;!-- default --&gt;
&lt;/selector&gt;
</pre> 
   <p>This layout XML applies the state list drawable to a Button:</p> 
   <pre>
&lt;Button
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:background=&quot;@drawable/button&quot; /&gt;
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Button","android.widget.Button","class",0
,"Accessing Resources","Accessing Platform Resources","<h2 id="PlatformResources">Accessing Platform Resources</h2> 
 <p>Android contains a number of standard resources, such as styles, themes, and layouts. To access these resource, qualify your resource reference with the <code>android</code> package name. For example, Android provides a layout resource you can use for list items in a <code><a href="../../../reference/android/widget/ListAdapter.html">ListAdapter</a></code>:</p> 
 <pre>
<code><a href="../../../reference/android/app/ListActivity.html#setListAdapter(android.widget.ListAdapter)">setListAdapter</a></code>(new <code><a href="../../../reference/android/widget/ArrayAdapter.html">ArrayAdapter</a></code>&lt;String&gt;(this, <strong>android.R.layout.simple_list_item_1</strong>, myarray));
</pre> 
 <p>In this example, <code><a href="../../../reference/android/R.layout.html#simple_list_item_1">simple_list_item_1</a></code> is a layout resource defined by the platform for items in a <code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>. You can use this instead of creating your own layout for list items. For more information, see the <a href="../../../guide/topics/ui/layout/listview.html">List View</a> developer guide.</p> 
</div> 
","ListActivity","android.app.ListActivity","class",0
,"Accessing Resources","Accessing Platform Resources","<h2 id="PlatformResources">Accessing Platform Resources</h2> 
 <p>Android contains a number of standard resources, such as styles, themes, and layouts. To access these resource, qualify your resource reference with the <code>android</code> package name. For example, Android provides a layout resource you can use for list items in a <code><a href="../../../reference/android/widget/ListAdapter.html">ListAdapter</a></code>:</p> 
 <pre>
<code><a href="../../../reference/android/app/ListActivity.html#setListAdapter(android.widget.ListAdapter)">setListAdapter</a></code>(new <code><a href="../../../reference/android/widget/ArrayAdapter.html">ArrayAdapter</a></code>&lt;String&gt;(this, <strong>android.R.layout.simple_list_item_1</strong>, myarray));
</pre> 
 <p>In this example, <code><a href="../../../reference/android/R.layout.html#simple_list_item_1">simple_list_item_1</a></code> is a layout resource defined by the platform for items in a <code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>. You can use this instead of creating your own layout for list items. For more information, see the <a href="../../../guide/topics/ui/layout/listview.html">List View</a> developer guide.</p> 
</div> 
","ArrayAdapter","android.widget.ArrayAdapter","class",1
,"Accessing Resources","Accessing Platform Resources","<h2 id="PlatformResources">Accessing Platform Resources</h2> 
 <p>Android contains a number of standard resources, such as styles, themes, and layouts. To access these resource, qualify your resource reference with the <code>android</code> package name. For example, Android provides a layout resource you can use for list items in a <code><a href="../../../reference/android/widget/ListAdapter.html">ListAdapter</a></code>:</p> 
 <pre>
<code><a href="../../../reference/android/app/ListActivity.html#setListAdapter(android.widget.ListAdapter)">setListAdapter</a></code>(new <code><a href="../../../reference/android/widget/ArrayAdapter.html">ArrayAdapter</a></code>&lt;String&gt;(this, <strong>android.R.layout.simple_list_item_1</strong>, myarray));
</pre> 
 <p>In this example, <code><a href="../../../reference/android/R.layout.html#simple_list_item_1">simple_list_item_1</a></code> is a layout resource defined by the platform for items in a <code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>. You can use this instead of creating your own layout for list items. For more information, see the <a href="../../../guide/topics/ui/layout/listview.html">List View</a> developer guide.</p> 
</div> 
","ListAdapter","android.widget.ListAdapter","class",1
,"Accessing Resources","Accessing Platform Resources","<h2 id="PlatformResources">Accessing Platform Resources</h2> 
 <p>Android contains a number of standard resources, such as styles, themes, and layouts. To access these resource, qualify your resource reference with the <code>android</code> package name. For example, Android provides a layout resource you can use for list items in a <code><a href="../../../reference/android/widget/ListAdapter.html">ListAdapter</a></code>:</p> 
 <pre>
<code><a href="../../../reference/android/app/ListActivity.html#setListAdapter(android.widget.ListAdapter)">setListAdapter</a></code>(new <code><a href="../../../reference/android/widget/ArrayAdapter.html">ArrayAdapter</a></code>&lt;String&gt;(this, <strong>android.R.layout.simple_list_item_1</strong>, myarray));
</pre> 
 <p>In this example, <code><a href="../../../reference/android/R.layout.html#simple_list_item_1">simple_list_item_1</a></code> is a layout resource defined by the platform for items in a <code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>. You can use this instead of creating your own layout for list items. For more information, see the <a href="../../../guide/topics/ui/layout/listview.html">List View</a> developer guide.</p> 
</div> 
","layout","android.R.layout","class",0
,"Accessing Resources","Accessing Platform Resources","<h2 id="PlatformResources">Accessing Platform Resources</h2> 
 <p>Android contains a number of standard resources, such as styles, themes, and layouts. To access these resource, qualify your resource reference with the <code>android</code> package name. For example, Android provides a layout resource you can use for list items in a <code><a href="../../../reference/android/widget/ListAdapter.html">ListAdapter</a></code>:</p> 
 <pre>
<code><a href="../../../reference/android/app/ListActivity.html#setListAdapter(android.widget.ListAdapter)">setListAdapter</a></code>(new <code><a href="../../../reference/android/widget/ArrayAdapter.html">ArrayAdapter</a></code>&lt;String&gt;(this, <strong>android.R.layout.simple_list_item_1</strong>, myarray));
</pre> 
 <p>In this example, <code><a href="../../../reference/android/R.layout.html#simple_list_item_1">simple_list_item_1</a></code> is a layout resource defined by the platform for items in a <code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>. You can use this instead of creating your own layout for list items. For more information, see the <a href="../../../guide/topics/ui/layout/listview.html">List View</a> developer guide.</p> 
</div> 
","ListView","android.widget.ListView","class",1
,"Animation Resources","Animation Resources","<p>An animation resource can define one of two types of animations:</p> 
 <dl> 
  <dt>
   <a href="#Property">Property Animation</a>
  </dt> 
  <dd>
   Creates an animation by modifying an object's property values over a set period of time with an 
   <code><a href="../../../reference/android/animation/Animator.html">Animator</a></code>.
  </dd> 
  <dt>
   <a href="#View">View Animation</a>
  </dt> 
  <dd> 
   <p>There are two types of animations that you can do with the view animation framework:</p> 
   <ul> 
    <li><a href="#Tween">Tween animation</a>: Creates an animation by performing a series of transformations on a single image with an <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code></li> 
    <li><a href="#Frame">Frame animation</a>: or creates an animation by showing a sequence of images in order with an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","Animator","android.animation.Animator","class",0
,"Animation Resources","Animation Resources","<p>An animation resource can define one of two types of animations:</p> 
 <dl> 
  <dt>
   <a href="#Property">Property Animation</a>
  </dt> 
  <dd>
   Creates an animation by modifying an object's property values over a set period of time with an 
   <code><a href="../../../reference/android/animation/Animator.html">Animator</a></code>.
  </dd> 
  <dt>
   <a href="#View">View Animation</a>
  </dt> 
  <dd> 
   <p>There are two types of animations that you can do with the view animation framework:</p> 
   <ul> 
    <li><a href="#Tween">Tween animation</a>: Creates an animation by performing a series of transformations on a single image with an <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code></li> 
    <li><a href="#Frame">Frame animation</a>: or creates an animation by showing a sequence of images in order with an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","Animation","android.view.animation.Animation","class",1
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Animation","android.view.animation.Animation","class",1
,"Animation Resources","Animation Resources","<p>An animation resource can define one of two types of animations:</p> 
 <dl> 
  <dt>
   <a href="#Property">Property Animation</a>
  </dt> 
  <dd>
   Creates an animation by modifying an object's property values over a set period of time with an 
   <code><a href="../../../reference/android/animation/Animator.html">Animator</a></code>.
  </dd> 
  <dt>
   <a href="#View">View Animation</a>
  </dt> 
  <dd> 
   <p>There are two types of animations that you can do with the view animation framework:</p> 
   <ul> 
    <li><a href="#Tween">Tween animation</a>: Creates an animation by performing a series of transformations on a single image with an <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code></li> 
    <li><a href="#Frame">Frame animation</a>: or creates an animation by showing a sequence of images in order with an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","AnimationDrawable","android.graphics.drawable.AnimationDrawable","class",1
,"View Animation","Frame animation","<h3 id="Frame">Frame animation</h3> 
 <p>An animation defined in XML that shows a sequence of images in order (like a film). </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable.<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#animation-list-element">animation-list</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:oneshot=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource_name</em>&quot;
        android:duration=&quot;<em>integer</em>&quot; /&gt;
&lt;/animation-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animation-list-element">
     <code>&lt;animation-list&gt;</code>
    </dt> 
    <dd>
     <strong>Required</strong>. This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:oneshot</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to perform the animation once; &quot;false&quot; to loop the animation.
      </dd> 
     </dl> 
    </dd> 
    <dt id="item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A single frame of animation. Must be a child of a 
     <code>&lt;animation-list&gt;</code> element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. The drawable to use for this frame.
      </dd> 
      <dt>
       <code>android:duration</code>
      </dt> 
      <dd>
       <em>Integer</em>. The duration to show this frame, in milliseconds.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <dl> 
    <dt>
     XML file saved at 
     <code>res/anim/rocket.xml</code>:
    </dt> 
    <dd> 
     <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:oneshot=&quot;false&quot;&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust1&quot; android:duration=&quot;200&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust2&quot; android:duration=&quot;200&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust3&quot; android:duration=&quot;200&quot; /&gt;
&lt;/animation-list&gt;
</pre> 
    </dd> 
    <dt>
     This application code will set the animation as the background for a View, then play the animation:
    </dt> 
    <dd> 
     <pre>
ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);
rocketImage.<code><a href="../../../reference/android/view/View.html#setBackgroundResource(int)">setBackgroundResource</a></code>(R.drawable.rocket_thrust);

rocketAnimation = (AnimationDrawable) rocketImage.<code><a href="../../../reference/android/view/View.html#getBackground()">getBackground()</a></code>;
rocketAnimation.<code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html#start()">start()</a></code>;
</pre> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#frame-animation">2D Graphics: Frame Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","AnimationDrawable","android.graphics.drawable.AnimationDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","AnimationDrawable","android.graphics.drawable.AnimationDrawable","class",0
,"Animation Resources","Property Animation","<h2 id="Property">Property Animation</h2> 
 <p>An animation defined in XML that modifies properties of the target object, such as background color or alpha value, over a set amount of time.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/animator/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>, 
   <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>, or 
   <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.animator.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]animator/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;<a href="#animator-set-element">set</a>
  android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;

    &lt;<a href="#obj-animator-element">objectAnimator</a>
        android:propertyName=&quot;<em>string</em>&quot;
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#val-animator-element">animator</a>
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#animator-set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either <code>&lt;set&gt;</code>, <code>&lt;objectAnimator&gt;</code>, or <code>&lt;valueAnimator&gt;</code>. You can group animation elements together inside the <code>&lt;set&gt;</code> element, including other <code>&lt;set&gt;</code> elements. </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animator-set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;objectAnimator&gt;</code>, 
     <code>&lt;valueAnimator&gt;</code>, or other 
     <code>&lt;set&gt;</code> elements). Represents an 
     <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>. 
     <p>You can specify nested <code>&lt;set&gt;</code> tags to further group animations together. Each <code>&lt;set&gt;</code> can define its own <code>ordering</code> attribute.</p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:ordering</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Specifies the play ordering of animations in this set. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>sequentially</code></td>
          <td>Play animations in this set sequentially</td>
         </tr> 
         <tr>
          <td><code>together</code> (default)</td>
          <td>Play animations in this set at the same time.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="obj-animator-element">
     <code>&lt;objectAnimator&gt;</code>
    </dt> 
    <dd>
     Animates a specific property of an object over a specific amount of time. Represents an 
     <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>.
     <p></p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:propertyName</code> 
      </dt> 
      <dd> 
       <em>String</em>. 
       <strong>Required</strong>. The object's property to animate, referenced by its name. For example you can specify 
       <code>&quot;alpha&quot;</code> or 
       <code>&quot;backgroundColor&quot;</code> for a View object. The 
       <code>objectAnimator</code> element does not expose a 
       <code>target</code> attribute, however, so you cannot set the object to animate in the XML declaration. You have to inflate your animation XML resource by calling 
       <code><a href="../../../reference/android/animation/AnimatorInflater.html#loadAnimator(android.content.Context, int)">loadAnimator()</a></code> and call 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#setTarget(java.lang.Object)">setTarget()</a></code> to set the target object that contains this property. 
      </dd> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animated property ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. The value where the animated property starts. If not specified, the animation starts at the value obtained by the property's get method. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300 milliseconds is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="val-animator-element">
     <code>&lt;animator&gt;</code>
    </dt> 
    <dd>
     Performs an animation over a specified amount of time. Represents a 
     <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation starts. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300ms is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ValueAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/animator/property_animator.xml</code>:
    <p></p> 
    <pre>
&lt;set android:ordering=&quot;sequentially&quot;&gt;
    &lt;set&gt;
        &lt;objectAnimator
            android:propertyName=&quot;x&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;400&quot;
            android:valueType=&quot;intType&quot;/&gt;
        &lt;objectAnimator
            android:propertyName=&quot;y&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;300&quot;
            android:valueType=&quot;intType&quot;/&gt;
    &lt;/set&gt;
    &lt;objectAnimator
        android:propertyName=&quot;alpha&quot;
        android:duration=&quot;500&quot;
        android:valueTo=&quot;1f&quot;/&gt;
&lt;/set&gt;
</pre> 
    <p>In order to run this animation, you must inflate the XML resources in your code to an <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> object, and then set the target objects for all of the animations before starting the animation set. Calling <code><a href="../../../reference/android/animation/AnimatorSet.html#setTarget(java.lang.Object)">setTarget()</a></code> sets a single target object for all children of the <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> as a convenience. The following code shows how to do this:</p> 
    <pre>
AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,
    R.anim.property_animator);
set.setTarget(myObject);
set.start();
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/prop-animation.html">Property Animation</a></li> 
    <li><a href="../../../resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html">API Demos</a> for examples on how to use the property animation system.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","AnimatorInflater","android.animation.AnimatorInflater","class",1
,"Animation Resources","Property Animation","<h2 id="Property">Property Animation</h2> 
 <p>An animation defined in XML that modifies properties of the target object, such as background color or alpha value, over a set amount of time.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/animator/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>, 
   <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>, or 
   <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.animator.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]animator/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;<a href="#animator-set-element">set</a>
  android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;

    &lt;<a href="#obj-animator-element">objectAnimator</a>
        android:propertyName=&quot;<em>string</em>&quot;
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#val-animator-element">animator</a>
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#animator-set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either <code>&lt;set&gt;</code>, <code>&lt;objectAnimator&gt;</code>, or <code>&lt;valueAnimator&gt;</code>. You can group animation elements together inside the <code>&lt;set&gt;</code> element, including other <code>&lt;set&gt;</code> elements. </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animator-set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;objectAnimator&gt;</code>, 
     <code>&lt;valueAnimator&gt;</code>, or other 
     <code>&lt;set&gt;</code> elements). Represents an 
     <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>. 
     <p>You can specify nested <code>&lt;set&gt;</code> tags to further group animations together. Each <code>&lt;set&gt;</code> can define its own <code>ordering</code> attribute.</p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:ordering</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Specifies the play ordering of animations in this set. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>sequentially</code></td>
          <td>Play animations in this set sequentially</td>
         </tr> 
         <tr>
          <td><code>together</code> (default)</td>
          <td>Play animations in this set at the same time.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="obj-animator-element">
     <code>&lt;objectAnimator&gt;</code>
    </dt> 
    <dd>
     Animates a specific property of an object over a specific amount of time. Represents an 
     <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>.
     <p></p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:propertyName</code> 
      </dt> 
      <dd> 
       <em>String</em>. 
       <strong>Required</strong>. The object's property to animate, referenced by its name. For example you can specify 
       <code>&quot;alpha&quot;</code> or 
       <code>&quot;backgroundColor&quot;</code> for a View object. The 
       <code>objectAnimator</code> element does not expose a 
       <code>target</code> attribute, however, so you cannot set the object to animate in the XML declaration. You have to inflate your animation XML resource by calling 
       <code><a href="../../../reference/android/animation/AnimatorInflater.html#loadAnimator(android.content.Context, int)">loadAnimator()</a></code> and call 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#setTarget(java.lang.Object)">setTarget()</a></code> to set the target object that contains this property. 
      </dd> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animated property ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. The value where the animated property starts. If not specified, the animation starts at the value obtained by the property's get method. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300 milliseconds is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="val-animator-element">
     <code>&lt;animator&gt;</code>
    </dt> 
    <dd>
     Performs an animation over a specified amount of time. Represents a 
     <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation starts. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300ms is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ValueAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/animator/property_animator.xml</code>:
    <p></p> 
    <pre>
&lt;set android:ordering=&quot;sequentially&quot;&gt;
    &lt;set&gt;
        &lt;objectAnimator
            android:propertyName=&quot;x&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;400&quot;
            android:valueType=&quot;intType&quot;/&gt;
        &lt;objectAnimator
            android:propertyName=&quot;y&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;300&quot;
            android:valueType=&quot;intType&quot;/&gt;
    &lt;/set&gt;
    &lt;objectAnimator
        android:propertyName=&quot;alpha&quot;
        android:duration=&quot;500&quot;
        android:valueTo=&quot;1f&quot;/&gt;
&lt;/set&gt;
</pre> 
    <p>In order to run this animation, you must inflate the XML resources in your code to an <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> object, and then set the target objects for all of the animations before starting the animation set. Calling <code><a href="../../../reference/android/animation/AnimatorSet.html#setTarget(java.lang.Object)">setTarget()</a></code> sets a single target object for all children of the <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> as a convenience. The following code shows how to do this:</p> 
    <pre>
AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,
    R.anim.property_animator);
set.setTarget(myObject);
set.start();
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/prop-animation.html">Property Animation</a></li> 
    <li><a href="../../../resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html">API Demos</a> for examples on how to use the property animation system.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","ObjectAnimator","android.animation.ObjectAnimator","class",0
,"Animation Resources","Property Animation","<h2 id="Property">Property Animation</h2> 
 <p>An animation defined in XML that modifies properties of the target object, such as background color or alpha value, over a set amount of time.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/animator/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>, 
   <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>, or 
   <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.animator.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]animator/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;<a href="#animator-set-element">set</a>
  android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;

    &lt;<a href="#obj-animator-element">objectAnimator</a>
        android:propertyName=&quot;<em>string</em>&quot;
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#val-animator-element">animator</a>
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#animator-set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either <code>&lt;set&gt;</code>, <code>&lt;objectAnimator&gt;</code>, or <code>&lt;valueAnimator&gt;</code>. You can group animation elements together inside the <code>&lt;set&gt;</code> element, including other <code>&lt;set&gt;</code> elements. </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animator-set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;objectAnimator&gt;</code>, 
     <code>&lt;valueAnimator&gt;</code>, or other 
     <code>&lt;set&gt;</code> elements). Represents an 
     <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>. 
     <p>You can specify nested <code>&lt;set&gt;</code> tags to further group animations together. Each <code>&lt;set&gt;</code> can define its own <code>ordering</code> attribute.</p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:ordering</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Specifies the play ordering of animations in this set. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>sequentially</code></td>
          <td>Play animations in this set sequentially</td>
         </tr> 
         <tr>
          <td><code>together</code> (default)</td>
          <td>Play animations in this set at the same time.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="obj-animator-element">
     <code>&lt;objectAnimator&gt;</code>
    </dt> 
    <dd>
     Animates a specific property of an object over a specific amount of time. Represents an 
     <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>.
     <p></p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:propertyName</code> 
      </dt> 
      <dd> 
       <em>String</em>. 
       <strong>Required</strong>. The object's property to animate, referenced by its name. For example you can specify 
       <code>&quot;alpha&quot;</code> or 
       <code>&quot;backgroundColor&quot;</code> for a View object. The 
       <code>objectAnimator</code> element does not expose a 
       <code>target</code> attribute, however, so you cannot set the object to animate in the XML declaration. You have to inflate your animation XML resource by calling 
       <code><a href="../../../reference/android/animation/AnimatorInflater.html#loadAnimator(android.content.Context, int)">loadAnimator()</a></code> and call 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#setTarget(java.lang.Object)">setTarget()</a></code> to set the target object that contains this property. 
      </dd> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animated property ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. The value where the animated property starts. If not specified, the animation starts at the value obtained by the property's get method. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300 milliseconds is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="val-animator-element">
     <code>&lt;animator&gt;</code>
    </dt> 
    <dd>
     Performs an animation over a specified amount of time. Represents a 
     <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation starts. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300ms is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ValueAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/animator/property_animator.xml</code>:
    <p></p> 
    <pre>
&lt;set android:ordering=&quot;sequentially&quot;&gt;
    &lt;set&gt;
        &lt;objectAnimator
            android:propertyName=&quot;x&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;400&quot;
            android:valueType=&quot;intType&quot;/&gt;
        &lt;objectAnimator
            android:propertyName=&quot;y&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;300&quot;
            android:valueType=&quot;intType&quot;/&gt;
    &lt;/set&gt;
    &lt;objectAnimator
        android:propertyName=&quot;alpha&quot;
        android:duration=&quot;500&quot;
        android:valueTo=&quot;1f&quot;/&gt;
&lt;/set&gt;
</pre> 
    <p>In order to run this animation, you must inflate the XML resources in your code to an <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> object, and then set the target objects for all of the animations before starting the animation set. Calling <code><a href="../../../reference/android/animation/AnimatorSet.html#setTarget(java.lang.Object)">setTarget()</a></code> sets a single target object for all children of the <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> as a convenience. The following code shows how to do this:</p> 
    <pre>
AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,
    R.anim.property_animator);
set.setTarget(myObject);
set.start();
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/prop-animation.html">Property Animation</a></li> 
    <li><a href="../../../resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html">API Demos</a> for examples on how to use the property animation system.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","AnimatorSet","android.animation.AnimatorSet","class",0
,"Animation Resources","Property Animation","<h2 id="Property">Property Animation</h2> 
 <p>An animation defined in XML that modifies properties of the target object, such as background color or alpha value, over a set amount of time.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/animator/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>, 
   <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>, or 
   <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.animator.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]animator/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;<a href="#animator-set-element">set</a>
  android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;

    &lt;<a href="#obj-animator-element">objectAnimator</a>
        android:propertyName=&quot;<em>string</em>&quot;
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#val-animator-element">animator</a>
        android:duration=&quot;<em>int</em>&quot;
        android:valueFrom=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:valueTo=&quot;<em>float</em> | <em>int</em> | <em>color</em>&quot;
        android:startOffset=&quot;<em>int</em>&quot;
        android:repeatCount=&quot;<em>int</em>&quot;
        android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]
        android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]/&gt;

    &lt;<a href="#animator-set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either <code>&lt;set&gt;</code>, <code>&lt;objectAnimator&gt;</code>, or <code>&lt;valueAnimator&gt;</code>. You can group animation elements together inside the <code>&lt;set&gt;</code> element, including other <code>&lt;set&gt;</code> elements. </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animator-set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;objectAnimator&gt;</code>, 
     <code>&lt;valueAnimator&gt;</code>, or other 
     <code>&lt;set&gt;</code> elements). Represents an 
     <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code>. 
     <p>You can specify nested <code>&lt;set&gt;</code> tags to further group animations together. Each <code>&lt;set&gt;</code> can define its own <code>ordering</code> attribute.</p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:ordering</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Specifies the play ordering of animations in this set. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>sequentially</code></td>
          <td>Play animations in this set sequentially</td>
         </tr> 
         <tr>
          <td><code>together</code> (default)</td>
          <td>Play animations in this set at the same time.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="obj-animator-element">
     <code>&lt;objectAnimator&gt;</code>
    </dt> 
    <dd>
     Animates a specific property of an object over a specific amount of time. Represents an 
     <code><a href="../../../reference/android/animation/ObjectAnimator.html">ObjectAnimator</a></code>.
     <p></p> 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:propertyName</code> 
      </dt> 
      <dd> 
       <em>String</em>. 
       <strong>Required</strong>. The object's property to animate, referenced by its name. For example you can specify 
       <code>&quot;alpha&quot;</code> or 
       <code>&quot;backgroundColor&quot;</code> for a View object. The 
       <code>objectAnimator</code> element does not expose a 
       <code>target</code> attribute, however, so you cannot set the object to animate in the XML declaration. You have to inflate your animation XML resource by calling 
       <code><a href="../../../reference/android/animation/AnimatorInflater.html#loadAnimator(android.content.Context, int)">loadAnimator()</a></code> and call 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#setTarget(java.lang.Object)">setTarget()</a></code> to set the target object that contains this property. 
      </dd> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animated property ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. The value where the animated property starts. If not specified, the animation starts at the value obtained by the property's get method. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300 milliseconds is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ObjectAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
    <dt id="val-animator-element">
     <code>&lt;animator&gt;</code>
    </dt> 
    <dd>
     Performs an animation over a specified amount of time. Represents a 
     <code><a href="../../../reference/android/animation/ValueAnimator.html">ValueAnimator</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt> 
       <code>android:valueTo</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation ends. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:valueFrom</code> 
      </dt> 
      <dd> 
       <em>float, int, or color</em>. 
       <strong>Required</strong>. The value where the animation starts. Colors are represented as six digit hexadecimal numbers (for example, #333333). 
      </dd> 
      <dt> 
       <code>android:duration</code> 
      </dt> 
      <dd> 
       <em>int</em>. The time in milliseconds of the animation. 300ms is the default. 
      </dd> 
      <dt> 
       <code>android:startOffset</code> 
      </dt> 
      <dd> 
       <em>int</em>. The amount of milliseconds the animation delays after 
       <code><a href="../../../reference/android/animation/ValueAnimator.html#start()">start()</a></code> is called. 
      </dd> 
      <dt> 
       <code>android:repeatCount</code> 
      </dt> 
      <dd> 
       <em>int</em>. How many times to repeat an animation. Set to 
       <code>&quot;-1&quot;</code> to infinitely repeat or to a positive integer. For example, a value of 
       <code>&quot;1&quot;</code> means that the animation is repeated once after the initial run of the animation, so the animation plays a total of two times. The default value is 
       <code>&quot;0&quot;</code>, which means no repetition. 
      </dd> 
      <dt> 
       <code>android:repeatMode</code> 
      </dt> 
      <dd> 
       <em>int</em>. How an animation behaves when it reaches the end of the animation. 
       <code>android:repeatCount</code> must be set to a positive integer or 
       <code>&quot;-1&quot;</code> for this attribute to have an effect. Set to 
       <code>&quot;reverse&quot;</code> to have the animation reverse direction with each iteration or 
       <code>&quot;repeat&quot;</code> to have the animation loop from the beginning each time. 
      </dd> 
      <dt> 
       <code>android:valueType</code> 
      </dt> 
      <dd> 
       <em>Keyword</em>. Do not specify this attribute if the value is a color. The animation framework automatically handles color values. 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>intType</code></td>
          <td>Specifies that the animated values are integers</td>
         </tr> 
         <tr>
          <td><code>floatType</code> (default)</td>
          <td>Specifies that the animated values are floats</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/animator/property_animator.xml</code>:
    <p></p> 
    <pre>
&lt;set android:ordering=&quot;sequentially&quot;&gt;
    &lt;set&gt;
        &lt;objectAnimator
            android:propertyName=&quot;x&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;400&quot;
            android:valueType=&quot;intType&quot;/&gt;
        &lt;objectAnimator
            android:propertyName=&quot;y&quot;
            android:duration=&quot;500&quot;
            android:valueTo=&quot;300&quot;
            android:valueType=&quot;intType&quot;/&gt;
    &lt;/set&gt;
    &lt;objectAnimator
        android:propertyName=&quot;alpha&quot;
        android:duration=&quot;500&quot;
        android:valueTo=&quot;1f&quot;/&gt;
&lt;/set&gt;
</pre> 
    <p>In order to run this animation, you must inflate the XML resources in your code to an <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> object, and then set the target objects for all of the animations before starting the animation set. Calling <code><a href="../../../reference/android/animation/AnimatorSet.html#setTarget(java.lang.Object)">setTarget()</a></code> sets a single target object for all children of the <code><a href="../../../reference/android/animation/AnimatorSet.html">AnimatorSet</a></code> as a convenience. The following code shows how to do this:</p> 
    <pre>
AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,
    R.anim.property_animator);
set.setTarget(myObject);
set.start();
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/prop-animation.html">Property Animation</a></li> 
    <li><a href="../../../resources/samples/ApiDemos/src/com/example/android/apis/animation/index.html">API Demos</a> for examples on how to use the property animation system.</li> 
   </ul> 
  </dd> 
 </dl> 
 ","ValueAnimator","android.animation.ValueAnimator","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","AnimationUtils","android.view.animation.AnimationUtils","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","ScaleAnimation","android.view.animation.ScaleAnimation","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Interpolator","android.view.animation.Interpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","Interpolator","android.view.animation.Interpolator","class",1
,"Tween animation","Custom interpolators","<h4>Custom interpolators</h4> 
 <p>If you're not satisfied with the interpolators provided by the platform (listed in the table above), you can create a custom interpolator resource with modified attributes. For example, you can adjust the rate of acceleration for the <code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code>, or adjust the number of cycles for the <code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code>. In order to do so, you need to create your own interpolator resource in an XML file. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to the corresponding interpolator object.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<em>InterpolatorName</em> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:<em>attribute_name</em>=&quot;<em>value</em>&quot;
    /&gt;
</pre> 
   <p>If you don't apply any attributes, then your interpolator will function exactly the same as those provided by the platform (listed in the table above).</p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd>
   Notice that each 
   <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> implementation, when defined in XML, begins its name in lowercase.
   <p></p> 
   <dl class="tag-list"> 
    <dt>
     <code>&lt;accelerateDecelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts and ends slowly but accelerates through the middle. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;accelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out slowly, then accelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The acceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward then flings forward. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateOvershootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward, flings forward and overshoots the target value, then settles at the final value. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
      <dt>
       <code>android:extraTension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount by which to multiply the tension (default is 1.5).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;bounceInterpolator&gt;</code>
    </dt> 
    <dd>
     The change bounces at the end. 
     <p>No attributes</p>
    </dd> 
    <dt>
     <code>&lt;cycleInterpolator&gt;</code>
    </dt> 
    <dd>
     Repeats the animation for a specified number of cycles. The rate of change follows a sinusoidal pattern. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:cycles</code>
      </dt> 
      <dd>
       <em>Integer</em>. The number of cycles (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;decelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out quickly, then decelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The deceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;linearInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change is constant. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;overshootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change flings forward and overshoots the last value, then comes back. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd>
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/anim/my_overshoot_interpolator.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;overshootInterpolator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:tension=&quot;7.0&quot;
    /&gt;
</pre> 
   <p>This animation XML will apply the interpolator:</p> 
   <pre>
&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@anim/my_overshoot_interpolator&quot;
    android:fromXScale=&quot;1.0&quot;
    android:toXScale=&quot;3.0&quot;
    android:fromYScale=&quot;1.0&quot;
    android:toYScale=&quot;3.0&quot;
    android:pivotX=&quot;50%&quot;
    android:pivotY=&quot;50%&quot;
    android:duration=&quot;700&quot; /&gt;
</pre> 
  </dd> 
 </dl> 
 ","Interpolator","android.view.animation.Interpolator","class",1
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","TranslateAnimation","android.view.animation.TranslateAnimation","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","AnimationSet","android.view.animation.AnimationSet","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","View","android.view.View","class",0
,"View Animation","Frame animation","<h3 id="Frame">Frame animation</h3> 
 <p>An animation defined in XML that shows a sequence of images in order (like a film). </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable.<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#animation-list-element">animation-list</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:oneshot=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource_name</em>&quot;
        android:duration=&quot;<em>integer</em>&quot; /&gt;
&lt;/animation-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="animation-list-element">
     <code>&lt;animation-list&gt;</code>
    </dt> 
    <dd>
     <strong>Required</strong>. This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:oneshot</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to perform the animation once; &quot;false&quot; to loop the animation.
      </dd> 
     </dl> 
    </dd> 
    <dt id="item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A single frame of animation. Must be a child of a 
     <code>&lt;animation-list&gt;</code> element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. The drawable to use for this frame.
      </dd> 
      <dt>
       <code>android:duration</code>
      </dt> 
      <dd>
       <em>Integer</em>. The duration to show this frame, in milliseconds.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <dl> 
    <dt>
     XML file saved at 
     <code>res/anim/rocket.xml</code>:
    </dt> 
    <dd> 
     <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:oneshot=&quot;false&quot;&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust1&quot; android:duration=&quot;200&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust2&quot; android:duration=&quot;200&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/rocket_thrust3&quot; android:duration=&quot;200&quot; /&gt;
&lt;/animation-list&gt;
</pre> 
    </dd> 
    <dt>
     This application code will set the animation as the background for a View, then play the animation:
    </dt> 
    <dd> 
     <pre>
ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);
rocketImage.<code><a href="../../../reference/android/view/View.html#setBackgroundResource(int)">setBackgroundResource</a></code>(R.drawable.rocket_thrust);

rocketAnimation = (AnimationDrawable) rocketImage.<code><a href="../../../reference/android/view/View.html#getBackground()">getBackground()</a></code>;
rocketAnimation.<code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html#start()">start()</a></code>;
</pre> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#frame-animation">2D Graphics: Frame Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","View","android.view.View","class",0
,"Drawable Resources","Layer List","<h2 id="LayerList">Layer List</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code> is a drawable object that manages an array of other drawables. Each drawable in the list is drawn in the order of the list¡ªthe last drawable in the list is drawn on top.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;layer-list&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#layerlist-element">layer-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#layerlist-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/layer-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="layerlist-element">
     <code>&lt;layer-list&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="layerlist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to place in the layer drawable, in a position defined by its attributes. Must be a child of a 
     <code>&lt;selector&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
     <p>All drawable items are scaled to fit the size of the containing View, by default. Thus, placing your images in a layer list at different positions might increase the size of the View and some images scale as appropriate. To avoid scaling items in the list, use a <code>&lt;bitmap&gt;</code> element inside the <code>&lt;item&gt;</code> element to specify the drawable and define the gravity to something that does not scale, such as <code>&quot;center&quot;</code>. For example, the following <code>&lt;item&gt;</code> defines an item that scales to fit its container View:</p> 
     <pre>
&lt;item android:drawable=&quot;@drawable/image&quot; /&gt;
</pre> 
     <p>To avoid scaling, the following example uses a <code>&lt;bitmap&gt;</code> element with centered gravity:</p> 
     <pre>
&lt;item&gt;
  &lt;bitmap android:src=&quot;<b>@drawable/image</b>&quot;
          android:gravity=&quot;center&quot; /&gt;
&lt;/item&gt;
</pre> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/layers.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item&gt;
      &lt;bitmap android:src=&quot;@drawable/android_red&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;10dp&quot; android:left=&quot;10dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_green&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;20dp&quot; android:left=&quot;20dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_blue&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
&lt;/layer-list&gt;
</pre> 
   <p>Notice that this example uses a nested <code>&lt;bitmap&gt;</code> element to define the drawable resource for each item with a &quot;center&quot; gravity. This ensures that none of the images are scaled to fit the size of the container, due to resizing caused by the offset images.</p> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/layers&quot; /&gt;
</pre> 
   <p>The result is a stack of increasingly offset images:</p> 
   <img src="../../../images/resources/layers.png" alt="" /> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","View","android.view.View","class",0
,"Drawable Resources","Level List","<h2 id="LevelList">Level List</h2> 
 <p>A Drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the drawable with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> loads the drawable resource in the level list that has a <code>android:maxLevel</code> value greater than or equal to the value passed to the method.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#levellist-element">level-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#levellist-item-element">item</a>
        android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
        android:maxLevel=&quot;<i>integer</i>&quot;
        android:minLevel=&quot;<i>integer</i>&quot; /&gt;
&lt;/level-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="levellist-element">
     <code>&lt;level-list&gt;</code>
    </dt> 
    <dd>
     This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="levellist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use at a certain level. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be inset.
      </dd> 
      <dt>
       <code>android:maxLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The maximum level allowed for this item.
      </dd> 
      <dt>
       <code>android:minLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The minimum level allowed for this item.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;item
        android:drawable=&quot;@drawable/status_off&quot;
        android:maxLevel=&quot;0&quot; /&gt;
    &lt;item
        android:drawable=&quot;@drawable/status_on&quot;
        android:maxLevel=&quot;1&quot; /&gt;
&lt;/level-list&gt;
</pre> 
   <p>Once this is applied to a <code><a href="../../../reference/android/view/View.html">View</a></code>, the level can be changed with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> or <code><a href="../../../reference/android/widget/ImageView.html#setImageLevel(int)">setImageLevel()</a></code>.</p> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","View","android.view.View","class",0
,"Drawable Resources","Transition Drawable","<h2 id="Transition">Transition Drawable</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code> is a drawable object that can cross-fade between the two drawable resources.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;transition&gt;</code> element. No more than two items are supported. To transition forward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#startTransition(int)">startTransition()</a></code>. To transition backward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#reverseTransition(int)">reverseTransition()</a></code>.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#transition-element">transition</a>
xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#transition-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/transition&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="transition-element">
     <code>&lt;transition&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="transition-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use as part of the drawable transition. Must be a child of a 
     <code>&lt;transition&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/transition.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;transition xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:drawable=&quot;@drawable/on&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/off&quot; /&gt;
&lt;/transition&gt;
</pre> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageButton
    android:id=&quot;@+id/button&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/transition&quot; /&gt;
</pre> 
   <p>And the following code performs a 500ms transition from the first item to the second:</p> 
   <pre>
ImageButton button = (ImageButton) findViewById(R.id.button);
TransitionDrawable drawable = (TransitionDrawable) button.getDrawable();
drawable.startTransition(500);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","View","android.view.View","class",0
,"More Resource Types","ID","<h2 id="Id">ID</h2> 
 <p>A unique resource ID defined in XML. Using the name you provide in the <code>&lt;item&gt;</code> element, the Android developer tools create a unique integer in your project's <code>R.java</code> class, which you can use as an identifier for an application resources (for example, a <code><a href="../../../reference/android/view/View.html">View</a></code> in your UI layout) or a unique integer for use in your application code (for example, as an ID for a dialog or a result code).</p> 
 <p class="note"><strong>Note:</strong> An ID is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine ID resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element. Also, remember that an ID resources does not reference an actual resource item; it is simply a unique ID that you can attach to other resources or use as a unique integer in your application.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename.xml</em></code>
   <br /> The filename is arbitrary.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.id.<em>name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]id/<em>name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#id-resources-element">resources</a>&gt;
    &lt;<a href="#id-item-element">item</a>
        type=&quot;id&quot;
        name=&quot;<em>id_name</em>&quot; /&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="id-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="id-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a unique ID. Takes no value, only attributes. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>type</code>
      </dt> 
      <dd>
       Must be &quot;id&quot;.
      </dd> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A unique name for the ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/values/ids.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;item type=&quot;id&quot; name=&quot;button_ok&quot; /&gt;
    &lt;item type=&quot;id&quot; name=&quot;dialog_exit&quot; /&gt;
&lt;/resources&gt;
</pre> 
   <p>Then, this layout snippet uses the &quot;button_ok&quot; ID for a Button widget:</p> 
   <pre>
&lt;Button android:id=&quot;<b>@id/button_ok</b>&quot;
    style=&quot;@style/button_style&quot; /&gt;
</pre> 
   <p>Notice that the <code>android:id</code> value does not include the plus sign in the ID reference, because the ID already exists, as defined in the <code>ids.xml</code> example above. (When you specify an ID to an XML resource using the plus sign¡ªin the format <code>android:id=&quot;@+id/name&quot;</code>¡ªit means that the &quot;name&quot; ID does not exist and should be created.)</p> 
   <p>As another example, the following code snippet uses the &quot;dialog_exit&quot; ID as a unique identifier for a dialog:</p> 
   <pre>
<code><a href="../../../reference/android/app/Activity.html#showDialog(int)">showDialog</a></code>(<b>R.id.dialog_exit</b>);
</pre> 
   <p>In the same application, the &quot;dialog_exit&quot; ID is compared when creating a dialog:</p> 
   <pre>
protected Dialog <code><a href="../../../reference/android/app/Activity.html#onCreateDialog(int)">onCreateDialog(int)</a></code>(int id) {
    Dialog dialog;
    switch(id) {
    case <b>R.id.dialog_exit</b>:
        ...
        break;
    default:
        dialog = null;
    }
    return dialog;
}
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","View","android.view.View","class",0
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","View","android.view.View","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","AlphaAnimation","android.view.animation.AlphaAnimation","class",0
,"View Animation","Tween animation","<h3 id="Tween">Tween animation</h3> 
 <p>An animation defined in XML that performs transitions such as rotating, fading, moving, and stretching on a graphic. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an 
   <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.anim.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#set-element">set</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@[package:]anim/<em>interpolator_resource</em>&quot;
    android:shareInterpolator=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#alpha-element">alpha</a>
        android:fromAlpha=&quot;<em>float</em>&quot;
        android:toAlpha=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#scale-element">scale</a>
        android:fromXScale=&quot;<em>float</em>&quot;
        android:toXScale=&quot;<em>float</em>&quot;
        android:fromYScale=&quot;<em>float</em>&quot;
        android:toYScale=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#translate-element">translate</a>
        android:fromXDelta=&quot;<em>float</em>&quot;
        android:toXDelta=&quot;<em>float</em>&quot;
        android:fromYDelta=&quot;<em>float</em>&quot;
        android:toYDelta=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#rotate-element">rotate</a>
        android:fromDegrees=&quot;<em>float</em>&quot;
        android:toDegrees=&quot;<em>float</em>&quot;
        android:pivotX=&quot;<em>float</em>&quot;
        android:pivotY=&quot;<em>float</em>&quot; /&gt;
    &lt;<a href="#set-element">set</a>&gt;
        ...
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
   <p>The file must have a single root element: either an <code>&lt;alpha&gt;</code>, <code>&lt;scale&gt;</code>, <code>&lt;translate&gt;</code>, <code>&lt;rotate&gt;</code>, or <code>&lt;set&gt;</code> element that holds a group (or groups) of other animation elements (even nested <code>&lt;set&gt;</code> elements). </p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="set-element">
     <code>&lt;set&gt;</code>
    </dt> 
    <dd>
     A container that holds other animation elements (
     <code>&lt;alpha&gt;</code>, 
     <code>&lt;scale&gt;</code>, 
     <code>&lt;translate&gt;</code>, 
     <code>&lt;rotate&gt;</code>) or other 
     <code>&lt;set&gt;</code> elements. Represents an 
     <code><a href="../../../reference/android/view/animation/AnimationSet.html">AnimationSet</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:interpolator</code>
      </dt> 
      <dd>
       <em>Interpolator resource</em>. An 
       <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> to apply on the animation. The value must be a reference to a resource that specifies an interpolator (not an interpolator class name). There are default interpolator resources available from the platform or you can create your own interpolator resource. See the discussion below for more about 
       <a href="#Interpolators">Interpolators</a>.
      </dd> 
      <dt>
       <code>android:shareInterpolator</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if you want to share the same interpolator among all child elements.
      </dd> 
     </dl> 
    </dd> 
    <dt id="alpha-element">
     <code>&lt;alpha&gt;</code>
    </dt> 
    <dd>
     A fade-in or fade-out animation. Represents an 
     <code><a href="../../../reference/android/view/animation/AlphaAnimation.html">AlphaAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
      <dt>
       <code>android:toAlpha</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending opacity offset, where 0.0 is transparent and 1.0 is opaque.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;alpha&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     A resizing animation. You can specify the center point of the image from which it grows outward (or inward) by specifying 
     <code>pivotX</code> and 
     <code>pivotY</code>. For example, if these values are 0, 0 (top-left corner), all growth will be down and to the right. Represents a 
     <code><a href="../../../reference/android/view/animation/ScaleAnimation.html">ScaleAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toXScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending X size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:fromYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:toYScale</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending Y size offset, where 1.0 is no change.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float</em>. The X coordinate to remain fixed when the object is scaled.
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float</em>. The Y coordinate to remain fixed when the object is scaled.
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;scale&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="translate-element">
     <code>&lt;translate&gt;</code>
    </dt> 
    <dd>
     A vertical and/or horizontal motion. Supports the following attributes in any of the following three formats: values from -100 to 100 ending with &quot;%&quot;, indicating a percentage relative to itself; values from -100 to 100 ending in &quot;%p&quot;, indicating a percentage relative to its parent; a float value with no suffix, indicating an absolute value. Represents a 
     <code><a href="../../../reference/android/view/animation/TranslateAnimation.html">TranslateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toXDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending X offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element width (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent width (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:fromYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Starting Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:toYDelta</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. Ending Y offset. Expressed either: in pixels relative to the normal position (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the element height (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent height (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;translate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
    <dt id="rotate-element">
     <code>&lt;rotate&gt;</code>
    </dt> 
    <dd>
     A rotation animation. Represents a 
     <code><a href="../../../reference/android/view/animation/RotateAnimation.html">RotateAnimation</a></code>. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:fromDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Starting angular position, in degrees.
      </dd> 
      <dt>
       <code>android:toDegrees</code>
      </dt> 
      <dd>
       <em>Float</em>. Ending angular position, in degrees.
      </dd> 
      <dt>
       <code>android:pivotX</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The X coordinate of the center of rotation. Expressed either: in pixels relative to the object's left edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's left edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's left edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
      <dt>
       <code>android:pivotY</code>
      </dt> 
      <dd>
       <em>Float or percentage</em>. The Y coordinate of the center of rotation. Expressed either: in pixels relative to the object's top edge (such as 
       <code>&quot;5&quot;</code>), in percentage relative to the object's top edge (such as 
       <code>&quot;5%&quot;</code>), or in percentage relative to the parent container's top edge (such as 
       <code>&quot;5%p&quot;</code>).
      </dd> 
     </dl> 
     <p>For more attributes supported by <code>&lt;rotate&gt;</code>, see the <code><a href="../../../reference/android/view/animation/Animation.html">Animation</a></code> class reference (of which, all XML attributes are inherrited by this element).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pp>
    XML file saved at 
    <code>res/anim/hyperspace_jump.xml</code>:
    <p></p> 
    <pre>
&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shareInterpolator=&quot;false&quot;&gt;
    &lt;scale
        android:interpolator=&quot;@android:anim/accelerate_decelerate_interpolator&quot;
        android:fromXScale=&quot;1.0&quot;
        android:toXScale=&quot;1.4&quot;
        android:fromYScale=&quot;1.0&quot;
        android:toYScale=&quot;0.6&quot;
        android:pivotX=&quot;50%&quot;
        android:pivotY=&quot;50%&quot;
        android:fillAfter=&quot;false&quot;
        android:duration=&quot;700&quot; /&gt;
    &lt;set
        android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;
        android:startOffset=&quot;700&quot;&gt;
        &lt;scale
            android:fromXScale=&quot;1.4&quot;
            android:toXScale=&quot;0.0&quot;
            android:fromYScale=&quot;0.6&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
        &lt;rotate
            android:fromDegrees=&quot;0&quot;
            android:toDegrees=&quot;-45&quot;
            android:toYScale=&quot;0.0&quot;
            android:pivotX=&quot;50%&quot;
            android:pivotY=&quot;50%&quot;
            android:duration=&quot;400&quot; /&gt;
    &lt;/set&gt;
&lt;/set&gt;
</pre> 
    <p>This application code will apply the animation to an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code> and start the animation:</p> 
    <pre>
ImageView image = (ImageView) findViewById(R.id.image);
Animation hyperspaceJump = AnimationUtils.<code><a href="../../../reference/android/view/animation/AnimationUtils.html#loadAnimation(android.content.Context, int)">loadAnimation</a></code>(this, R.anim.hyperspace_jump);
image.<code><a href="../../../reference/android/view/View.html#startAnimation(android.view.animation.Animation)">startAnimation</a></code>(hyperspaceJump);
</pre> 
   </pp>
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/view-animation.html#tween-animation">2D Graphics: Tween Animation</a></li> 
   </ul> 
  </dd> 
 </dl> 
 ","RotateAnimation","android.view.animation.RotateAnimation","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","AccelerateDecelerateInterpolator","android.view.animation.AccelerateDecelerateInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","AnticipateInterpolator","android.view.animation.AnticipateInterpolator","class",0
,"Tween animation","Custom interpolators","<h4>Custom interpolators</h4> 
 <p>If you're not satisfied with the interpolators provided by the platform (listed in the table above), you can create a custom interpolator resource with modified attributes. For example, you can adjust the rate of acceleration for the <code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code>, or adjust the number of cycles for the <code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code>. In order to do so, you need to create your own interpolator resource in an XML file. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to the corresponding interpolator object.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<em>InterpolatorName</em> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:<em>attribute_name</em>=&quot;<em>value</em>&quot;
    /&gt;
</pre> 
   <p>If you don't apply any attributes, then your interpolator will function exactly the same as those provided by the platform (listed in the table above).</p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd>
   Notice that each 
   <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> implementation, when defined in XML, begins its name in lowercase.
   <p></p> 
   <dl class="tag-list"> 
    <dt>
     <code>&lt;accelerateDecelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts and ends slowly but accelerates through the middle. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;accelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out slowly, then accelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The acceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward then flings forward. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateOvershootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward, flings forward and overshoots the target value, then settles at the final value. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
      <dt>
       <code>android:extraTension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount by which to multiply the tension (default is 1.5).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;bounceInterpolator&gt;</code>
    </dt> 
    <dd>
     The change bounces at the end. 
     <p>No attributes</p>
    </dd> 
    <dt>
     <code>&lt;cycleInterpolator&gt;</code>
    </dt> 
    <dd>
     Repeats the animation for a specified number of cycles. The rate of change follows a sinusoidal pattern. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:cycles</code>
      </dt> 
      <dd>
       <em>Integer</em>. The number of cycles (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;decelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out quickly, then decelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The deceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;linearInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change is constant. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;overshootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change flings forward and overshoots the last value, then comes back. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd>
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/anim/my_overshoot_interpolator.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;overshootInterpolator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:tension=&quot;7.0&quot;
    /&gt;
</pre> 
   <p>This animation XML will apply the interpolator:</p> 
   <pre>
&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@anim/my_overshoot_interpolator&quot;
    android:fromXScale=&quot;1.0&quot;
    android:toXScale=&quot;3.0&quot;
    android:fromYScale=&quot;1.0&quot;
    android:toYScale=&quot;3.0&quot;
    android:pivotX=&quot;50%&quot;
    android:pivotY=&quot;50%&quot;
    android:duration=&quot;700&quot; /&gt;
</pre> 
  </dd> 
 </dl> 
 ","AnticipateInterpolator","android.view.animation.AnticipateInterpolator","class",1
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","BounceInterpolator","android.view.animation.BounceInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","AnticipateOvershootInterpolator","android.view.animation.AnticipateOvershootInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","OvershootInterpolator","android.view.animation.OvershootInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","LinearInterpolator","android.view.animation.LinearInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","DecelerateInterpolator","android.view.animation.DecelerateInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","AccelerateInterpolator","android.view.animation.AccelerateInterpolator","class",0
,"Tween animation","Interpolators","<h4 id="Interpolators">Interpolators</h4> 
 <p>An interpolator is an animation modifier defined in XML that affects the rate of change in an animation. This allows your existing animation effects to be accelerated, decelerated, repeated, bounced, etc.</p> 
 <p>An interpolator is applied to an animation element with the <code>android:interpolator</code> attribute, the value of which is a reference to an interpolator resource.</p> 
 <p>All interpolators available in Android are subclasses of the <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> class. For each interpolator class, Android includes a public resource you can reference in order to apply the interpolator to an animation using the <code>android:interpolator</code> attribute. The following table specifies the resource to use for each interpolator:</p> 
 <table> 
  <tbody>
   <tr>
    <th>Interpolator class</th>
    <th>Resource ID</th>
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateDecelerateInterpolator.html">AccelerateDecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AccelerateInterpolator.html">AccelerateInterpolator</a></code></td> 
    <td><code>@android:anim/accelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/AnticipateOvershootInterpolator.html">AnticipateOvershootInterpolator</a></code></td> 
    <td><code>@android:anim/anticipate_overshoot_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/BounceInterpolator.html">BounceInterpolator</a></code></td> 
    <td><code>@android:anim/bounce_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code></td> 
    <td><code>@android:anim/cycle_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/DecelerateInterpolator.html">DecelerateInterpolator</a></code></td> 
    <td><code>@android:anim/decelerate_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/LinearInterpolator.html">LinearInterpolator</a></code></td> 
    <td><code>@android:anim/linear_interpolator</code></td> 
   </tr> 
   <tr> 
    <td><code><a href="../../../reference/android/view/animation/OvershootInterpolator.html">OvershootInterpolator</a></code></td> 
    <td><code>@android:anim/overshoot_interpolator</code></td> 
   </tr> 
  </tbody>
 </table> 
 <p>Here's how you can apply one of these with the <code>android:interpolator</code> attribute:</p> 
 <pre>
&lt;set android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;&gt;
    ...
&lt;/set&gt;
</pre> 
 ","CycleInterpolator","android.view.animation.CycleInterpolator","class",0
,"Tween animation","Custom interpolators","<h4>Custom interpolators</h4> 
 <p>If you're not satisfied with the interpolators provided by the platform (listed in the table above), you can create a custom interpolator resource with modified attributes. For example, you can adjust the rate of acceleration for the <code><a href="../../../reference/android/view/animation/AnticipateInterpolator.html">AnticipateInterpolator</a></code>, or adjust the number of cycles for the <code><a href="../../../reference/android/view/animation/CycleInterpolator.html">CycleInterpolator</a></code>. In order to do so, you need to create your own interpolator resource in an XML file. </p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/anim/<em>filename</em>.xml</code>
   <br /> The filename will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to the corresponding interpolator object.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In XML: 
   <code>@[<em>package</em>:]anim/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<em>InterpolatorName</em> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:<em>attribute_name</em>=&quot;<em>value</em>&quot;
    /&gt;
</pre> 
   <p>If you don't apply any attributes, then your interpolator will function exactly the same as those provided by the platform (listed in the table above).</p> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd>
   Notice that each 
   <code><a href="../../../reference/android/view/animation/Interpolator.html">Interpolator</a></code> implementation, when defined in XML, begins its name in lowercase.
   <p></p> 
   <dl class="tag-list"> 
    <dt>
     <code>&lt;accelerateDecelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts and ends slowly but accelerates through the middle. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;accelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out slowly, then accelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The acceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward then flings forward. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;anticipateOvershootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change starts backward, flings forward and overshoots the target value, then settles at the final value. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
      <dt>
       <code>android:extraTension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount by which to multiply the tension (default is 1.5).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;bounceInterpolator&gt;</code>
    </dt> 
    <dd>
     The change bounces at the end. 
     <p>No attributes</p>
    </dd> 
    <dt>
     <code>&lt;cycleInterpolator&gt;</code>
    </dt> 
    <dd>
     Repeats the animation for a specified number of cycles. The rate of change follows a sinusoidal pattern. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:cycles</code>
      </dt> 
      <dd>
       <em>Integer</em>. The number of cycles (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;decelerateInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change starts out quickly, then decelerates. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:factor</code>
      </dt> 
      <dd>
       <em>Float</em>. The deceleration rate (default is 1).
      </dd> 
     </dl> 
    </dd> 
    <dt>
     <code>&lt;linearInterpolator&gt;</code>
    </dt> 
    <dd>
     The rate of change is constant. 
     <p>No attributes.</p>
    </dd> 
    <dt>
     <code>&lt;overshootInterpolator&gt;</code>
    </dt> 
    <dd>
     The change flings forward and overshoots the last value, then comes back. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:tension</code>
      </dt> 
      <dd>
       <em>Float</em>. The amount of tension to apply (default is 2).
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd>
  <dt>
   example:
  </dt> 
  <dd> 
   <p>XML file saved at <code>res/anim/my_overshoot_interpolator.xml</code>:</p> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;overshootInterpolator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:tension=&quot;7.0&quot;
    /&gt;
</pre> 
   <p>This animation XML will apply the interpolator:</p> 
   <pre>
&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:interpolator=&quot;@anim/my_overshoot_interpolator&quot;
    android:fromXScale=&quot;1.0&quot;
    android:toXScale=&quot;3.0&quot;
    android:fromYScale=&quot;1.0&quot;
    android:toYScale=&quot;3.0&quot;
    android:pivotX=&quot;50%&quot;
    android:pivotY=&quot;50%&quot;
    android:duration=&quot;700&quot; /&gt;
</pre> 
  </dd> 
 </dl> 
 ","CycleInterpolator","android.view.animation.CycleInterpolator","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","TransitionDrawable","android.graphics.drawable.TransitionDrawable","class",0
,"Drawable Resources","Transition Drawable","<h2 id="Transition">Transition Drawable</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code> is a drawable object that can cross-fade between the two drawable resources.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;transition&gt;</code> element. No more than two items are supported. To transition forward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#startTransition(int)">startTransition()</a></code>. To transition backward, call <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html#reverseTransition(int)">reverseTransition()</a></code>.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#transition-element">transition</a>
xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#transition-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/transition&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="transition-element">
     <code>&lt;transition&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="transition-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use as part of the drawable transition. Must be a child of a 
     <code>&lt;transition&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/transition.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;transition xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:drawable=&quot;@drawable/on&quot; /&gt;
    &lt;item android:drawable=&quot;@drawable/off&quot; /&gt;
&lt;/transition&gt;
</pre> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageButton
    android:id=&quot;@+id/button&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/transition&quot; /&gt;
</pre> 
   <p>And the following code performs a 500ms transition from the first item to the second:</p> 
   <pre>
ImageButton button = (ImageButton) findViewById(R.id.button);
TransitionDrawable drawable = (TransitionDrawable) button.getDrawable();
drawable.startTransition(500);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","TransitionDrawable","android.graphics.drawable.TransitionDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","LayerDrawable","android.graphics.drawable.LayerDrawable","class",0
,"Drawable Resources","Layer List","<h2 id="LayerList">Layer List</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code> is a drawable object that manages an array of other drawables. Each drawable in the list is drawn in the order of the list¡ªthe last drawable in the list is drawn on top.</p> 
 <p>Each drawable is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;layer-list&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#layerlist-element">layer-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#layerlist-item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:id=&quot;@[+][<em>package</em>:]id/<i>resource_name</i>&quot;
        android:top=&quot;<em>dimension</em>&quot;
        android:right=&quot;<em>dimension</em>&quot;
        android:bottom=&quot;<em>dimension</em>&quot;
        android:left=&quot;<em>dimension</em>&quot; /&gt;
&lt;/layer-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="layerlist-element">
     <code>&lt;layer-list&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="layerlist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to place in the layer drawable, in a position defined by its attributes. Must be a child of a 
     <code>&lt;selector&gt;</code> element. Accepts child 
     <code>&lt;bitmap&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:id</code>
      </dt> 
      <dd>
       <em>Resource ID</em>. A unique resource ID for this drawable. To create a new resource ID for this item, use the form: 
       <code>&quot;@+id/<em>name</em>&quot;</code>. The plus symbol indicates that this should be created as a new ID. You can use this identifier to retrieve and modify the drawable with 
       <code><a href="../../../reference/android/view/View.html#findViewById(int)">View.findViewById()</a></code> or 
       <code><a href="../../../reference/android/app/Activity.html#findViewById(int)">Activity.findViewById()</a></code>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Integer</em>. The top offset in pixels.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Integer</em>. The right offset in pixels.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Integer</em>. The bottom offset in pixels.
      </dd> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Integer</em>. The left offset in pixels.
      </dd> 
     </dl> 
     <p>All drawable items are scaled to fit the size of the containing View, by default. Thus, placing your images in a layer list at different positions might increase the size of the View and some images scale as appropriate. To avoid scaling items in the list, use a <code>&lt;bitmap&gt;</code> element inside the <code>&lt;item&gt;</code> element to specify the drawable and define the gravity to something that does not scale, such as <code>&quot;center&quot;</code>. For example, the following <code>&lt;item&gt;</code> defines an item that scales to fit its container View:</p> 
     <pre>
&lt;item android:drawable=&quot;@drawable/image&quot; /&gt;
</pre> 
     <p>To avoid scaling, the following example uses a <code>&lt;bitmap&gt;</code> element with centered gravity:</p> 
     <pre>
&lt;item&gt;
  &lt;bitmap android:src=&quot;<b>@drawable/image</b>&quot;
          android:gravity=&quot;center&quot; /&gt;
&lt;/item&gt;
</pre> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/layers.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item&gt;
      &lt;bitmap android:src=&quot;@drawable/android_red&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;10dp&quot; android:left=&quot;10dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_green&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
    &lt;item android:top=&quot;20dp&quot; android:left=&quot;20dp&quot;&gt;
      &lt;bitmap android:src=&quot;@drawable/android_blue&quot;
        android:gravity=&quot;center&quot; /&gt;
    &lt;/item&gt;
&lt;/layer-list&gt;
</pre> 
   <p>Notice that this example uses a nested <code>&lt;bitmap&gt;</code> element to define the drawable resource for each item with a &quot;center&quot; gravity. This ensures that none of the images are scaled to fit the size of the container, due to resizing caused by the offset images.</p> 
   <p>This layout XML applies the drawable to a View:</p> 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/layers&quot; /&gt;
</pre> 
   <p>The result is a stack of increasingly offset images:</p> 
   <img src="../../../images/resources/layers.png" alt="" /> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","LayerDrawable","android.graphics.drawable.LayerDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","ShapeDrawable","android.graphics.drawable.ShapeDrawable","class",0
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","ShapeDrawable","android.graphics.drawable.ShapeDrawable","class",0
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","StateListDrawable","android.graphics.drawable.StateListDrawable","class",0
,"Drawable Resources","State List","<h2 id="StateList">State List</h2> 
 <p>A <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code> is a drawable object defined in XML that uses a several different images to represent the same graphic, depending on the state of the object. For example, a <code><a href="../../../reference/android/widget/Button.html">Button</a></code> widget can exist in one of several different states (pressed, focused, or niether) and, using a state list drawable, you can provide a different background image for each state.</p> 
 <p>You can describe the state list in an XML file. Each graphic is represented by an <code>&lt;item&gt;</code> element inside a single <code>&lt;selector&gt;</code> element. Each <code>&lt;item&gt;</code> uses various attributes to describe the state in which it should be used as the graphic for the drawable.</p> 
 <p>During each state change, the state list is traversed top to bottom and the first item that matches the current state is used¡ªthe selection is <em>not</em> based on the &quot;best match,&quot; but simply the first item that meets the minimum criteria of the state.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#selector-element">selector</a> xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:constantSize=[&quot;true&quot; | &quot;false&quot;]
    android:dither=[&quot;true&quot; | &quot;false&quot;]
    android:variablePadding=[&quot;true&quot; | &quot;false&quot;] &gt;
    &lt;<a href="#item-element">item</a>
        android:drawable=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
        android:state_pressed=[&quot;true&quot; | &quot;false&quot;]
        android:state_focused=[&quot;true&quot; | &quot;false&quot;]
        android:state_hovered=[&quot;true&quot; | &quot;false&quot;]
        android:state_selected=[&quot;true&quot; | &quot;false&quot;]
        android:state_checkable=[&quot;true&quot; | &quot;false&quot;]
        android:state_checked=[&quot;true&quot; | &quot;false&quot;]
        android:state_enabled=[&quot;true&quot; | &quot;false&quot;]
        android:state_activated=[&quot;true&quot; | &quot;false&quot;]
        android:state_window_focused=[&quot;true&quot; | &quot;false&quot;] /&gt;
&lt;/selector&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="selector-element">
     <code>&lt;selector&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:constantSize</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if the drawable's reported internal size remains constant as the state changes (the size is the maximum of all of the states); &quot;false&quot; if the size varies based on the current state. Default is false.
      </dd> 
      <dt>
       <code>android:dither</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; to enable dithering of the bitmap if the bitmap does not have the same pixel configuration as the screen (for instance, an ARGB 8888 bitmap with an RGB 565 screen); &quot;false&quot; to disable dithering. Default is true.
      </dd> 
      <dt>
       <code>android:variablePadding</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if the drawable's padding should change based on the current state that is selected; &quot;false&quot; if the padding should stay the same (based on the maximum padding of all the states). Enabling this feature requires that you deal with performing layout when the state changes, which is often not supported. Default is false.
      </dd> 
     </dl> 
    </dd> 
    <dt id="item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use during certain states, as described by its attributes. Must be a child of a 
     <code>&lt;selector&gt;</code> element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:state_pressed</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is pressed (such as when a button is touched/clicked); &quot;false&quot; if this item should be used in the default, non-pressed state.
      </dd> 
      <dt>
       <code>android:state_focused</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object has input focus (such as when the user selects a text input); &quot;false&quot; if this item should be used in the default, non-focused state.
      </dd> 
      <dt>
       <code>android:state_hovered</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is being hovered by a cursor; &quot;false&quot; if this item should be used in the default, non-hovered state. Often, this drawable may be the same drawable used for the &quot;focused&quot; state. 
       <p>Introduced in API level 14.</p>
      </dd> 
      <dt>
       <code>android:state_selected</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is the current user selection when navigating with a directional control (such as when navigating through a list with a d-pad); &quot;false&quot; if this item should be used when the object is not selected. 
       <p>The selected state is used when focus (<code>android:state_focused</code>) is not sufficient (such as when list view has focus and an item within it is selected with a d-pad).</p>
      </dd> 
      <dt>
       <code>android:state_checkable</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is checkable; &quot;false&quot; if this item should be used when the object is not checkable. (Only useful if the object can transition between a checkable and non-checkable widget.)
      </dd> 
      <dt>
       <code>android:state_checked</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is checked; &quot;false&quot; if it should be used when the object is un-checked.
      </dd> 
      <dt>
       <code>android:state_enabled</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is enabled (capable of receiving touch/click events); &quot;false&quot; if it should be used when the object is disabled.
      </dd> 
      <dt>
       <code>android:state_activated</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the object is activated as the persistent selection (such as to &quot;highlight&quot; the previously selected list item in a persistent navigation view); &quot;false&quot; if it should be used when the object is not activated. 
       <p>Introduced in API level 11.</p>
      </dd> 
      <dt>
       <code>android:state_window_focused</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this item should be used when the application window has focus (the application is in the foreground), &quot;false&quot; if this item should be used when the application window does not have focus (for example, if the notification shade is pulled down or a dialog appears).
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Remember that Android applies the first item in the state list that matches the current state of the object. So, if the first item in the list contains none of the state attributes above, then it is applied every time, which is why your default value should always be last (as demonstrated in the following example).</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/button.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;item android:state_pressed=&quot;true&quot;
          android:drawable=&quot;@drawable/button_pressed&quot; /&gt; &lt;!-- pressed --&gt;
    &lt;item android:state_focused=&quot;true&quot;
          android:drawable=&quot;@drawable/button_focused&quot; /&gt; &lt;!-- focused --&gt;
    &lt;item android:state_hovered=&quot;true&quot;
          android:drawable=&quot;@drawable/button_focused&quot; /&gt; &lt;!-- hovered --&gt;
    &lt;item android:drawable=&quot;@drawable/button_normal&quot; /&gt; &lt;!-- default --&gt;
&lt;/selector&gt;
</pre> 
   <p>This layout XML applies the state list drawable to a Button:</p> 
   <pre>
&lt;Button
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:background=&quot;@drawable/button&quot; /&gt;
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","StateListDrawable","android.graphics.drawable.StateListDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","ClipDrawable","android.graphics.drawable.ClipDrawable","class",0
,"Drawable Resources","Clip Drawable","<h2 id="Clip">Clip Drawable</h2> 
 <p>A drawable defined in XML that clips another drawable based on this Drawable's current level. You can control how much the child drawable gets clipped in width and height based on the level, as well as a gravity to control where it is placed in its overall container. Most often used to implement things like progress bars.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#clip-element">clip</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
    android:clipOrientation=[&quot;horizontal&quot; | &quot;vertical&quot;]
    android:gravity=[&quot;top&quot; | &quot;bottom&quot; | &quot;left&quot; | &quot;right&quot; | &quot;center_vertical&quot; |
                     &quot;fill_vertical&quot; | &quot;center_horizontal&quot; | &quot;fill_horizontal&quot; |
                     &quot;center&quot; | &quot;fill&quot; | &quot;clip_vertical&quot; | &quot;clip_horizontal&quot;] /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="clip-element">
     <code>&lt;clip&gt;</code>
    </dt> 
    <dd>
     Defines the clip drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be clipped.
      </dd> 
      <dt>
       <code>android:clipOrientation</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The orientation for the clip. 
       <p>Must be one of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>horizontal</code></td> 
          <td>Clip the drawable horizontally.</td>
         </tr> 
         <tr>
          <td><code>vertical</code></td> 
          <td>Clip the drawable vertically.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:gravity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Specifies where to clip within the drawable. 
       <p>Must be one or more (separated by '|') of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>top</code></td> 
          <td>Put the object at the top of its container, not changing its size. When <code>clipOrientation</code> is <code>&quot;vertical&quot;</code>, clipping occurs at the bottom of the drawable.</td>
         </tr> 
         <tr>
          <td><code>bottom</code></td> 
          <td>Put the object at the bottom of its container, not changing its size. When <code>clipOrientation</code> is <code>&quot;vertical&quot;</code>, clipping occurs at the top of the drawable.</td>
         </tr> 
         <tr>
          <td><code>left</code></td> 
          <td>Put the object at the left edge of its container, not changing its size. This is the default. When <code>clipOrientation</code> is <code>&quot;horizontal&quot;</code>, clipping occurs at the right side of the drawable. This is the default.</td>
         </tr> 
         <tr>
          <td><code>right</code></td> 
          <td>Put the object at the right edge of its container, not changing its size. When <code>clipOrientation</code> is <code>&quot;horizontal&quot;</code>, clipping occurs at the left side of the drawable.</td>
         </tr> 
         <tr>
          <td><code>center_vertical</code></td> 
          <td>Place object in the vertical center of its container, not changing its size. Clipping behaves the same as when gravity is <code>&quot;center&quot;</code>.</td>
         </tr> 
         <tr>
          <td><code>fill_vertical</code></td> 
          <td>Grow the vertical size of the object if needed so it completely fills its container. When <code>clipOrientation</code> is <code>&quot;vertical&quot;</code>, no clipping occurs because the drawable fills the vertical space (unless the drawable level is 0, in which case it's not visible).</td>
         </tr> 
         <tr>
          <td><code>center_horizontal</code></td> 
          <td>Place object in the horizontal center of its container, not changing its size. Clipping behaves the same as when gravity is <code>&quot;center&quot;</code>.</td>
         </tr> 
         <tr>
          <td><code>fill_horizontal</code></td> 
          <td>Grow the horizontal size of the object if needed so it completely fills its container. When <code>clipOrientation</code> is <code>&quot;horizontal&quot;</code>, no clipping occurs because the drawable fills the horizontal space (unless the drawable level is 0, in which case it's not visible). </td>
         </tr> 
         <tr>
          <td><code>center</code></td> 
          <td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. When <code>clipOrientation</code> is <code>&quot;horizontal&quot;</code>, clipping occurs on the left and right. When <code>clipOrientation</code> is <code>&quot;vertical&quot;</code>, clipping occurs on the top and bottom.</td>
         </tr> 
         <tr>
          <td><code>fill</code></td> 
          <td>Grow the horizontal and vertical size of the object if needed so it completely fills its container. No clipping occurs because the drawable fills the horizontal and vertical space (unless the drawable level is 0, in which case it's not visible).</td>
         </tr> 
         <tr>
          <td><code>clip_vertical</code></td> 
          <td>Additional option that can be set to have the top and/or bottom edges of the child clipped to its container's bounds. The clip is based on the vertical gravity: a top gravity clips the bottom edge, a bottom gravity clips the top edge, and neither clips both edges. </td>
         </tr> 
         <tr>
          <td><code>clip_horizontal</code></td> 
          <td>Additional option that can be set to have the left and/or right edges of the child clipped to its container's bounds. The clip is based on the horizontal gravity: a left gravity clips the right edge, a right gravity clips the left edge, and neither clips both edges. </td>
         </tr> 
        </tbody>
       </table>
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/clip.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;clip xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/android&quot;
    android:clipOrientation=&quot;horizontal&quot;
    android:gravity=&quot;left&quot; /&gt;
</pre> 
   <p>The following layout XML applies the clip drawable to a View:</p> 
   <pre>
&lt;ImageView
    android:id=&quot;@+id/image&quot;
    android:background=&quot;@drawable/clip&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>The following code gets the drawable and increases the amount of clipping in order to progressively reveal the image:</p> 
   <pre>
ImageView imageview = (ImageView) findViewById(R.id.image);
ClipDrawable drawable = (ClipDrawable) imageview.getDrawable();
drawable.setLevel(drawable.getLevel() + 1000);
</pre> 
   <p>Increasing the level reduces the amount of clipping and slowly reveals the image. Here it is at a level of 7000:</p> 
   <img src="../../../images/resources/clip.png" alt="" /> 
   <p class="note"><strong>Note:</strong> The default level is 0, which is fully clipped so the image is not visible. When the level is 10,000, the image is not clipped and completely visible.</p> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","ClipDrawable","android.graphics.drawable.ClipDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","LevelListDrawable","android.graphics.drawable.LevelListDrawable","class",0
,"Drawable Resources","Level List","<h2 id="LevelList">Level List</h2> 
 <p>A Drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the drawable with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> loads the drawable resource in the level list that has a <code>android:maxLevel</code> value greater than or equal to the value passed to the method.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#levellist-element">level-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#levellist-item-element">item</a>
        android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
        android:maxLevel=&quot;<i>integer</i>&quot;
        android:minLevel=&quot;<i>integer</i>&quot; /&gt;
&lt;/level-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="levellist-element">
     <code>&lt;level-list&gt;</code>
    </dt> 
    <dd>
     This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="levellist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use at a certain level. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be inset.
      </dd> 
      <dt>
       <code>android:maxLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The maximum level allowed for this item.
      </dd> 
      <dt>
       <code>android:minLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The minimum level allowed for this item.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;item
        android:drawable=&quot;@drawable/status_off&quot;
        android:maxLevel=&quot;0&quot; /&gt;
    &lt;item
        android:drawable=&quot;@drawable/status_on&quot;
        android:maxLevel=&quot;1&quot; /&gt;
&lt;/level-list&gt;
</pre> 
   <p>Once this is applied to a <code><a href="../../../reference/android/view/View.html">View</a></code>, the level can be changed with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> or <code><a href="../../../reference/android/widget/ImageView.html#setImageLevel(int)">setImageLevel()</a></code>.</p> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","LevelListDrawable","android.graphics.drawable.LevelListDrawable","class",0
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","LevelListDrawable","android.graphics.drawable.LevelListDrawable","class",0
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","NinePatchDrawable","android.graphics.drawable.NinePatchDrawable","class",0
,"Nine-Patch","Nine-Patch File","<h3 id="NinePatchFile">Nine-Patch File</h3> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.9.png</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd>
   With an image saved at 
   <code>res/drawable/myninepatch.9.png</code>, this layout XML applies the Nine-Patch to a View: 
   <pre>
&lt;Button
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:background=&quot;@drawable/myninepatch&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/2d-graphics.html#nine-patch">2D Graphics</a></li> 
    <li><code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","NinePatchDrawable","android.graphics.drawable.NinePatchDrawable","class",1
,"Nine-Patch","XML Nine-Patch","<h3 id="NinePatchXml">XML Nine-Patch</h3> 
 <p>An XML Nine-Patch is a resource defined in XML that points to a Nine-Patch file. The XML can specify dithering for the image.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#ninepatch-element">nine-patch</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
    android:dither=[&quot;true&quot; | &quot;false&quot;] /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="ninepatch-element">
     <code>&lt;nine-patch&gt;</code>
    </dt> 
    <dd>
     Defines the Nine-Patch source and its properties. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:src</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a Nine-Patch file.
      </dd> 
      <dt>
       <code>android:dither</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables dithering of the bitmap if the bitmap does not have the same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with an RGB 565 screen).
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;nine-patch xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@drawable/myninepatch&quot;
    android:dither=&quot;false&quot; /&gt;
</pre> 
  </dd> 
 </dl> 
 ","NinePatchDrawable","android.graphics.drawable.NinePatchDrawable","class",1
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","BitmapDrawable","android.graphics.drawable.BitmapDrawable","class",0
,"Bitmap","Bitmap File","<h3 id="BitmapFile">Bitmap File</h3> 
 <p>A bitmap file is a <code>.png</code>, <code>.jpg</code>, or <code>.gif</code> file. Android creates a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> resource for any of these files when you save them in the <code>res/drawable/</code> directory.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.png</code> (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>)
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd>
   With an image saved at 
   <code>res/drawable/myimage.png</code>, this layout XML applies the image to a View: 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/myimage&quot; /&gt;
</pre> 
   <p>The following application code retrieves the image as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable drawable = res.<code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.myimage);
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/2d-graphics.html">2D Graphics</a></li> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","BitmapDrawable","android.graphics.drawable.BitmapDrawable","class",1
,"Bitmap","XML Bitmap","<h3 id="XmlBitmap">XML Bitmap</h3> 
 <p>An XML bitmap is a resource defined in XML that points to a bitmap file. The effect is an alias for a raw bitmap file. The XML can specify additional properties for the bitmap such as dithering and tiling.</p> 
 <p class="note"><strong>Note:</strong> You can use a <code>&lt;bitmap&gt;</code> element as a child of an <code>&lt;item&gt;</code> element. For example, when creating a <a href="#StateList">state list</a> or <a href="#LayerList">layer list</a>, you can exclude the <code>android:drawable</code> attribute from an <code>&lt;item&gt;</code> element and nest a <code>&lt;bitmap&gt;</code> inside it that defines the drawable item.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#bitmap-element">bitmap</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
    android:antialias=[&quot;true&quot; | &quot;false&quot;]
    android:dither=[&quot;true&quot; | &quot;false&quot;]
    android:filter=[&quot;true&quot; | &quot;false&quot;]
    android:gravity=[&quot;top&quot; | &quot;bottom&quot; | &quot;left&quot; | &quot;right&quot; | &quot;center_vertical&quot; |
                      &quot;fill_vertical&quot; | &quot;center_horizontal&quot; | &quot;fill_horizontal&quot; |
                      &quot;center&quot; | &quot;fill&quot; | &quot;clip_vertical&quot; | &quot;clip_horizontal&quot;]
    android:mipMap=[&quot;true&quot; | &quot;false&quot;]
    android:tileMode=[&quot;disabled&quot; | &quot;clamp&quot; | &quot;repeat&quot; | &quot;mirror&quot;] /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="bitmap-element">
     <code>&lt;bitmap&gt;</code>
    </dt> 
    <dd>
     Defines the bitmap source and its properties. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. This is required only if the 
       <code>&lt;bitmap&gt;</code> is the root element¡ªit is not needed when the 
       <code>&lt;bitmap&gt;</code> is nested inside an 
       <code>&lt;item&gt;</code>.
      </dd> 
      <dt>
       <code>android:src</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:antialias</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables antialiasing.
      </dd> 
      <dt>
       <code>android:dither</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables dithering of the bitmap if the bitmap does not have the same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with an RGB 565 screen).
      </dd> 
      <dt>
       <code>android:filter</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables bitmap filtering. Filtering is used when the bitmap is shrunk or stretched to smooth its apperance.
      </dd> 
      <dt>
       <code>android:gravity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the gravity for the bitmap. The gravity indicates where to position the drawable in its container if the bitmap is smaller than the container. 
       <p>Must be one or more (separated by '|') of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>top</code></td> 
          <td>Put the object at the top of its container, not changing its size.</td>
         </tr> 
         <tr>
          <td><code>bottom</code></td> 
          <td>Put the object at the bottom of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>left</code></td> 
          <td>Put the object at the left edge of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>right</code></td> 
          <td>Put the object at the right edge of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>center_vertical</code></td> 
          <td>Place object in the vertical center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_vertical</code></td> 
          <td>Grow the vertical size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center_horizontal</code></td> 
          <td>Place object in the horizontal center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_horizontal</code></td> 
          <td>Grow the horizontal size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center</code></td> 
          <td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill</code></td> 
          <td>Grow the horizontal and vertical size of the object if needed so it completely fills its container. This is the default.</td>
         </tr> 
         <tr>
          <td><code>clip_vertical</code></td> 
          <td>Additional option that can be set to have the top and/or bottom edges of the child clipped to its container's bounds. The clip is based on the vertical gravity: a top gravity clips the bottom edge, a bottom gravity clips the top edge, and neither clips both edges. </td>
         </tr> 
         <tr>
          <td><code>clip_horizontal</code></td> 
          <td>Additional option that can be set to have the left and/or right edges of the child clipped to its container's bounds. The clip is based on the horizontal gravity: a left gravity clips the right edge, a right gravity clips the left edge, and neither clips both edges. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:mipMap</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables the mipmap hint. See 
       <code><a href="../../../reference/android/graphics/Bitmap.html#setHasMipMap(boolean)">setHasMipMap()</a></code> for more information. Default value is false.
      </dd> 
      <dt>
       <code>android:tileMode</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the tile mode. When the tile mode is enabled, the bitmap is repeated. Gravity is ignored when the tile mode is enabled. 
       <p>Must be one of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>disabled</code></td> 
          <td>Do not tile the bitmap. This is the default value.</td>
         </tr> 
         <tr>
          <td><code>clamp</code></td> 
          <td>Replicates the edge color if the shader draws outside of its original bounds</td>
         </tr> 
         <tr>
          <td><code>repeat</code></td> 
          <td>Repeats the shader's image horizontally and vertically.</td>
         </tr> 
         <tr>
          <td><code>mirror</code></td> 
          <td>Repeats the shader's image horizontally and vertically, alternating mirror images so that adjacent images always seam.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;bitmap xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@drawable/icon&quot;
    android:tileMode=&quot;repeat&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
    <li><a href="../../../guide/topics/resources/providing-resources.html#AliasResources">Creating alias resources</a> </li>
   </ul> 
  </dd> 
 </dl> 
 ","BitmapDrawable","android.graphics.drawable.BitmapDrawable","class",0
,"Drawable Resources","Drawable Resources","<p>A drawable resource is a general concept for a graphic that can be drawn to the screen and which you can retrieve with APIs such as <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable(int)</a></code> or apply to another XML resource with attributes such as <code>android:drawable</code> and <code>android:icon</code>. There are several different types of drawables:</p> 
 <dl> 
  <dt>
   <a href="#Bitmap">Bitmap File</a>
  </dt>
  <dt> 
  </dt>
  <dd>
   A bitmap graphic file (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#NinePatch">Nine-Patch File</a>
  </dt> 
  <dd>
   A PNG file with stretchable regions to allow image resizing based on content (
   <code>.9.png</code>). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/NinePatchDrawable.html">NinePatchDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LayerList">Layer List</a>
  </dt> 
  <dd>
   A Drawable that manages an array of other Drawables. These are drawn in array order, so the element with the largest index is be drawn on top. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LayerDrawable.html">LayerDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#StateList">State List</a>
  </dt> 
  <dd>
   An XML file that references different bitmap graphics for different states (for example, to use a different image when a button is pressed). Creates a 
   <code><a href="../../../reference/android/graphics/drawable/StateListDrawable.html">StateListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#LevelList">Level List</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Transition">Transition Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that can cross-fade between two drawable resources. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/TransitionDrawable.html">TransitionDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Inset">Inset Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that insets another drawable by a specified distance. This is useful when a View needs a background drawble that is smaller than the View's actual bounds.
  </dd> 
  <dt>
   <a href="#Clip">Clip Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that clips another Drawable based on this Drawable's current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ClipDrawable.html">ClipDrawable</a></code>.
  </dd> 
  <dt>
   <a href="#Scale">Scale Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a drawable that changes the size of another Drawable based on its current level value. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>
  </dd> 
  <dt>
   <a href="#Shape">Shape Drawable</a>
  </dt> 
  <dd>
   An XML file that defines a geometric shape, including colors and gradients. Creates a 
   <code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code>.
  </dd> 
 </dl> 
 <p>Also see the <a href="animation-resource.html">Animation Resource</a> document for how to create an <code><a href="../../../reference/android/graphics/drawable/AnimationDrawable.html">AnimationDrawable</a></code>.</p> 
 <p class="note"><strong>Note:</strong> A <a href="../../../guide/topics/resources/more-resources.html#Color">color resource</a> can also be used as a drawable in XML. For example, when creating a <a href="#StateList">state list drawable</a>, you can reference a color resource for the <code>android:drawable</code> attribute (<code>android:drawable=&quot;@color/green&quot;</code>).</p> 
 ","ScaleDrawable","android.graphics.drawable.ScaleDrawable","class",0
,"Drawable Resources","Scale Drawable","<h2 id="Scale">Scale Drawable</h2> 
 <p>A drawable defined in XML that changes the size of another drawable based on its current level.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#scale-element">scale</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
    android:scaleGravity=[&quot;top&quot; | &quot;bottom&quot; | &quot;left&quot; | &quot;right&quot; | &quot;center_vertical&quot; |
                          &quot;fill_vertical&quot; | &quot;center_horizontal&quot; | &quot;fill_horizontal&quot; |
                          &quot;center&quot; | &quot;fill&quot; | &quot;clip_vertical&quot; | &quot;clip_horizontal&quot;]
    android:scaleHeight=&quot;<i>percentage</i>&quot;
    android:scaleWidth=&quot;<i>percentage</i>&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="scale-element">
     <code>&lt;scale&gt;</code>
    </dt> 
    <dd>
     Defines the scale drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:scaleGravity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Specifies the gravity position after scaling. 
       <p>Must be one or more (separated by '|') of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>top</code></td> 
          <td>Put the object at the top of its container, not changing its size.</td>
         </tr> 
         <tr>
          <td><code>bottom</code></td> 
          <td>Put the object at the bottom of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>left</code></td> 
          <td>Put the object at the left edge of its container, not changing its size. This is the default.</td>
         </tr> 
         <tr>
          <td><code>right</code></td> 
          <td>Put the object at the right edge of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>center_vertical</code></td> 
          <td>Place object in the vertical center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_vertical</code></td> 
          <td>Grow the vertical size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center_horizontal</code></td> 
          <td>Place object in the horizontal center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_horizontal</code></td> 
          <td>Grow the horizontal size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center</code></td> 
          <td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill</code></td> 
          <td>Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>clip_vertical</code></td> 
          <td>Additional option that can be set to have the top and/or bottom edges of the child clipped to its container's bounds. The clip is based on the vertical gravity: a top gravity clips the bottom edge, a bottom gravity clips the top edge, and neither clips both edges. </td>
         </tr> 
         <tr>
          <td><code>clip_horizontal</code></td> 
          <td>Additional option that can be set to have the left and/or right edges of the child clipped to its container's bounds. The clip is based on the horizontal gravity: a left gravity clips the right edge, a right gravity clips the left edge, and neither clips both edges. </td>
         </tr> 
        </tbody>
       </table>
      </dd> 
      <dt>
       <code>android:scaleHeight</code>
      </dt> 
      <dd>
       <em>Percentage</em>. The scale height, expressed as a percentage of the drawable's bound. The value's format is XX%. For instance: 100%, 12.5%, etc.
      </dd> 
      <dt>
       <code>android:scaleWidth</code>
      </dt> 
      <dd>
       <em>Percentage</em>. The scale width, expressed as a percentage of the drawable's bound. The value's format is XX%. For instance: 100%, 12.5%, etc.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/logo&quot;
    android:scaleGravity=&quot;center_vertical|center_horizontal&quot;
    android:scaleHeight=&quot;80%&quot;
    android:scaleWidth=&quot;80%&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ScaleDrawable.html">ScaleDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","ScaleDrawable","android.graphics.drawable.ScaleDrawable","class",1
,"Bitmap","Bitmap File","<h3 id="BitmapFile">Bitmap File</h3> 
 <p>A bitmap file is a <code>.png</code>, <code>.jpg</code>, or <code>.gif</code> file. Android creates a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code> resource for any of these files when you save them in the <code>res/drawable/</code> directory.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.png</code> (
   <code>.png</code>, 
   <code>.jpg</code>, or 
   <code>.gif</code>)
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd>
   With an image saved at 
   <code>res/drawable/myimage.png</code>, this layout XML applies the image to a View: 
   <pre>
&lt;ImageView
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:src=&quot;@drawable/myimage&quot; /&gt;
</pre> 
   <p>The following application code retrieves the image as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable drawable = res.<code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.myimage);
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><a href="../../../guide/topics/graphics/2d-graphics.html">2D Graphics</a></li> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Drawable","android.graphics.drawable.Drawable","class",0
,"Drawable Resources","Level List","<h2 id="LevelList">Level List</h2> 
 <p>A Drawable that manages a number of alternate Drawables, each assigned a maximum numerical value. Setting the level value of the drawable with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> loads the drawable resource in the level list that has a <code>android:maxLevel</code> value greater than or equal to the value passed to the method.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#levellist-element">level-list</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;<a href="#levellist-item-element">item</a>
        android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
        android:maxLevel=&quot;<i>integer</i>&quot;
        android:minLevel=&quot;<i>integer</i>&quot; /&gt;
&lt;/level-list&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="levellist-element">
     <code>&lt;level-list&gt;</code>
    </dt> 
    <dd>
     This must be the root element. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
     </dl> 
    </dd> 
    <dt id="levellist-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     Defines a drawable to use at a certain level. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be inset.
      </dd> 
      <dt>
       <code>android:maxLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The maximum level allowed for this item.
      </dd> 
      <dt>
       <code>android:minLevel</code>
      </dt> 
      <dd>
       <em>Integer</em>. The minimum level allowed for this item.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;level-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;
    &lt;item
        android:drawable=&quot;@drawable/status_off&quot;
        android:maxLevel=&quot;0&quot; /&gt;
    &lt;item
        android:drawable=&quot;@drawable/status_on&quot;
        android:maxLevel=&quot;1&quot; /&gt;
&lt;/level-list&gt;
</pre> 
   <p>Once this is applied to a <code><a href="../../../reference/android/view/View.html">View</a></code>, the level can be changed with <code><a href="../../../reference/android/graphics/drawable/Drawable.html#setLevel(int)">setLevel()</a></code> or <code><a href="../../../reference/android/widget/ImageView.html#setImageLevel(int)">setImageLevel()</a></code>.</p> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","Drawable","android.graphics.drawable.Drawable","class",1
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Drawable","android.graphics.drawable.Drawable","class",0
,"Bitmap","XML Bitmap","<h3 id="XmlBitmap">XML Bitmap</h3> 
 <p>An XML bitmap is a resource defined in XML that points to a bitmap file. The effect is an alias for a raw bitmap file. The XML can specify additional properties for the bitmap such as dithering and tiling.</p> 
 <p class="note"><strong>Note:</strong> You can use a <code>&lt;bitmap&gt;</code> element as a child of an <code>&lt;item&gt;</code> element. For example, when creating a <a href="#StateList">state list</a> or <a href="#LayerList">layer list</a>, you can exclude the <code>android:drawable</code> attribute from an <code>&lt;item&gt;</code> element and nest a <code>&lt;bitmap&gt;</code> inside it that defines the drawable item.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#bitmap-element">bitmap</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@[package:]drawable/<em>drawable_resource</em>&quot;
    android:antialias=[&quot;true&quot; | &quot;false&quot;]
    android:dither=[&quot;true&quot; | &quot;false&quot;]
    android:filter=[&quot;true&quot; | &quot;false&quot;]
    android:gravity=[&quot;top&quot; | &quot;bottom&quot; | &quot;left&quot; | &quot;right&quot; | &quot;center_vertical&quot; |
                      &quot;fill_vertical&quot; | &quot;center_horizontal&quot; | &quot;fill_horizontal&quot; |
                      &quot;center&quot; | &quot;fill&quot; | &quot;clip_vertical&quot; | &quot;clip_horizontal&quot;]
    android:mipMap=[&quot;true&quot; | &quot;false&quot;]
    android:tileMode=[&quot;disabled&quot; | &quot;clamp&quot; | &quot;repeat&quot; | &quot;mirror&quot;] /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="bitmap-element">
     <code>&lt;bitmap&gt;</code>
    </dt> 
    <dd>
     Defines the bitmap source and its properties. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. This is required only if the 
       <code>&lt;bitmap&gt;</code> is the root element¡ªit is not needed when the 
       <code>&lt;bitmap&gt;</code> is nested inside an 
       <code>&lt;item&gt;</code>.
      </dd> 
      <dt>
       <code>android:src</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource.
      </dd> 
      <dt>
       <code>android:antialias</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables antialiasing.
      </dd> 
      <dt>
       <code>android:dither</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables dithering of the bitmap if the bitmap does not have the same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with an RGB 565 screen).
      </dd> 
      <dt>
       <code>android:filter</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables bitmap filtering. Filtering is used when the bitmap is shrunk or stretched to smooth its apperance.
      </dd> 
      <dt>
       <code>android:gravity</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the gravity for the bitmap. The gravity indicates where to position the drawable in its container if the bitmap is smaller than the container. 
       <p>Must be one or more (separated by '|') of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>top</code></td> 
          <td>Put the object at the top of its container, not changing its size.</td>
         </tr> 
         <tr>
          <td><code>bottom</code></td> 
          <td>Put the object at the bottom of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>left</code></td> 
          <td>Put the object at the left edge of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>right</code></td> 
          <td>Put the object at the right edge of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>center_vertical</code></td> 
          <td>Place object in the vertical center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_vertical</code></td> 
          <td>Grow the vertical size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center_horizontal</code></td> 
          <td>Place object in the horizontal center of its container, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill_horizontal</code></td> 
          <td>Grow the horizontal size of the object if needed so it completely fills its container. </td>
         </tr> 
         <tr>
          <td><code>center</code></td> 
          <td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td>
         </tr> 
         <tr>
          <td><code>fill</code></td> 
          <td>Grow the horizontal and vertical size of the object if needed so it completely fills its container. This is the default.</td>
         </tr> 
         <tr>
          <td><code>clip_vertical</code></td> 
          <td>Additional option that can be set to have the top and/or bottom edges of the child clipped to its container's bounds. The clip is based on the vertical gravity: a top gravity clips the bottom edge, a bottom gravity clips the top edge, and neither clips both edges. </td>
         </tr> 
         <tr>
          <td><code>clip_horizontal</code></td> 
          <td>Additional option that can be set to have the left and/or right edges of the child clipped to its container's bounds. The clip is based on the horizontal gravity: a left gravity clips the right edge, a right gravity clips the left edge, and neither clips both edges. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:mipMap</code>
      </dt> 
      <dd>
       <em>Boolean</em>. Enables or disables the mipmap hint. See 
       <code><a href="../../../reference/android/graphics/Bitmap.html#setHasMipMap(boolean)">setHasMipMap()</a></code> for more information. Default value is false.
      </dd> 
      <dt>
       <code>android:tileMode</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the tile mode. When the tile mode is enabled, the bitmap is repeated. Gravity is ignored when the tile mode is enabled. 
       <p>Must be one of the following constant values:</p> 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>disabled</code></td> 
          <td>Do not tile the bitmap. This is the default value.</td>
         </tr> 
         <tr>
          <td><code>clamp</code></td> 
          <td>Replicates the edge color if the shader draws outside of its original bounds</td>
         </tr> 
         <tr>
          <td><code>repeat</code></td> 
          <td>Repeats the shader's image horizontally and vertically.</td>
         </tr> 
         <tr>
          <td><code>mirror</code></td> 
          <td>Repeats the shader's image horizontally and vertically, alternating mirror images so that adjacent images always seam.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;bitmap xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:src=&quot;@drawable/icon&quot;
    android:tileMode=&quot;repeat&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/BitmapDrawable.html">BitmapDrawable</a></code></li> 
    <li><a href="../../../guide/topics/resources/providing-resources.html#AliasResources">Creating alias resources</a> </li>
   </ul> 
  </dd> 
 </dl> 
 ","Bitmap","android.graphics.Bitmap","class",1
,"Drawable Resources","Nine-Patch","<h2 id="NinePatch">Nine-Patch</h2> 
 <p>A <code><a href="../../../reference/android/graphics/NinePatch.html">NinePatch</a></code> is a PNG image in which you can define stretchable regions that Android scales when content within the View exceeds the normal image bounds. You typically assign this type of image as the background of a View that has at least one dimension set to <code>&quot;wrap_content&quot;</code>, and when the View grows to accomodate the content, the Nine-Patch image is also scaled to match the size of the View. An example use of a Nine-Patch image is the background used by Android's standard <code><a href="../../../reference/android/widget/Button.html">Button</a></code> widget, which must stretch to accommodate the text (or image) inside the button.</p> 
 <p>Same as with a normal <a href="#Bitmap">bitmap</a>, you can reference a Nine-Patch file directly or from a resource defined by XML.</p> 
 <p>For a complete discussion about how to create a Nine-Patch file with stretchable regions, see the <a href="../../../guide/topics/graphics/2d-graphics.html#nine-patch">2D Graphics</a> document.</p> 
 ","NinePatch","android.graphics.NinePatch","class",1
,"Drawable Resources","Inset Drawable","<h2 id="Inset">Inset Drawable</h2> 
 <p>A drawable defined in XML that insets another drawable by a specified distance. This is useful when a View needs a background that is smaller than the View's actual bounds.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/InsetDrawable.html">InsetDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#inset-element">inset</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/<i>drawable_resource</i>&quot;
    android:insetTop=&quot;<i>dimension</i>&quot;
    android:insetRight=&quot;<i>dimension</i>&quot;
    android:insetBottom=&quot;<i>dimension</i>&quot;
    android:insetLeft=&quot;<i>dimension</i>&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="inset-element">
     <code>&lt;inset&gt;</code>
    </dt> 
    <dd>
     Defines the inset drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:drawable</code>
      </dt> 
      <dd>
       <em>Drawable resource</em>. 
       <strong>Required</strong>. Reference to a drawable resource to be inset.
      </dd> 
      <dt>
       <code>android:insetTop</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The top inset, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>
      </dd> 
      <dt>
       <code>android:insetRight</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The right inset, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>
      </dd> 
      <dt>
       <code>android:insetBottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The bottom inset, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>
      </dd> 
      <dt>
       <code>android:insetLeft</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The left inset, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <dt>
   example:
  </dt> 
  <dd> 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;inset xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:drawable=&quot;@drawable/background&quot;
    android:insetTop=&quot;10dp&quot;
    android:insetLeft=&quot;10dp&quot; /&gt;
</pre> 
  </dd> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/InsetDrawable.html">InsetDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
 ","InsetDrawable","android.graphics.drawable.InsetDrawable","class",1
,"Drawable Resources","Shape Drawable","<h2 id="Shape">Shape Drawable</h2> 
 <p>This is a generic shape defined in XML.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/drawable/<em>filename</em>.xml</code>
   <br /> The filename is used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/graphics/drawable/GradientDrawable.html">GradientDrawable</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.drawable.<em>filename</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]drawable/<em>filename</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#shape-element">shape</a>
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=[&quot;rectangle&quot; | &quot;oval&quot; | &quot;line&quot; | &quot;ring&quot;] &gt;
    &lt;<a href="#corners-element">corners</a>
        android:radius=&quot;<em>integer</em>&quot;
        android:topLeftRadius=&quot;<em>integer</em>&quot;
        android:topRightRadius=&quot;<em>integer</em>&quot;
        android:bottomLeftRadius=&quot;<em>integer</em>&quot;
        android:bottomRightRadius=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#gradient-element">gradient</a>
        android:angle=&quot;<em>integer</em>&quot;
        android:centerX=&quot;<em>integer</em>&quot;
        android:centerY=&quot;<em>integer</em>&quot;
        android:centerColor=&quot;<em>integer</em>&quot;
        android:endColor=&quot;<em>color</em>&quot;
        android:gradientRadius=&quot;<em>integer</em>&quot;
        android:startColor=&quot;<em>color</em>&quot;
        android:type=[&quot;linear&quot; | &quot;radial&quot; | &quot;sweep&quot;]
        android:useLevel=[&quot;true&quot; | &quot;false&quot;] /&gt;
    &lt;<a href="#padding-element">padding</a>
        android:left=&quot;<em>integer</em>&quot;
        android:top=&quot;<em>integer</em>&quot;
        android:right=&quot;<em>integer</em>&quot;
        android:bottom=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#size-element">size</a>
        android:width=&quot;<em>integer</em>&quot;
        android:height=&quot;<em>integer</em>&quot; /&gt;
    &lt;<a href="#solid-element">solid</a>
        android:color=&quot;<em>color</em>&quot; /&gt;
    &lt;<a href="#stroke-element">stroke</a>
        android:width=&quot;<em>integer</em>&quot;
        android:color=&quot;<em>color</em>&quot;
        android:dashWidth=&quot;<em>integer</em>&quot;
        android:dashGap=&quot;<em>integer</em>&quot; /&gt;
&lt;/shape&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="shape-element">
     <code>&lt;shape&gt;</code>
    </dt> 
    <dd>
     The shape drawable. This must be the root element. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>xmlns:android</code>
      </dt> 
      <dd>
       <em>String</em>. 
       <strong>Required.</strong> Defines the XML namespace, which must be 
       <code>&quot;http://schemas.android.com/apk/res/android&quot;</code>. 
      </dd>
      <dt>
       <code>android:shape</code>
      </dt> 
      <dd>
       <em>Keyword</em>. Defines the type of shape. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Desciption</th>
         </tr> 
         <tr>
          <td><code>&quot;rectangle&quot;</code></td> 
          <td>A rectangle that fills the containing View. This is the default shape.</td>
         </tr> 
         <tr>
          <td><code>&quot;oval&quot;</code></td> 
          <td>An oval shape that fits the dimensions of the containing View.</td>
         </tr> 
         <tr>
          <td><code>&quot;line&quot;</code></td> 
          <td>A horizontal line that spans the width of the containing View. This shape requires the <code>&lt;stroke&gt;</code> element to define the width of the line.</td>
         </tr> 
         <tr>
          <td><code>&quot;ring&quot;</code></td> 
          <td>A ring shape.</td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
     </dl> 
     <p>The following attributes are used only when <code>android:shape=&quot;ring&quot;</code>:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:innerRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the inner part of the ring (the hole in the middle), as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:innerRadiusRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the inner part of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:innerRadiusRatio=&quot;5&quot;</code>, then the inner radius equals the ring's width divided by 5. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 9.
      </dd> 
      <dt>
       <code>android:thickness</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the ring, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:thicknessRatio</code>
      </dt> 
      <dd>
       <em>Float</em>. The thickness of the ring, expressed as a ratio of the ring's width. For instance, if 
       <code>android:thicknessRatio=&quot;2&quot;</code>, then the thickness equals the ring's width divided by 2. This value is overridden by 
       <code>android:innerRadius</code>. Default value is 3.
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>. This should normally be &quot;false&quot; or your shape may not appear.
      </dd> 
     </dl> 
    </dd>
    <dt id="corners-element">
     <code>&lt;corners&gt;</code>
    </dt> 
    <dd>
     Creates rounded corners for the shape. Applies only when the shape is a rectangle. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:radius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for all corners, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. This is overridden for each corner by the following attributes.
      </dd> 
      <dt>
       <code>android:topLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:topRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the top-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomLeftRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-left corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottomRightRadius</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The radius for the bottom-right corner, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> Every corner must (initially) be provided a corner radius greater than 1, or else no corners are rounded. If you want specific corners to <em>not</em> be rounded, a work-around is to use <code>android:radius</code> to set a default corner radius greater than 1, but then override each and every corner with the values you really want, providing zero (&quot;0dp&quot;) where you don't want rounded corners.</p> 
    </dd> 
    <dt id="gradient-element">
     <code>&lt;gradient&gt;</code>
    </dt> 
    <dd>
     Specifies a gradient color for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:angle</code>
      </dt> 
      <dd>
       <em>Integer</em>. The angle for the gradient, in degrees. 0 is left to right, 90 is bottom to top. It must be a multiple of 45. Default is 0.
      </dd> 
      <dt>
       <code>android:centerX</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative X-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerY</code>
      </dt> 
      <dd>
       <em>Float</em>. The relative Y-position for the center of the gradient (0 - 1.0).
      </dd> 
      <dt>
       <code>android:centerColor</code>
      </dt> 
      <dd>
       <em>Color</em>. Optional color that comes between the start and end colors, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:endColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The ending color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:gradientRadius</code>
      </dt> 
      <dd>
       <em>Float</em>. The radius for the gradient. Only applied when 
       <code>android:type=&quot;radial&quot;</code>.
      </dd> 
      <dt>
       <code>android:startColor</code>
      </dt> 
      <dd>
       <em>Color</em>. The starting color, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:type</code>
      </dt> 
      <dd>
       <em>Keyword</em>. The type of gradient pattern to apply. Valid values are: 
       <table> 
        <tbody>
         <tr>
          <th>Value</th>
          <th>Description</th>
         </tr> 
         <tr>
          <td><code>&quot;linear&quot;</code></td> 
          <td>A linear gradient. This is the default.</td>
         </tr> 
         <tr>
          <td><code>&quot;radial&quot;</code></td> 
          <td>A radial gradient. The start color is the center color.</td>
         </tr> 
         <tr>
          <td><code>&quot;sweep&quot;</code></td> 
          <td>A sweeping line gradient. </td>
         </tr> 
        </tbody>
       </table> 
      </dd> 
      <dt>
       <code>android:useLevel</code>
      </dt> 
      <dd>
       <em>Boolean</em>. &quot;true&quot; if this is used as a 
       <code><a href="../../../reference/android/graphics/drawable/LevelListDrawable.html">LevelListDrawable</a></code>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="padding-element">
     <code>&lt;padding&gt;</code>
    </dt> 
    <dd>
     Padding to apply to the containing View element (this pads the position of the View content, not the shape). 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:left</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Left padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:top</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Top padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:right</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Right padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:bottom</code>
      </dt> 
      <dd>
       <em>Dimension</em>. Bottom padding, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="size-element">
     <code>&lt;size&gt;</code>
    </dt> 
    <dd>
     The size of the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:height</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The height of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The width of the shape, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
     </dl> 
     <p class="note"><strong>Note:</strong> The shape scales to the size of the container View proportionate to the dimensions defined here, by default. When you use the shape in an <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>, you can restrict scaling by setting the <a href="../../../reference/android/widget/ImageView.html#attr_android:scaleType"><code>android:scaleType</code></a> to <code>&quot;center&quot;</code>.</p> 
    </dd> 
    <dt id="solid-element">
     <code>&lt;solid&gt;</code>
    </dt> 
    <dd>
     A solid color to fill the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color to apply to the shape, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
     </dl> 
    </dd> 
    <dt id="stroke-element">
     <code>&lt;stroke&gt;</code>
    </dt> 
    <dd>
     A stroke line for the shape. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:width</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The thickness of the line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>.
      </dd> 
      <dt>
       <code>android:color</code>
      </dt> 
      <dd>
       <em>Color</em>. The color of the line, as a hexadecimal value or 
       <a href="more-resources.html#Color">color resource</a>.
      </dd> 
      <dt>
       <code>android:dashGap</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The distance between line dashes, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashWidth</code> is set.
      </dd> 
      <dt>
       <code>android:dashWidth</code>
      </dt> 
      <dd>
       <em>Dimension</em>. The size of each dash line, as a dimension value or 
       <a href="more-resources.html#Dimension">dimension resource</a>. Only valid if 
       <code>android:dashGap</code> is set.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/drawable/gradient_box.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:shape=&quot;rectangle&quot;&gt;
    &lt;gradient
        android:startColor=&quot;#FFFF0000&quot;
        android:endColor=&quot;#80FF00FF&quot;
        android:angle=&quot;45&quot;/&gt;
    &lt;padding android:left=&quot;7dp&quot;
        android:top=&quot;7dp&quot;
        android:right=&quot;7dp&quot;
        android:bottom=&quot;7dp&quot; /&gt;
    &lt;corners android:radius=&quot;8dp&quot; /&gt;
&lt;/shape&gt;
</pre> 
   <p>This layout XML applies the shape drawable to a View:</p> 
   <pre>
&lt;TextView
    android:background=&quot;@drawable/gradient_box&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_width=&quot;wrap_content&quot; /&gt;
</pre> 
   <p>This application code gets the shape drawable and applies it to a View:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
Drawable shape = res. <code><a href="../../../reference/android/content/res/Resources.html#getDrawable(int)">getDrawable</a></code>(R.drawable.gradient_box);

TextView tv = (TextView)findViewByID(R.id.textview);
tv.setBackground(shape);
</pre> 
  </dd> 
  <!-- end example --> 
  <dt>
   see also:
  </dt> 
  <dd> 
   <ul> 
    <li><code><a href="../../../reference/android/graphics/drawable/ShapeDrawable.html">ShapeDrawable</a></code></li> 
   </ul> 
  </dd> 
 </dl> 
</div> 
","GradientDrawable","android.graphics.drawable.GradientDrawable","class",0
,"More Resource Types","More Resource Types","<p>This page defines more types of resources you can externalize, including:</p> 
 <dl> 
  <dt>
   <a href="#Bool">Bool</a>
  </dt> 
  <dd>
   XML resource that carries a boolean value.
  </dd> 
  <dt>
   <a href="#Color">Color</a>
  </dt> 
  <dd>
   XML resource that carries a color value (a hexadecimal color).
  </dd> 
  <dt>
   <a href="#Dimension">Dimension</a>
  </dt> 
  <dd>
   XML resource that carries a dimension value (with a unit of measure).
  </dd> 
  <dt>
   <a href="#Id">ID</a>
  </dt> 
  <dd>
   XML resource that provides a unique identifier for application resources and components.
  </dd> 
  <dt>
   <a href="#Integer">Integer</a>
  </dt> 
  <dd>
   XML resource that carries an integer value.
  </dd> 
  <dt>
   <a href="#IntegerArray">Integer Array</a>
  </dt> 
  <dd>
   XML resource that provides an array of integers.
  </dd> 
  <dt>
   <a href="#TypedArray">Typed Array</a>
  </dt> 
  <dd>
   XML resource that provides a 
   <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code> (which you can use for an array of drawables).
  </dd> 
 </dl> 
 ","TypedArray","android.content.res.TypedArray","class",1
,"More Resource Types","Typed Array","<h2 id="TypedArray">Typed Array</h2> 
 <p>A <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code> defined in XML. You can use this to create an array of other resources, such as drawables. Note that the array is not required to be homogeneous, so you can create an array of mixed resource types, but you must be aware of what and where the data types are in the array so that you can properly obtain each item with the <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>'s <code>get...()</code> methods.</p> 
 <p class="note"><strong>Note:</strong> A typed array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine typed array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/android/content/res/TypedArray.html">TypedArray</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>array_name</em></code>
   <br /> In XML: 
   <code>@[<em>package</em>:]array.<em>array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#array-resources-element">resources</a>&gt;
    &lt;<a href="#array-element">array</a>
        name=&quot;<em>integer_array_name</em>&quot;&gt;
        &lt;<a href="#array-item-element">item</a>&gt;<em>resource</em>&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="array-element">
     <code>&lt;array&gt;</code>
    </dt> 
    <dd>
     Defines an array. Contains one or more child 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>android:name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A generic resource. The value can be a reference to a resource or a simple data type. Must be a child of an 
     <code>&lt;array&gt;</code> element. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/arrays.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;array name=&quot;icons&quot;&gt;
        &lt;item&gt;@drawable/home&lt;/item&gt;
        &lt;item&gt;@drawable/settings&lt;/item&gt;
        &lt;item&gt;@drawable/logout&lt;/item&gt;
    &lt;/array&gt;
    &lt;array name=&quot;colors&quot;&gt;
        &lt;item&gt;#FFFF0000&lt;/item&gt;
        &lt;item&gt;#FF00FF00&lt;/item&gt;
        &lt;item&gt;#FF0000FF&lt;/item&gt;
    &lt;/array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves each array and then obtains the first entry in each array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
TypedArray icons = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.icons);
Drawable drawable = icons.<code><a href="../../../reference/android/content/res/TypedArray.html#getDrawable(int)">getDrawable</a></code>(0);

TypedArray colors = res.<code><a href="../../../reference/android/content/res/Resources.html#obtainTypedArray(int)">obtainTypedArray</a></code>(R.array.colors);
int color = colors.<code><a href="../../../reference/android/content/res/TypedArray.html#getColor(int, int)">getColor</a></code>(0,0);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 <!-- TODO


","TypedArray","android.content.res.TypedArray","class",1
,"More Resource Types","Styleable Attribute","<h2>Styleable Attribute</h2>


<dl class="xml">

<dt>syntax:</dt>
<dd>
<pre class="stx">
</pre>
</dd>

<dt>file location:</dt>
<dd><code>res/</code></dd>

<dt>compiled resource datatype:</dt>
<dd>Resource pointer to a <code><a href="../../../reference/android/view/Menu.html">Menu</a></code> (or subclass) resource.</dd>

<dt>resource reference:</dt>
<dd>Java: <code>R.</code><br/>
    XML:
</dd>

<dt>elements and attributes:</dt>
<dd>
<dl class="attr">

  <dt><code></code></dt>
    <dd></dd>
  <dt><code></code></dt>
    <dd>Valid attributes:
      <dl>
        <dt><code></code></dt>
        <dd>
        </dd>
        <dt><code></code></dt>
        <dd>
        </dd>
      </dl>
    </dd>

</dl>
</dd> 

<dt>example:</dt>
<dd>
  <dl>

    <dt>XML file saved at <code>res/</code>:</dt>
    <dd>
<pre>

</pre>
    </dd>

    <dt>Java code :</dt>
    <dd>
<pre>

</pre>
    </dd>

  </dl>
</dd> 


<dt>see also:</dt>
<dd>
<ul>
  <li></li>
</ul>
</dd>

</dl>






--> 
</div> 
","Menu","android.view.Menu","class",1
,"Providing Resources","Grouping Resource Types","<h2 id="ResourceTypes">Grouping Resource Types</h2> 
 <p>You should place each type of resource in a specific subdirectory of your project's <code>res/</code> directory. For example, here's the file hierarchy for a simple project:</p> 
 <pre class="classic no-pretty-print">
MyProject/
    src/  <span style="color:black">
        MyActivity.java  </span>
    res/
        drawable/  <span style="color:black">
            icon.png  </span>
        layout/  <span style="color:black">
            main.xml
            info.xml</span>
        values/  <span style="color:black">
            strings.xml  </span>
</pre> 
 <p>As you can see in this example, the <code>res/</code> directory contains all the resources (in subdirectories): an image resource, two layout resources, and a string resource file. The resource directory names are important and are described in table 1.</p> 
 <p class="table-caption" id="table1"><strong>Table 1.</strong> Resource directories supported inside project <code>res/</code> directory.</p> 
 <table> 
  <tbody>
   <tr> 
    <th scope="col">Directory</th> 
    <th scope="col">Resource Type</th> 
   </tr> 
   <tr> 
    <td><code>animator/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/prop-animation.html">property animations</a>.</td> 
   </tr> 
   <tr> 
    <td><code>anim/</code></td> 
    <td>XML files that define <a href="../../../guide/topics/graphics/view-animation.html#tween-animation">tween animations</a>. (Property animations can also be saved in this directory, but the <code>animator/</code> directory is preferred for property animations to distinguish between the two types.)</td> 
   </tr> 
   <tr> 
    <td><code>color/</code></td> 
    <td>XML files that define a state list of colors. See <a href="color-list-resource.html">Color State List Resource</a></td> 
   </tr> 
   <tr> 
    <td><code>drawable/</code></td> 
    <td><p>Bitmap files (<code>.png</code>, <code>.9.png</code>, <code>.jpg</code>, <code>.gif</code>) or XML files that are compiled into the following drawable resource subtypes:</p> 
     <ul> 
      <li>Bitmap files</li> 
      <li>Nine-Patches (re-sizable bitmaps)</li> 
      <li>State lists</li> 
      <li>Shapes</li> 
      <li>Animation drawables</li> 
      <li>Other drawables</li> 
     </ul> <p>See <a href="drawable-resource.html">Drawable Resources</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>layout/</code></td> 
    <td>XML files that define a user interface layout. See <a href="layout-resource.html">Layout Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>menu/</code></td> 
    <td>XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See <a href="menu-resource.html">Menu Resource</a>.</td> 
   </tr> 
   <tr> 
    <td><code>raw/</code></td> 
    <td><p>Arbitrary files to save in their raw form. To open these resources with a raw <code><a href="../../../reference/java/io/InputStream.html">InputStream</a></code>, call <code><a href="../../../reference/android/content/res/Resources.html#openRawResource(int)">Resources.openRawResource()</a></code> with the resource ID, which is <code>R.raw.<em>filename</em></code>.</p> <p>However, if you need access to original file names and file hierarchy, you might consider saving some resources in the <code>assets/</code> directory (instead of <code>res/raw/</code>). Files in <code>assets/</code> are not given a resource ID, so you can read them only using <code><a href="../../../reference/android/content/res/AssetManager.html">AssetManager</a></code>.</p></td> 
   </tr> 
   <tr> 
    <td><code>values/</code></td> 
    <td><p>XML files that contain simple values, such as strings, integers, and colors.</p> <p>Whereas XML resource files in other <code>res/</code> subdirectories define a single resource based on the XML filename, files in the <code>values/</code> directory describe multiple resources. For a file in this directory, each child of the <code>&lt;resources&gt;</code> element defines a single resource. For example, a <code>&lt;string&gt;</code> element creates an <code>R.string</code> resource and a <code>&lt;color&gt;</code> element creates an <code>R.color</code> resource.</p> <p>Because each resource is defined with its own XML element, you can name the file whatever you want and place different resource types in one file. However, for clarity, you might want to place unique resource types in different files. For example, here are some filename conventions for resources you can create in this directory:</p> 
     <ul> 
      <li>arrays.xml for resource arrays (<a href="more-resources.html#TypedArray">typed arrays</a>).</li> 
      <li>colors.xml for <a href="more-resources.html#Color">color values</a></li> 
      <li>dimens.xml for <a href="more-resources.html#Dimension">dimension values</a>.</li> 
      <li>strings.xml for <a href="string-resource.html">string values</a>.</li> 
      <li>styles.xml for <a href="style-resource.html">styles</a>.</li> 
     </ul> <p>See <a href="string-resource.html">String Resources</a>, <a href="style-resource.html">Style Resource</a>, and <a href="more-resources.html">More Resource Types</a>.</p> </td> 
   </tr> 
   <tr> 
    <td><code>xml/</code></td> 
    <td>Arbitrary XML files that can be read at runtime by calling <code><a href="../../../reference/android/content/res/Resources.html#getXml(int)">Resources.getXML()</a></code>. Various XML configuration files must be saved here, such as a <a href="../../../guide/topics/search/searchable-config.html">searchable configuration</a>. 
     <!-- or preferences configuration. --></td> 
   </tr> 
  </tbody>
 </table> 
 <p class="caution"><strong>Caution:</strong> Never save resource files directly inside the <code>res/</code> directory¡ªit will cause a compiler error.</p> 
 <p>For more information about certain types of resources, see the <a href="available-resources.html">Resource Types</a> documentation.</p> 
 <p>The resources that you save in the subdirectories defined in table 1 are your &quot;default&quot; resources. That is, these resources define the default design and content for your application. However, different types of Android-powered devices might call for different types of resources. For example, if a device has a larger than normal screen, then you should provide different layout resources that take advantage of the extra screen space. Or, if a device has a different language setting, then you should provide different string resources that translate the text in your user interface. To provide these different resources for different device configurations, you need to provide alternative resources, in addition to your default resources.</p> 
 ","InputStream","java.io.InputStream","class",0
,"Providing Resources","Providing Alternative Resources","<h2 id="AlternativeResources">Providing Alternative Resources</h2> 
 <div class="figure" style="width:429px"> 
  <img src="../../../images/resources/resource_devices_diagram2.png" height="167" alt="" /> 
  <p class="img-caption"> <strong>Figure 1.</strong> Two different devices, each using different layout resources.</p> 
 </div> 
 <p>Almost every application should provide alternative resources to support specific device configurations. For instance, you should include alternative drawable resources for different screen densities and alternative string resources for different languages. At runtime, Android detects the current device configuration and loads the appropriate resources for your application.</p> 
 <p>To specify configuration-specific alternatives for a set of resources:</p> 
 <ol> 
  <li>Create a new directory in <code>res/</code> named in the form <code><em>&lt;resources_name&gt;</em>-<em>&lt;config_qualifier&gt;</em></code>. 
   <ul> 
    <li><em><code>&lt;resources_name&gt;</code></em> is the directory name of the corresponding default resources (defined in table 1).</li> 
    <li><em><code>&lt;qualifier&gt;</code></em> is a name that specifies an individual configuration for which these resources are to be used (defined in table 2).</li> 
   </ul> <p>You can append more than one <em><code>&lt;qualifier&gt;</code></em>. Separate each one with a dash.</p> <p class="caution"><strong>Caution:</strong> When appending multiple qualifiers, you must place them in the same order in which they are listed in table 2. If the qualifiers are ordered wrong, the resources are ignored.</p> </li> 
  <li>Save the respective alternative resources in this new directory. The resource files must be named exactly the same as the default resource files.</li> 
 </ol> 
 <p>For example, here are some default and alternative resources:</p> 
 <pre class="classic no-pretty-print">
res/
    drawable/   <span style="color:black">
        icon.png
        background.png    </span>
    drawable-hdpi/  <span style="color:black">
        icon.png
        background.png  </span>
</pre> 
 <p>The <code>hdpi</code> qualifier indicates that the resources in that directory are for devices with a high-density screen. The images in each of these drawable directories are sized for a specific screen density, but the filenames are exactly the same. This way, the resource ID that you use to reference the <code>icon.png</code> or <code>background.png</code> image is always the same, but Android selects the version of each resource that best matches the current device, by comparing the device configuration information with the qualifiers in the resource directory name.</p> 
 <p>Android supports several configuration qualifiers and you can add multiple qualifiers to one directory name, by separating each qualifier with a dash. Table 2 lists the valid configuration qualifiers, in order of precedence¡ªif you use multiple qualifiers for a resource directory, you must add them to the directory name in the order they are listed in the table.</p> 
 <p class="table-caption" id="table2"><strong>Table 2.</strong> Configuration qualifier names.</p> 
 <table> 
  <tbody>
   <tr> 
    <th>Configuration</th> 
    <th>Qualifier Values</th> 
    <th>Description</th> 
   </tr> 
   <tr id="MccQualifier"> 
    <td>MCC and MNC</td> 
    <td>Examples:<br /> <code>mcc310</code><br /> <code>
      <nobr>
       mcc310-mnc004
      </nobr></code><br /> <code>mcc208-mnc00</code><br /> etc. </td> 
    <td> <p>The mobile country code (MCC), optionally followed by mobile network code (MNC) from the SIM card in the device. For example, <code>mcc310</code> is U.S. on any carrier, <code>mcc310-mnc004</code> is U.S. on Verizon, and <code>mcc208-mnc00</code> is France on Orange.</p> <p>If the device uses a radio connection (GSM phone), the MCC and MNC values come from the SIM card.</p> <p>You can also use the MCC alone (for example, to include country-specific legal resources in your application). If you need to specify based on the language only, then use the <em>language and region</em> qualifier instead (discussed next). If you decide to use the MCC and MNC qualifier, you should do so with care and test that it works as expected.</p> <p>Also see the configuration fields <code><a href="../../../reference/android/content/res/Configuration.html#mcc">mcc</a></code>, and <code><a href="../../../reference/android/content/res/Configuration.html#mnc">mnc</a></code>, which indicate the current mobile country code and mobile network code, respectively.</p> </td> 
   </tr> 
   <tr id="LocaleQualifier"> 
    <td>Language and region</td> 
    <td>Examples:<br /> <code>en</code><br /> <code>fr</code><br /> <code>en-rUS</code><br /> <code>fr-rFR</code><br /> <code>fr-rCA</code><br /> etc. </td> 
    <td><p>The language is defined by a two-letter <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php">ISO 639-1</a> language code, optionally followed by a two letter <a href="http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html">ISO 3166-1-alpha-2</a> region code (preceded by lowercase &quot;<code>r</code>&quot;). </p><p> The codes are <em>not</em> case-sensitive; the <code>r</code> prefix is used to distinguish the region portion. You cannot specify a region alone.</p> <p>This can change during the life of your application if the user changes his or her language in the system settings. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this can affect your application during runtime.</p> <p>See <a href="localization.html">Localization</a> for a complete guide to localizing your application for other languages.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#locale">locale</a></code> configuration field, which indicates the current locale.</p> </td> 
   </tr> 
   <tr id="LayoutDirectionQualifier"> 
    <td>Layout Direction</td> 
    <td><code>ldrtl</code><br /> <code>ldltr</code><br /> </td> 
    <td><p>The layout direction of your application. <code>ldrtl</code> means &quot;layout-direction-right-to-left&quot;. <code>ldltr</code> means &quot;layout-direction-left-to-right&quot; and is the default implicit value. </p> <p>This can apply to any resource such as layouts, drawables, or values. </p> <p>For example, if you want to provide some specific layout for the Arabic language and some generic layout for any other &quot;right-to-left&quot; language (like Persian or Hebrew) then you would have: </p> <pre class="classic no-pretty-print">
res/
    layout/   <span style="color:black">
        main.xml  </span>(Default layout)
    layout-ar/  <span style="color:black">
        main.xml  </span>(Specific layout for Arabic)
    layout-ldrtl/  <span style="color:black">
        main.xml  </span>(Any &quot;right-to-left&quot; language, except
                  for Arabic, because the &quot;ar&quot; language qualifier
                  has a higher precedence.)
</pre> <p class="note"><strong>Note:</strong> To enable right-to-left layout features for your app, you must set <a href="../../../guide/topics/manifest/application-element.html#supportsrtl"><code>supportsRtl</code></a> to <code>&quot;true&quot;</code> and set <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> to 17 or higher.</p> <p><em>Added in API level 17.</em></p> </td> 
   </tr> 
   <tr id="SmallestScreenWidthQualifier"> 
    <td>smallestWidth</td> 
    <td><code>sw&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>sw320dp</code><br /> <code>sw600dp</code><br /> <code>sw720dp</code><br /> etc. </td> 
    <td> <p>The fundamental size of a screen, as indicated by the shortest dimension of the available screen area. Specifically, the device's smallestWidth is the shortest of the screen's available height and width (you may also think of it as the &quot;smallest possible width&quot; for the screen). You can use this qualifier to ensure that, regardless of the screen's current orientation, your application has at least <code>&lt;N&gt;</code> dps of width available for its UI.</p> <p>For example, if your layout requires that its smallest dimension of screen area be at least 600 dp at all times, then you can use this qualifer to create the layout resources, <code>res/layout-sw600dp/</code>. The system will use these resources only when the smallest dimension of available screen is at least 600dp, regardless of whether the 600dp side is the user-perceived height or width. The smallestWidth is a fixed screen size characteristic of the device; <strong>the device's smallestWidth does not change when the screen's orientation changes</strong>.</p> <p>The smallestWidth of a device takes into account screen decorations and system UI. For example, if the device has some persistent UI elements on the screen that account for space along the axis of the smallestWidth, the system declares the smallestWidth to be smaller than the actual screen size, because those are screen pixels not available for your UI. Thus, the value you use should be the actual smallest dimension <em>required by your layout</em> (usually, this value is the &quot;smallest width&quot; that your layout supports, regardless of the screen's current orientation).</p> <p>Some values you might use here for common screen sizes:</p> 
     <ul> 
      <li>320, for devices with screen configurations such as: 
       <ul> 
        <li>240x320 ldpi (QVGA handset)</li> 
        <li>320x480 mdpi (handset)</li> 
        <li>480x800 hdpi (high density handset)</li> 
       </ul> </li> 
      <li>480, for screens such as 480x800 mdpi (tablet/handset).</li> 
      <li>600, for screens such as 600x1024 mdpi (7&quot; tablet).</li> 
      <li>720, for screens such as 720x1280 mdpi (10&quot; tablet).</li> 
     </ul> <p>When your application provides multiple resource directories with different values for the smallestWidth qualifier, the system uses the one closest to (without exceeding) the device's smallestWidth. </p> <p><em>Added in API level 13.</em></p> <p>Also see the <a href="../../../guide/topics/manifest/supports-screens-element.html#requiresSmallest"><code>android:requiresSmallestWidthDp</code></a> attribute, which declares the minimum smallestWidth with which your application is compatible, and the <code><a href="../../../reference/android/content/res/Configuration.html#smallestScreenWidthDp">smallestScreenWidthDp</a></code> configuration field, which holds the device's smallestWidth value.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenWidthQualifier"> 
    <td>Available width</td> 
    <td><code>w&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>w720dp</code><br /> <code>w1024dp</code><br /> etc. </td> 
    <td> <p>Specifies a minimum available screen width, in <code>dp</code> units at which the resource should be used¡ªdefined by the <code>&lt;N&gt;</code> value. This configuration value will change when the orientation changes between landscape and portrait to match the current actual width.</p> <p>When your application provides multiple resource directories with different values for this configuration, the system uses the one closest to (without exceeding) the device's current screen width. The value here takes into account screen decorations, so if the device has some persistent UI elements on the left or right edge of the display, it uses a value for the width that is smaller than the real screen size, accounting for these UI elements and reducing the application's available space.</p> <p><em>Added in API level 13.</em></p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenWidthDp">screenWidthDp</a></code> configuration field, which holds the current screen width.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenHeightQualifier"> 
    <td>Available height</td> 
    <td><code>h&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>h720dp</code><br /> <code>h1024dp</code><br /> etc. </td> 
    <td> <p>Specifies a minimum available screen height, in &quot;dp&quot; units at which the resource should be used¡ªdefined by the <code>&lt;N&gt;</code> value. This configuration value will change when the orientation changes between landscape and portrait to match the current actual height.</p> <p>When your application provides multiple resource directories with different values for this configuration, the system uses the one closest to (without exceeding) the device's current screen height. The value here takes into account screen decorations, so if the device has some persistent UI elements on the top or bottom edge of the display, it uses a value for the height that is smaller than the real screen size, accounting for these UI elements and reducing the application's available space. Screen decorations that are not fixed (such as a phone status bar that can be hidden when full screen) are <em>not</em> accounted for here, nor are window decorations like the title bar or action bar, so applications must be prepared to deal with a somewhat smaller space than they specify. </p><p><em>Added in API level 13.</em></p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenHeightDp">screenHeightDp</a></code> configuration field, which holds the current screen width.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenSizeQualifier"> 
    <td>Screen size</td> 
    <td> <code>small</code><br /> <code>normal</code><br /> <code>large</code><br /> <code>xlarge</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>small</code>: Screens that are of similar size to a low-density QVGA screen. The minimum layout size for a small screen is approximately 320x426 dp units. Examples are QVGA low density and VGA high density.</li> 
      <li><code>normal</code>: Screens that are of similar size to a medium-density HVGA screen. The minimum layout size for a normal screen is approximately 320x470 dp units. Examples of such screens a WQVGA low density, HVGA medium density, WVGA high density.</li> 
      <li><code>large</code>: Screens that are of similar size to a medium-density VGA screen. The minimum layout size for a large screen is approximately 480x640 dp units. Examples are VGA and WVGA medium density screens.</li> 
      <li><code>xlarge</code>: Screens that are considerably larger than the traditional medium-density HVGA screen. The minimum layout size for an xlarge screen is approximately 720x960 dp units. In most cases, devices with extra large screens would be too large to carry in a pocket and would most likely be tablet-style devices. <em>Added in API level 9.</em></li> 
     </ul> <p class="note"><strong>Note:</strong> Using a size qualifier does not imply that the resources are <em>only</em> for screens of that size. If you do not provide alternative resources with qualifiers that better match the current device configuration, the system may use whichever resources are the <a href="#BestMatch">best match</a>.</p> <p class="caution"><strong>Caution:</strong> If all your resources use a size qualifier that is <em>larger</em> than the current screen, the system will <strong>not</strong> use them and your application will crash at runtime (for example, if all layout resources are tagged with the <code>xlarge</code> qualifier, but the device is a normal-size screen).</p> <p><em>Added in API level 4.</em></p> <p>See <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> for more information.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenLayout">screenLayout</a></code> configuration field, which indicates whether the screen is small, normal, or large.</p> </td> 
   </tr> 
   <tr id="ScreenAspectQualifier"> 
    <td>Screen aspect</td> 
    <td> <code>long</code><br /> <code>notlong</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>long</code>: Long screens, such as WQVGA, WVGA, FWVGA</li> 
      <li><code>notlong</code>: Not long screens, such as QVGA, HVGA, and VGA</li> 
     </ul> <p><em>Added in API level 4.</em></p> <p>This is based purely on the aspect ratio of the screen (a &quot;long&quot; screen is wider). This is not related to the screen orientation.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenLayout">screenLayout</a></code> configuration field, which indicates whether the screen is long.</p> </td> 
   </tr> 
   <tr id="OrientationQualifier"> 
    <td>Screen orientation</td> 
    <td> <code>port</code><br /> <code>land</code> 
     <!-- <br/>
        <code>square</code>  --> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>port</code>: Device is in portrait orientation (vertical)</li> 
      <li><code>land</code>: Device is in landscape orientation (horizontal)</li> 
      <!-- Square mode is currently not used. --> 
     </ul> <p>This can change during the life of your application if the user rotates the screen. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#orientation">orientation</a></code> configuration field, which indicates the current device orientation.</p> </td> 
   </tr> 
   <tr id="UiModeQualifier"> 
    <td>UI mode</td> 
    <td> <code>car</code><br /> <code>desk</code><br /> <code>television<br /> <code>appliance</code> </code></td> 
    <td> 
     <ul class="nolist"> 
      <li><code>car</code>: Device is displaying in a car dock</li> 
      <li><code>desk</code>: Device is displaying in a desk dock</li> 
      <li><code>television</code>: Device is displaying on a television, providing a &quot;ten foot&quot; experience where its UI is on a large screen that the user is far away from, primarily oriented around DPAD or other non-pointer interaction</li> 
      <li><code>appliance</code>: Device is serving as an appliance, with no display</li> 
     </ul> <p><em>Added in API level 8, television added in API 13.</em></p> <p>For information about how your app can respond when the device is inserted into or removed from a dock, read <a href="../../../training/monitoring-device-state/docking-monitoring.html">Determining and Monitoring the Docking State and Type</a>.</p> <p>This can change during the life of your application if the user places the device in a dock. You can enable or disable some of these modes using <code><a href="../../../reference/android/app/UiModeManager.html">UiModeManager</a></code>. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> </td> 
   </tr> 
   <tr id="NightQualifier"> 
    <td>Night mode</td> 
    <td> <code>night</code><br /> <code>notnight</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>night</code>: Night time</li> 
      <li><code>notnight</code>: Day time</li> 
     </ul> <p><em>Added in API level 8.</em></p> <p>This can change during the life of your application if night mode is left in auto mode (default), in which case the mode changes based on the time of day. You can enable or disable this mode using <code><a href="../../../reference/android/app/UiModeManager.html">UiModeManager</a></code>. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> </td> 
   </tr> 
   <tr id="DensityQualifier"> 
    <td>Screen pixel density (dpi)</td> 
    <td> <code>ldpi</code><br /> <code>mdpi</code><br /> <code>hdpi</code><br /> <code>xhdpi</code><br /> <code>nodpi</code><br /> <code>tvdpi</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>ldpi</code>: Low-density screens; approximately 120dpi.</li> 
      <li><code>mdpi</code>: Medium-density (on traditional HVGA) screens; approximately 160dpi.</li> 
      <li><code>hdpi</code>: High-density screens; approximately 240dpi.</li> 
      <li><code>xhdpi</code>: Extra high-density screens; approximately 320dpi. <em>Added in API Level 8</em></li> 
      <li><code>nodpi</code>: This can be used for bitmap resources that you do not want to be scaled to match the device density.</li> 
      <li><code>tvdpi</code>: Screens somewhere between mdpi and hdpi; approximately 213dpi. This is not considered a &quot;primary&quot; density group. It is mostly intended for televisions and most apps shouldn't need it¡ªproviding mdpi and hdpi resources is sufficient for most apps and the system will scale them as appropriate. This qualifier was introduced with API level 13.</li> 
     </ul> <p>There is a 3:4:6:8 scaling ratio between the four primary densities (ignoring the tvdpi density). So, a 9x9 bitmap in ldpi is 12x12 in mdpi, 18x18 in hdpi and 24x24 in xhdpi.</p> <p>If you decide that your image resources don't look good enough on a television or other certain devices and want to try tvdpi resources, the scaling factor is 1.33*mdpi. For example, a 100px x 100px image for mdpi screens should be 133px x 133px for tvdpi.</p> <p class="note"><strong>Note:</strong> Using a density qualifier does not imply that the resources are <em>only</em> for screens of that density. If you do not provide alternative resources with qualifiers that better match the current device configuration, the system may use whichever resources are the <a href="#BestMatch">best match</a>.</p> <p>See <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> for more information about how to handle different screen densities and how Android might scale your bitmaps to fit the current density.</p> </td> 
   </tr> 
   <tr id="TouchscreenQualifier"> 
    <td>Touchscreen type</td> 
    <td> <code>notouch</code><br /> <code>finger</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>notouch</code>: Device does not have a touchscreen.</li> 
      <li><code>finger</code>: Device has a touchscreen that is intended to be used through direction interaction of the user's finger.</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#touchscreen">touchscreen</a></code> configuration field, which indicates the type of touchscreen on the device.</p> </td> 
   </tr> 
   <tr id="KeyboardAvailQualifier"> 
    <td>Keyboard availability</td> 
    <td> <code>keysexposed</code><br /> <code>keyshidden</code><br /> <code>keyssoft</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>keysexposed</code>: Device has a keyboard available. If the device has a software keyboard enabled (which is likely), this may be used even when the hardware keyboard is <em>not</em> exposed to the user, even if the device has no hardware keyboard. If no software keyboard is provided or it's disabled, then this is only used when a hardware keyboard is exposed.</li> 
      <li><code>keyshidden</code>: Device has a hardware keyboard available but it is hidden <em>and</em> the device does <em>not</em> have a software keyboard enabled.</li> 
      <li><code>keyssoft</code>: Device has a software keyboard enabled, whether it's visible or not.</li> 
     </ul> <p>If you provide <code>keysexposed</code> resources, but not <code>keyssoft</code> resources, the system uses the <code>keysexposed</code> resources regardless of whether a keyboard is visible, as long as the system has a software keyboard enabled.</p> <p>This can change during the life of your application if the user opens a hardware keyboard. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the configuration fields <code><a href="../../../reference/android/content/res/Configuration.html#hardKeyboardHidden">hardKeyboardHidden</a></code> and <code><a href="../../../reference/android/content/res/Configuration.html#keyboardHidden">keyboardHidden</a></code>, which indicate the visibility of a hardware keyboard and and the visibility of any kind of keyboard (including software), respectively.</p> </td> 
   </tr> 
   <tr id="ImeQualifier"> 
    <td>Primary text input method</td> 
    <td> <code>nokeys</code><br /> <code>qwerty</code><br /> <code>12key</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>nokeys</code>: Device has no hardware keys for text input.</li> 
      <li><code>qwerty</code>: Device has a hardware qwerty keyboard, whether it's visible to the user or not.</li> 
      <li><code>12key</code>: Device has a hardware 12-key keyboard, whether it's visible to the user or not.</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#keyboard">keyboard</a></code> configuration field, which indicates the primary text input method available.</p> </td> 
   </tr> 
   <tr id="NavAvailQualifier"> 
    <td>Navigation key availability</td> 
    <td> <code>navexposed</code><br /> <code>navhidden</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>navexposed</code>: Navigation keys are available to the user.</li> 
      <li><code>navhidden</code>: Navigation keys are not available (such as behind a closed lid).</li> 
     </ul> <p>This can change during the life of your application if the user reveals the navigation keys. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#navigationHidden">navigationHidden</a></code> configuration field, which indicates whether navigation keys are hidden.</p> </td> 
   </tr> 
   <tr id="NavigationQualifier"> 
    <td>Primary non-touch navigation method</td> 
    <td> <code>nonav</code><br /> <code>dpad</code><br /> <code>trackball</code><br /> <code>wheel</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>nonav</code>: Device has no navigation facility other than using the touchscreen.</li> 
      <li><code>dpad</code>: Device has a directional-pad (d-pad) for navigation.</li> 
      <li><code>trackball</code>: Device has a trackball for navigation.</li> 
      <li><code>wheel</code>: Device has a directional wheel(s) for navigation (uncommon).</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#navigation">navigation</a></code> configuration field, which indicates the type of navigation method available.</p> </td> 
   </tr> 
   <!-- DEPRECATED
    <tr>
      <td>Screen dimensions</td>
      <td>Examples:<br/>
        <code>320x240</code><br/>
        <code>640x480</code><br/>
        etc.
      </td>
      <td>
        <p>The larger dimension must be specified first. <strong>This configuration is deprecated
and should not be used</strong>. Instead use "screen size," "wider/taller screens," and "screen
orientation" described above.</p>
      </td>
    </tr>
--> 
   <tr id="VersionQualifier"> 
    <td>Platform Version (API level)</td> 
    <td>Examples:<br /> <code>v3</code><br /> <code>v4</code><br /> <code>v7</code><br /> etc.</td> 
    <td> <p>The API level supported by the device. For example, <code>v1</code> for API level 1 (devices with Android 1.0 or higher) and <code>v4</code> for API level 4 (devices with Android 1.6 or higher). See the <a href="../../../guide/topics/manifest/uses-sdk-element.html#ApiLevels">Android API levels</a> document for more information about these values.</p> </td> 
   </tr> 
  </tbody>
 </table> 
 <p class="note"><strong>Note:</strong> Some configuration qualifiers have been added since Android 1.0, so not all versions of Android support all the qualifiers. Using a new qualifier implicitly adds the platform version qualifier so that older devices are sure to ignore it. For example, using a <code>w600dp</code> qualifier will automatically include the <code>v13</code> qualifier, because the available-width qualifier was new in API level 13. To avoid any issues, always include a set of default resources (a set of resources with <em>no qualifiers</em>). For more information, see the section about <a href="#Compatibility">Providing the Best Device Compatibility with Resources</a>.</p> 
 ","UiModeManager","android.app.UiModeManager","class",0
,"Providing Resources","Providing Alternative Resources","<h2 id="AlternativeResources">Providing Alternative Resources</h2> 
 <div class="figure" style="width:429px"> 
  <img src="../../../images/resources/resource_devices_diagram2.png" height="167" alt="" /> 
  <p class="img-caption"> <strong>Figure 1.</strong> Two different devices, each using different layout resources.</p> 
 </div> 
 <p>Almost every application should provide alternative resources to support specific device configurations. For instance, you should include alternative drawable resources for different screen densities and alternative string resources for different languages. At runtime, Android detects the current device configuration and loads the appropriate resources for your application.</p> 
 <p>To specify configuration-specific alternatives for a set of resources:</p> 
 <ol> 
  <li>Create a new directory in <code>res/</code> named in the form <code><em>&lt;resources_name&gt;</em>-<em>&lt;config_qualifier&gt;</em></code>. 
   <ul> 
    <li><em><code>&lt;resources_name&gt;</code></em> is the directory name of the corresponding default resources (defined in table 1).</li> 
    <li><em><code>&lt;qualifier&gt;</code></em> is a name that specifies an individual configuration for which these resources are to be used (defined in table 2).</li> 
   </ul> <p>You can append more than one <em><code>&lt;qualifier&gt;</code></em>. Separate each one with a dash.</p> <p class="caution"><strong>Caution:</strong> When appending multiple qualifiers, you must place them in the same order in which they are listed in table 2. If the qualifiers are ordered wrong, the resources are ignored.</p> </li> 
  <li>Save the respective alternative resources in this new directory. The resource files must be named exactly the same as the default resource files.</li> 
 </ol> 
 <p>For example, here are some default and alternative resources:</p> 
 <pre class="classic no-pretty-print">
res/
    drawable/   <span style="color:black">
        icon.png
        background.png    </span>
    drawable-hdpi/  <span style="color:black">
        icon.png
        background.png  </span>
</pre> 
 <p>The <code>hdpi</code> qualifier indicates that the resources in that directory are for devices with a high-density screen. The images in each of these drawable directories are sized for a specific screen density, but the filenames are exactly the same. This way, the resource ID that you use to reference the <code>icon.png</code> or <code>background.png</code> image is always the same, but Android selects the version of each resource that best matches the current device, by comparing the device configuration information with the qualifiers in the resource directory name.</p> 
 <p>Android supports several configuration qualifiers and you can add multiple qualifiers to one directory name, by separating each qualifier with a dash. Table 2 lists the valid configuration qualifiers, in order of precedence¡ªif you use multiple qualifiers for a resource directory, you must add them to the directory name in the order they are listed in the table.</p> 
 <p class="table-caption" id="table2"><strong>Table 2.</strong> Configuration qualifier names.</p> 
 <table> 
  <tbody>
   <tr> 
    <th>Configuration</th> 
    <th>Qualifier Values</th> 
    <th>Description</th> 
   </tr> 
   <tr id="MccQualifier"> 
    <td>MCC and MNC</td> 
    <td>Examples:<br /> <code>mcc310</code><br /> <code>
      <nobr>
       mcc310-mnc004
      </nobr></code><br /> <code>mcc208-mnc00</code><br /> etc. </td> 
    <td> <p>The mobile country code (MCC), optionally followed by mobile network code (MNC) from the SIM card in the device. For example, <code>mcc310</code> is U.S. on any carrier, <code>mcc310-mnc004</code> is U.S. on Verizon, and <code>mcc208-mnc00</code> is France on Orange.</p> <p>If the device uses a radio connection (GSM phone), the MCC and MNC values come from the SIM card.</p> <p>You can also use the MCC alone (for example, to include country-specific legal resources in your application). If you need to specify based on the language only, then use the <em>language and region</em> qualifier instead (discussed next). If you decide to use the MCC and MNC qualifier, you should do so with care and test that it works as expected.</p> <p>Also see the configuration fields <code><a href="../../../reference/android/content/res/Configuration.html#mcc">mcc</a></code>, and <code><a href="../../../reference/android/content/res/Configuration.html#mnc">mnc</a></code>, which indicate the current mobile country code and mobile network code, respectively.</p> </td> 
   </tr> 
   <tr id="LocaleQualifier"> 
    <td>Language and region</td> 
    <td>Examples:<br /> <code>en</code><br /> <code>fr</code><br /> <code>en-rUS</code><br /> <code>fr-rFR</code><br /> <code>fr-rCA</code><br /> etc. </td> 
    <td><p>The language is defined by a two-letter <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php">ISO 639-1</a> language code, optionally followed by a two letter <a href="http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html">ISO 3166-1-alpha-2</a> region code (preceded by lowercase &quot;<code>r</code>&quot;). </p><p> The codes are <em>not</em> case-sensitive; the <code>r</code> prefix is used to distinguish the region portion. You cannot specify a region alone.</p> <p>This can change during the life of your application if the user changes his or her language in the system settings. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this can affect your application during runtime.</p> <p>See <a href="localization.html">Localization</a> for a complete guide to localizing your application for other languages.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#locale">locale</a></code> configuration field, which indicates the current locale.</p> </td> 
   </tr> 
   <tr id="LayoutDirectionQualifier"> 
    <td>Layout Direction</td> 
    <td><code>ldrtl</code><br /> <code>ldltr</code><br /> </td> 
    <td><p>The layout direction of your application. <code>ldrtl</code> means &quot;layout-direction-right-to-left&quot;. <code>ldltr</code> means &quot;layout-direction-left-to-right&quot; and is the default implicit value. </p> <p>This can apply to any resource such as layouts, drawables, or values. </p> <p>For example, if you want to provide some specific layout for the Arabic language and some generic layout for any other &quot;right-to-left&quot; language (like Persian or Hebrew) then you would have: </p> <pre class="classic no-pretty-print">
res/
    layout/   <span style="color:black">
        main.xml  </span>(Default layout)
    layout-ar/  <span style="color:black">
        main.xml  </span>(Specific layout for Arabic)
    layout-ldrtl/  <span style="color:black">
        main.xml  </span>(Any &quot;right-to-left&quot; language, except
                  for Arabic, because the &quot;ar&quot; language qualifier
                  has a higher precedence.)
</pre> <p class="note"><strong>Note:</strong> To enable right-to-left layout features for your app, you must set <a href="../../../guide/topics/manifest/application-element.html#supportsrtl"><code>supportsRtl</code></a> to <code>&quot;true&quot;</code> and set <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> to 17 or higher.</p> <p><em>Added in API level 17.</em></p> </td> 
   </tr> 
   <tr id="SmallestScreenWidthQualifier"> 
    <td>smallestWidth</td> 
    <td><code>sw&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>sw320dp</code><br /> <code>sw600dp</code><br /> <code>sw720dp</code><br /> etc. </td> 
    <td> <p>The fundamental size of a screen, as indicated by the shortest dimension of the available screen area. Specifically, the device's smallestWidth is the shortest of the screen's available height and width (you may also think of it as the &quot;smallest possible width&quot; for the screen). You can use this qualifier to ensure that, regardless of the screen's current orientation, your application has at least <code>&lt;N&gt;</code> dps of width available for its UI.</p> <p>For example, if your layout requires that its smallest dimension of screen area be at least 600 dp at all times, then you can use this qualifer to create the layout resources, <code>res/layout-sw600dp/</code>. The system will use these resources only when the smallest dimension of available screen is at least 600dp, regardless of whether the 600dp side is the user-perceived height or width. The smallestWidth is a fixed screen size characteristic of the device; <strong>the device's smallestWidth does not change when the screen's orientation changes</strong>.</p> <p>The smallestWidth of a device takes into account screen decorations and system UI. For example, if the device has some persistent UI elements on the screen that account for space along the axis of the smallestWidth, the system declares the smallestWidth to be smaller than the actual screen size, because those are screen pixels not available for your UI. Thus, the value you use should be the actual smallest dimension <em>required by your layout</em> (usually, this value is the &quot;smallest width&quot; that your layout supports, regardless of the screen's current orientation).</p> <p>Some values you might use here for common screen sizes:</p> 
     <ul> 
      <li>320, for devices with screen configurations such as: 
       <ul> 
        <li>240x320 ldpi (QVGA handset)</li> 
        <li>320x480 mdpi (handset)</li> 
        <li>480x800 hdpi (high density handset)</li> 
       </ul> </li> 
      <li>480, for screens such as 480x800 mdpi (tablet/handset).</li> 
      <li>600, for screens such as 600x1024 mdpi (7&quot; tablet).</li> 
      <li>720, for screens such as 720x1280 mdpi (10&quot; tablet).</li> 
     </ul> <p>When your application provides multiple resource directories with different values for the smallestWidth qualifier, the system uses the one closest to (without exceeding) the device's smallestWidth. </p> <p><em>Added in API level 13.</em></p> <p>Also see the <a href="../../../guide/topics/manifest/supports-screens-element.html#requiresSmallest"><code>android:requiresSmallestWidthDp</code></a> attribute, which declares the minimum smallestWidth with which your application is compatible, and the <code><a href="../../../reference/android/content/res/Configuration.html#smallestScreenWidthDp">smallestScreenWidthDp</a></code> configuration field, which holds the device's smallestWidth value.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenWidthQualifier"> 
    <td>Available width</td> 
    <td><code>w&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>w720dp</code><br /> <code>w1024dp</code><br /> etc. </td> 
    <td> <p>Specifies a minimum available screen width, in <code>dp</code> units at which the resource should be used¡ªdefined by the <code>&lt;N&gt;</code> value. This configuration value will change when the orientation changes between landscape and portrait to match the current actual width.</p> <p>When your application provides multiple resource directories with different values for this configuration, the system uses the one closest to (without exceeding) the device's current screen width. The value here takes into account screen decorations, so if the device has some persistent UI elements on the left or right edge of the display, it uses a value for the width that is smaller than the real screen size, accounting for these UI elements and reducing the application's available space.</p> <p><em>Added in API level 13.</em></p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenWidthDp">screenWidthDp</a></code> configuration field, which holds the current screen width.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenHeightQualifier"> 
    <td>Available height</td> 
    <td><code>h&lt;N&gt;dp</code><br /><br /> Examples:<br /> <code>h720dp</code><br /> <code>h1024dp</code><br /> etc. </td> 
    <td> <p>Specifies a minimum available screen height, in &quot;dp&quot; units at which the resource should be used¡ªdefined by the <code>&lt;N&gt;</code> value. This configuration value will change when the orientation changes between landscape and portrait to match the current actual height.</p> <p>When your application provides multiple resource directories with different values for this configuration, the system uses the one closest to (without exceeding) the device's current screen height. The value here takes into account screen decorations, so if the device has some persistent UI elements on the top or bottom edge of the display, it uses a value for the height that is smaller than the real screen size, accounting for these UI elements and reducing the application's available space. Screen decorations that are not fixed (such as a phone status bar that can be hidden when full screen) are <em>not</em> accounted for here, nor are window decorations like the title bar or action bar, so applications must be prepared to deal with a somewhat smaller space than they specify. </p><p><em>Added in API level 13.</em></p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenHeightDp">screenHeightDp</a></code> configuration field, which holds the current screen width.</p> <p>For more information about designing for different screens and using this qualifier, see the <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> developer guide.</p> </td> 
   </tr> 
   <tr id="ScreenSizeQualifier"> 
    <td>Screen size</td> 
    <td> <code>small</code><br /> <code>normal</code><br /> <code>large</code><br /> <code>xlarge</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>small</code>: Screens that are of similar size to a low-density QVGA screen. The minimum layout size for a small screen is approximately 320x426 dp units. Examples are QVGA low density and VGA high density.</li> 
      <li><code>normal</code>: Screens that are of similar size to a medium-density HVGA screen. The minimum layout size for a normal screen is approximately 320x470 dp units. Examples of such screens a WQVGA low density, HVGA medium density, WVGA high density.</li> 
      <li><code>large</code>: Screens that are of similar size to a medium-density VGA screen. The minimum layout size for a large screen is approximately 480x640 dp units. Examples are VGA and WVGA medium density screens.</li> 
      <li><code>xlarge</code>: Screens that are considerably larger than the traditional medium-density HVGA screen. The minimum layout size for an xlarge screen is approximately 720x960 dp units. In most cases, devices with extra large screens would be too large to carry in a pocket and would most likely be tablet-style devices. <em>Added in API level 9.</em></li> 
     </ul> <p class="note"><strong>Note:</strong> Using a size qualifier does not imply that the resources are <em>only</em> for screens of that size. If you do not provide alternative resources with qualifiers that better match the current device configuration, the system may use whichever resources are the <a href="#BestMatch">best match</a>.</p> <p class="caution"><strong>Caution:</strong> If all your resources use a size qualifier that is <em>larger</em> than the current screen, the system will <strong>not</strong> use them and your application will crash at runtime (for example, if all layout resources are tagged with the <code>xlarge</code> qualifier, but the device is a normal-size screen).</p> <p><em>Added in API level 4.</em></p> <p>See <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> for more information.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenLayout">screenLayout</a></code> configuration field, which indicates whether the screen is small, normal, or large.</p> </td> 
   </tr> 
   <tr id="ScreenAspectQualifier"> 
    <td>Screen aspect</td> 
    <td> <code>long</code><br /> <code>notlong</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>long</code>: Long screens, such as WQVGA, WVGA, FWVGA</li> 
      <li><code>notlong</code>: Not long screens, such as QVGA, HVGA, and VGA</li> 
     </ul> <p><em>Added in API level 4.</em></p> <p>This is based purely on the aspect ratio of the screen (a &quot;long&quot; screen is wider). This is not related to the screen orientation.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#screenLayout">screenLayout</a></code> configuration field, which indicates whether the screen is long.</p> </td> 
   </tr> 
   <tr id="OrientationQualifier"> 
    <td>Screen orientation</td> 
    <td> <code>port</code><br /> <code>land</code> 
     <!-- <br/>
        <code>square</code>  --> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>port</code>: Device is in portrait orientation (vertical)</li> 
      <li><code>land</code>: Device is in landscape orientation (horizontal)</li> 
      <!-- Square mode is currently not used. --> 
     </ul> <p>This can change during the life of your application if the user rotates the screen. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#orientation">orientation</a></code> configuration field, which indicates the current device orientation.</p> </td> 
   </tr> 
   <tr id="UiModeQualifier"> 
    <td>UI mode</td> 
    <td> <code>car</code><br /> <code>desk</code><br /> <code>television<br /> <code>appliance</code> </code></td> 
    <td> 
     <ul class="nolist"> 
      <li><code>car</code>: Device is displaying in a car dock</li> 
      <li><code>desk</code>: Device is displaying in a desk dock</li> 
      <li><code>television</code>: Device is displaying on a television, providing a &quot;ten foot&quot; experience where its UI is on a large screen that the user is far away from, primarily oriented around DPAD or other non-pointer interaction</li> 
      <li><code>appliance</code>: Device is serving as an appliance, with no display</li> 
     </ul> <p><em>Added in API level 8, television added in API 13.</em></p> <p>For information about how your app can respond when the device is inserted into or removed from a dock, read <a href="../../../training/monitoring-device-state/docking-monitoring.html">Determining and Monitoring the Docking State and Type</a>.</p> <p>This can change during the life of your application if the user places the device in a dock. You can enable or disable some of these modes using <code><a href="../../../reference/android/app/UiModeManager.html">UiModeManager</a></code>. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> </td> 
   </tr> 
   <tr id="NightQualifier"> 
    <td>Night mode</td> 
    <td> <code>night</code><br /> <code>notnight</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>night</code>: Night time</li> 
      <li><code>notnight</code>: Day time</li> 
     </ul> <p><em>Added in API level 8.</em></p> <p>This can change during the life of your application if night mode is left in auto mode (default), in which case the mode changes based on the time of day. You can enable or disable this mode using <code><a href="../../../reference/android/app/UiModeManager.html">UiModeManager</a></code>. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> </td> 
   </tr> 
   <tr id="DensityQualifier"> 
    <td>Screen pixel density (dpi)</td> 
    <td> <code>ldpi</code><br /> <code>mdpi</code><br /> <code>hdpi</code><br /> <code>xhdpi</code><br /> <code>nodpi</code><br /> <code>tvdpi</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>ldpi</code>: Low-density screens; approximately 120dpi.</li> 
      <li><code>mdpi</code>: Medium-density (on traditional HVGA) screens; approximately 160dpi.</li> 
      <li><code>hdpi</code>: High-density screens; approximately 240dpi.</li> 
      <li><code>xhdpi</code>: Extra high-density screens; approximately 320dpi. <em>Added in API Level 8</em></li> 
      <li><code>nodpi</code>: This can be used for bitmap resources that you do not want to be scaled to match the device density.</li> 
      <li><code>tvdpi</code>: Screens somewhere between mdpi and hdpi; approximately 213dpi. This is not considered a &quot;primary&quot; density group. It is mostly intended for televisions and most apps shouldn't need it¡ªproviding mdpi and hdpi resources is sufficient for most apps and the system will scale them as appropriate. This qualifier was introduced with API level 13.</li> 
     </ul> <p>There is a 3:4:6:8 scaling ratio between the four primary densities (ignoring the tvdpi density). So, a 9x9 bitmap in ldpi is 12x12 in mdpi, 18x18 in hdpi and 24x24 in xhdpi.</p> <p>If you decide that your image resources don't look good enough on a television or other certain devices and want to try tvdpi resources, the scaling factor is 1.33*mdpi. For example, a 100px x 100px image for mdpi screens should be 133px x 133px for tvdpi.</p> <p class="note"><strong>Note:</strong> Using a density qualifier does not imply that the resources are <em>only</em> for screens of that density. If you do not provide alternative resources with qualifiers that better match the current device configuration, the system may use whichever resources are the <a href="#BestMatch">best match</a>.</p> <p>See <a href="../../../guide/practices/screens_support.html">Supporting Multiple Screens</a> for more information about how to handle different screen densities and how Android might scale your bitmaps to fit the current density.</p> </td> 
   </tr> 
   <tr id="TouchscreenQualifier"> 
    <td>Touchscreen type</td> 
    <td> <code>notouch</code><br /> <code>finger</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>notouch</code>: Device does not have a touchscreen.</li> 
      <li><code>finger</code>: Device has a touchscreen that is intended to be used through direction interaction of the user's finger.</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#touchscreen">touchscreen</a></code> configuration field, which indicates the type of touchscreen on the device.</p> </td> 
   </tr> 
   <tr id="KeyboardAvailQualifier"> 
    <td>Keyboard availability</td> 
    <td> <code>keysexposed</code><br /> <code>keyshidden</code><br /> <code>keyssoft</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>keysexposed</code>: Device has a keyboard available. If the device has a software keyboard enabled (which is likely), this may be used even when the hardware keyboard is <em>not</em> exposed to the user, even if the device has no hardware keyboard. If no software keyboard is provided or it's disabled, then this is only used when a hardware keyboard is exposed.</li> 
      <li><code>keyshidden</code>: Device has a hardware keyboard available but it is hidden <em>and</em> the device does <em>not</em> have a software keyboard enabled.</li> 
      <li><code>keyssoft</code>: Device has a software keyboard enabled, whether it's visible or not.</li> 
     </ul> <p>If you provide <code>keysexposed</code> resources, but not <code>keyssoft</code> resources, the system uses the <code>keysexposed</code> resources regardless of whether a keyboard is visible, as long as the system has a software keyboard enabled.</p> <p>This can change during the life of your application if the user opens a hardware keyboard. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the configuration fields <code><a href="../../../reference/android/content/res/Configuration.html#hardKeyboardHidden">hardKeyboardHidden</a></code> and <code><a href="../../../reference/android/content/res/Configuration.html#keyboardHidden">keyboardHidden</a></code>, which indicate the visibility of a hardware keyboard and and the visibility of any kind of keyboard (including software), respectively.</p> </td> 
   </tr> 
   <tr id="ImeQualifier"> 
    <td>Primary text input method</td> 
    <td> <code>nokeys</code><br /> <code>qwerty</code><br /> <code>12key</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>nokeys</code>: Device has no hardware keys for text input.</li> 
      <li><code>qwerty</code>: Device has a hardware qwerty keyboard, whether it's visible to the user or not.</li> 
      <li><code>12key</code>: Device has a hardware 12-key keyboard, whether it's visible to the user or not.</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#keyboard">keyboard</a></code> configuration field, which indicates the primary text input method available.</p> </td> 
   </tr> 
   <tr id="NavAvailQualifier"> 
    <td>Navigation key availability</td> 
    <td> <code>navexposed</code><br /> <code>navhidden</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>navexposed</code>: Navigation keys are available to the user.</li> 
      <li><code>navhidden</code>: Navigation keys are not available (such as behind a closed lid).</li> 
     </ul> <p>This can change during the life of your application if the user reveals the navigation keys. See <a href="runtime-changes.html">Handling Runtime Changes</a> for information about how this affects your application during runtime.</p> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#navigationHidden">navigationHidden</a></code> configuration field, which indicates whether navigation keys are hidden.</p> </td> 
   </tr> 
   <tr id="NavigationQualifier"> 
    <td>Primary non-touch navigation method</td> 
    <td> <code>nonav</code><br /> <code>dpad</code><br /> <code>trackball</code><br /> <code>wheel</code> </td> 
    <td> 
     <ul class="nolist"> 
      <li><code>nonav</code>: Device has no navigation facility other than using the touchscreen.</li> 
      <li><code>dpad</code>: Device has a directional-pad (d-pad) for navigation.</li> 
      <li><code>trackball</code>: Device has a trackball for navigation.</li> 
      <li><code>wheel</code>: Device has a directional wheel(s) for navigation (uncommon).</li> 
     </ul> <p>Also see the <code><a href="../../../reference/android/content/res/Configuration.html#navigation">navigation</a></code> configuration field, which indicates the type of navigation method available.</p> </td> 
   </tr> 
   <!-- DEPRECATED
    <tr>
      <td>Screen dimensions</td>
      <td>Examples:<br/>
        <code>320x240</code><br/>
        <code>640x480</code><br/>
        etc.
      </td>
      <td>
        <p>The larger dimension must be specified first. <strong>This configuration is deprecated
and should not be used</strong>. Instead use "screen size," "wider/taller screens," and "screen
orientation" described above.</p>
      </td>
    </tr>
--> 
   <tr id="VersionQualifier"> 
    <td>Platform Version (API level)</td> 
    <td>Examples:<br /> <code>v3</code><br /> <code>v4</code><br /> <code>v7</code><br /> etc.</td> 
    <td> <p>The API level supported by the device. For example, <code>v1</code> for API level 1 (devices with Android 1.0 or higher) and <code>v4</code> for API level 4 (devices with Android 1.6 or higher). See the <a href="../../../guide/topics/manifest/uses-sdk-element.html#ApiLevels">Android API levels</a> document for more information about these values.</p> </td> 
   </tr> 
  </tbody>
 </table> 
 <p class="note"><strong>Note:</strong> Some configuration qualifiers have been added since Android 1.0, so not all versions of Android support all the qualifiers. Using a new qualifier implicitly adds the platform version qualifier so that older devices are sure to ignore it. For example, using a <code>w600dp</code> qualifier will automatically include the <code>v13</code> qualifier, because the available-width qualifier was new in API level 13. To avoid any issues, always include a set of default resources (a set of resources with <em>no qualifiers</em>). For more information, see the section about <a href="#Compatibility">Providing the Best Device Compatibility with Resources</a>.</p> 
 ","Configuration","android.content.res.Configuration","class",1
,"Handling Runtime Changes","Handling the Configuration Change Yourself","<h2 id="HandlingTheChange">Handling the Configuration Change Yourself</h2> 
 <p>If your application doesn't need to update resources during a specific configuration change <em>and</em> you have a performance limitation that requires you to avoid the activity restart, then you can declare that your activity handles the configuration change itself, which prevents the system from restarting your activity.</p> 
 <p class="note"><strong>Note:</strong> Handling the configuration change yourself can make it much more difficult to use alternative resources, because the system does not automatically apply them for you. This technique should be considered a last resort when you must avoid restarts due to a configuration change and is not recommended for most applications.</p> 
 <p>To declare that your activity handles a configuration change, edit the appropriate <a href="../../../guide/topics/manifest/activity-element.html"><code>&lt;activity&gt;</code></a> element in your manifest file to include the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute with a value that represents the configuration you want to handle. Possible values are listed in the documentation for the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> attribute (the most commonly used values are <code>&quot;orientation&quot;</code> to prevent restarts when the screen orientation changes and <code>&quot;keyboardHidden&quot;</code> to prevent restarts when the keyboard availability changes). You can declare multiple configuration values in the attribute by separating them with a pipe <code>|</code> character.</p> 
 <p>For example, the following manifest code declares an activity that handles both the screen orientation change and keyboard availability change:</p> 
 <pre>
&lt;activity android:name=&quot;.MyActivity&quot;
          android:configChanges=&quot;orientation|keyboardHidden&quot;
          android:label=&quot;@string/app_name&quot;&gt;
</pre> 
 <p>Now, when one of these configurations change, <code>MyActivity</code> does not restart. Instead, the <code>MyActivity</code> receives a call to <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. This method is passed a <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object that specifies the new device configuration. By reading fields in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code>, you can determine the new configuration and make appropriate changes by updating the resources used in your interface. At the time this method is called, your activity's <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is updated to return resources based on the new configuration, so you can easily reset elements of your UI without the system restarting your activity.</p> 
 <p class="caution"><strong>Caution:</strong> Beginning with Android 3.2 (API level 13), <strong>the &quot;screen size&quot; also changes</strong> when the device switches between portrait and landscape orientation. Thus, if you want to prevent runtime restarts due to orientation change when developing for API level 13 or higher (as declared by the <a href="../../../guide/topics/manifest/uses-sdk-element.html#min"><code>minSdkVersion</code></a> and <a href="../../../guide/topics/manifest/uses-sdk-element.html#target"><code>targetSdkVersion</code></a> attributes), you must include the <code>&quot;screenSize&quot;</code> value in addition to the <code>&quot;orientation&quot;</code> value. That is, you must decalare <code>android:configChanges=&quot;orientation|screenSize&quot;</code>. However, if your application targets API level 12 or lower, then your activity always handles this configuration change itself (this configuration change does not restart your activity, even when running on an Android 3.2 or higher device).</p> 
 <p>For example, the following <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code> implementation checks the current device orientation:</p> 
 <pre>
@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks the orientation of the screen
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        Toast.makeText(this, &quot;landscape&quot;, Toast.LENGTH_SHORT).show();
    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
        Toast.makeText(this, &quot;portrait&quot;, Toast.LENGTH_SHORT).show();
    }
}
</pre> 
 <p>The <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> object represents all of the current configurations, not just the ones that have changed. Most of the time, you won't care exactly how the configuration has changed and can simply re-assign all your resources that provide alternatives to the configuration that you're handling. For example, because the <code><a href="../../../reference/android/content/res/Resources.html">Resources</a></code> object is now updated, you can reset any <code><a href="../../../reference/android/widget/ImageView.html">ImageView</a></code>s with <code><a href="../../../reference/android/widget/ImageView.html#setImageResource(int)">setImageResource()</a></code> and the appropriate resource for the new configuration is used (as described in <a href="providing-resources.html#AlternateResources">Providing Resources</a>).</p> 
 <p>Notice that the values from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> fields are integers that are matched to specific constants from the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class. For documentation about which constants to use with each field, refer to the appropriate field in the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> reference.</p> 
 <p class="note"><strong>Remember:</strong> When you declare your activity to handle a configuration change, you are responsible for resetting any elements for which you provide alternatives. If you declare your activity to handle the orientation change and have images that should change between landscape and portrait, you must re-assign each resource to each element during <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>.</p> 
 <p>If you don't need to update your application based on these configuration changes, you can instead <em>not</em> implement <code><a href="../../../reference/android/app/Activity.html#onConfigurationChanged(android.content.res.Configuration)">onConfigurationChanged()</a></code>. In which case, all of the resources used before the configuration change are still used and you've only avoided the restart of your activity. However, your application should always be able to shutdown and restart with its previous state intact, so you should not consider this technique an escape from retaining your state during normal activity lifecycle. Not only because there are other configuration changes that you cannot prevent from restarting your application, but also because you should handle events such as when the user leaves your application and it gets destroyed before the user returns to it.</p> 
 <p>For more about which configuration changes you can handle in your activity, see the <a href="../../../guide/topics/manifest/activity-element.html#config"><code>android:configChanges</code></a> documentation and the <code><a href="../../../reference/android/content/res/Configuration.html">Configuration</a></code> class.</p> 
</div> 
","Configuration","android.content.res.Configuration","class",1
,"Handling Runtime Changes","Handling Runtime Changes","<p>Some device configurations can change during runtime (such as screen orientation, keyboard availability, and language). When such a change occurs, Android restarts the running <code><a href="../../../reference/android/app/Activity.html">Activity</a></code> (<code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> is called, followed by <code><a href="../../../reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code>). The restart behavior is designed to help your application adapt to new configurations by automatically reloading your application with alternative resources that match the new device configuration.</p> 
 <p>To properly handle a restart, it is important that your activity restores its previous state through the normal <a href="../../../guide/components/activities.html#Lifecycle">Activity lifecycle</a>, in which Android calls <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> before it destroys your activity so that you can save data about the application state. You can then restore the state during <code><a href="../../../reference/android/app/Activity.html#onCreate(android.os.Bundle)">onCreate()</a></code> or <code><a href="../../../reference/android/app/Activity.html#onRestoreInstanceState(android.os.Bundle)">onRestoreInstanceState()</a></code>.</p> 
 <p>To test that your application restarts itself with the application state intact, you should invoke configuration changes (such as changing the screen orientation) while performing various tasks in your application. Your application should be able to restart at any time without loss of user data or state in order to handle events such as configuration changes or when the user receives an incoming phone call and then returns to your application much later after your application process may have been destroyed. To learn how you can restore your activity state, read about the <a href="../../../guide/components/activities.html#Lifecycle">Activity lifecycle</a>.</p> 
 <p>However, you might encounter a situation in which restarting your application and restoring significant amounts of data can be costly and create a poor user experience. In such a situation, you have two other options:</p> 
 <ol type="a"> 
  <li><a href="#RetainingAnObject">Retain an object during a configuration change</a> <p>Allow your activity to restart when a configuration changes, but carry a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> to the new instance of your activity.</p> </li> 
  <li><a href="#HandlingTheChange">Handle the configuration change yourself</a> <p>Prevent the system from restarting your activity during certain configuration changes, but receive a callback when the configurations do change, so that you can manually update your activity as necessary.</p> </li> 
 </ol> 
 ","Object","java.lang.Object","class",0
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Object","java.lang.Object","class",1
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Bundle","android.os.Bundle","class",0
,"Handling Runtime Changes","Retaining an Object During a Configuration Change","<h2 id="RetainingAnObject">Retaining an Object During a Configuration Change</h2> 
 <p>If restarting your activity requires that you recover large sets of data, re-establish a network connection, or perform other intensive operations, then a full restart due to a configuration change might be a slow user experience. Also, it might not be possible for you to completely restore your activity state with the <code><a href="../../../reference/android/os/Bundle.html">Bundle</a></code> that the system saves for you with the <code><a href="../../../reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState()</a></code> callback¡ªit is not designed to carry large objects (such as bitmaps) and the data within it must be serialized then deserialized, which can consume a lot of memory and make the configuration change slow. In such a situation, you can alleviate the burden of reinitializing your activity by retaining a stateful <code><a href="../../../reference/java/lang/Object.html">Object</a></code> when your activity is restarted due to a configuration change.</p> 
 <p>To retain an object during a runtime configuration change:</p> 
 <ol> 
  <li>Override the <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> method to return the object you would like to retain.</li> 
  <li>When your activity is created again, call <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> to recover your object.</li> 
 </ol> 
 <p>When the Android system shuts down your activity due to a configuration change, it calls <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> between the <code><a href="../../../reference/android/app/Activity.html#onStop()">onStop()</a></code> and <code><a href="../../../reference/android/app/Activity.html#onDestroy()">onDestroy()</a></code> callbacks. In your implementation of <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>, you can return any <code><a href="../../../reference/java/lang/Object.html">Object</a></code> that you need in order to efficiently restore your state after the configuration change.</p> 
 <p>A scenario in which this can be valuable is if your application loads a lot of data from the web. If the user changes the orientation of the device and the activity restarts, your application must re-fetch the data, which could be slow. What you can do instead is implement <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code> to return an object carrying your data and then retrieve the data when your activity starts again with <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code>. For example:</p> 
 <pre>
@Override
public Object onRetainNonConfigurationInstance() {
    final MyDataObject data = collectMyLoadedData();
    return data;
}
</pre> 
 <p class="caution"><strong>Caution:</strong> While you can return any object, you should never pass an object that is tied to the <code><a href="../../../reference/android/app/Activity.html">Activity</a></code>, such as a <code><a href="../../../reference/android/graphics/drawable/Drawable.html">Drawable</a></code>, an <code><a href="../../../reference/android/widget/Adapter.html">Adapter</a></code>, a <code><a href="../../../reference/android/view/View.html">View</a></code> or any other object that's associated with a <code><a href="../../../reference/android/content/Context.html">Context</a></code>. If you do, it will leak all the views and resources of the original activity instance. (Leaking resources means that your application maintains a hold on them and they cannot be garbage-collected, so lots of memory can be lost.)</p> 
 <p>Then retrieve the data when your activity starts again:</p> 
 <pre>
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    final MyDataObject data = (MyDataObject) getLastNonConfigurationInstance();
    if (data == null) {
        data = loadMyData();
    }
    ...
}
</pre> 
 <p>In this case, <code><a href="../../../reference/android/app/Activity.html#getLastNonConfigurationInstance()">getLastNonConfigurationInstance()</a></code> returns the data saved by <code><a href="../../../reference/android/app/Activity.html#onRetainNonConfigurationInstance()">onRetainNonConfigurationInstance()</a></code>. If <code>data</code> is null (which happens when the activity starts due to any reason other than a configuration change) then this code loads the data object from the original source.</p> 
 ","Adapter","android.widget.Adapter","class",0
,"String Resources","String","<h2 id="String">String</h2> 
 <p>A single string that can be referenced from the application or from other resource files (such as an XML layout).</p> 
 <p class="note"><strong>Note:</strong> A string is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). So, you can combine string resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;string&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to a 
   <code><a href="../../../reference/java/lang/String.html">String</a></code>.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.string.<em>string_name</em></code>
   <br /> In XML:
   <code>@string/<em>string_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#string-resources-element">resources</a>&gt;
    &lt;<a href="#string-element">string</a>
        name=&quot;<em>string_name</em>&quot;
        &gt;<em>text_string</em>&lt;/string&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="string-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="string-element">
     <code>&lt;string&gt;</code>
    </dt> 
    <dd>
     A string, which can include styling tags. Beware that you must escape apostrophes and quotation marks. For more information about how to properly style and format your strings see 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the string. This name will be used as the resource ID.
      </dd> 
     </dl> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements and attributes --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string name=&quot;hello&quot;&gt;Hello!&lt;/string&gt;
&lt;/resources&gt;
</pre> 
   <p>This layout XML applies a string to a View:</p> 
   <pre>
&lt;TextView
    android:layout_width=&quot;fill_parent&quot;
    android:layout_height=&quot;wrap_content&quot;
    <strong>android:text=&quot;@string/hello&quot;</strong> /&gt;
</pre> 
   <p>This application code retrieves a string:</p> 
   <pre>
String string = <code><a href="../../../reference/android/content/Context.html#getString(int)">getString</a></code>(R.string.hello);
</pre> 
   <p>You can use either <code><a href="../../../reference/android/content/Context.html#getString(int)">getString(int)</a></code> or <code><a href="../../../reference/android/content/Context.html#getText(int)">getText(int)</a></code> to retrieve a string. <code><a href="../../../reference/android/content/Context.html#getText(int)">getText(int)</a></code> will retain any rich text styling applied to the string.</p> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","String","java.lang.String","class",1
,"String Resources","String Array","<h2 id="StringArray">String Array</h2> 
 <p>An array of strings that can be referenced from the application.</p> 
 <p class="note"><strong>Note:</strong> A string array is a simple resource that is referenced using the value provided in the <code>name</code> attribute (not the name of the XML file). As such, you can combine string array resources with other simple resources in the one XML file, under one <code>&lt;resources&gt;</code> element.</p> 
 <dl class="xml"> 
  <dt>
   file location:
  </dt> 
  <dd>
   <code>res/values/<em>filename</em>.xml</code>
   <br /> The filename is arbitrary. The 
   <code>&lt;string-array&gt;</code> element's 
   <code>name</code> will be used as the resource ID.
  </dd> 
  <dt>
   compiled resource datatype:
  </dt> 
  <dd>
   Resource pointer to an array of 
   <code><a href="../../../reference/java/lang/String.html">String</a></code>s.
  </dd> 
  <dt>
   resource reference:
  </dt> 
  <dd>
    In Java: 
   <code>R.array.<em>string_array_name</em></code> 
  </dd> 
  <dt>
   syntax:
  </dt> 
  <dd> 
   <pre class="stx">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;<a href="#string-array-resources-element">resources</a>&gt;
    &lt;<a href="#string-array-element">string-array</a>
        name=&quot;<em>string_array_name</em>&quot;&gt;
        &lt;<a href="#string-array-item-element">item</a>
            &gt;<em>text_string</em>&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
  </dd> 
  <dt>
   elements:
  </dt> 
  <dd> 
   <dl class="tag-list"> 
    <dt id="string-array-resources-element">
     <code>&lt;resources&gt;</code>
    </dt> 
    <dd>
     <strong>Required.</strong> This must be the root node. 
     <p>No attributes.</p> 
    </dd> 
    <dt id="string-array-element">
     <code>&lt;string-array&gt;</code>
    </dt> 
    <dd>
     Defines an array of strings. Contains one or more 
     <code>&lt;item&gt;</code> elements. 
     <p class="caps">attributes:</p> 
     <dl class="atn-list"> 
      <dt>
       <code>name</code>
      </dt> 
      <dd>
       <em>String</em>. A name for the array. This name will be used as the resource ID to reference the array.
      </dd> 
     </dl> 
    </dd> 
    <dt id="string-array-item-element">
     <code>&lt;item&gt;</code>
    </dt> 
    <dd>
     A string, which can include styling tags. The value can be a reference to another string resource. Must be a child of a 
     <code>&lt;string-array&gt;</code> element. Beware that you must escape apostrophes and quotation marks. See 
     <a href="#FormattingAndStyling">Formatting and Styling</a>, below, for information about to properly style and format your strings. 
     <p>No attributes.</p> 
    </dd> 
   </dl> 
  </dd> 
  <!-- end  elements --> 
  <dt>
   example:
  </dt> 
  <dd>
   XML file saved at 
   <code>res/values/strings.xml</code>: 
   <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string-array name=&quot;planets_array&quot;&gt;
        &lt;item&gt;Mercury&lt;/item&gt;
        &lt;item&gt;Venus&lt;/item&gt;
        &lt;item&gt;Earth&lt;/item&gt;
        &lt;item&gt;Mars&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</pre> 
   <p>This application code retrieves a string array:</p> 
   <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String[] planets = res.<code><a href="../../../reference/android/content/res/Resources.html#getStringArray(int)">getStringArray</a></code>(R.array.planets_array);
</pre> 
  </dd> 
  <!-- end example --> 
 </dl> 
 ","String","java.lang.String","class",1
,"Formatting and Styling","Styling with HTML markup","<h3>Styling with HTML markup</h3> 
 <p>You can add styling to your strings with HTML markup. For example:</p> 
 <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string name=&quot;welcome&quot;&gt;Welcome to &lt;b&gt;Android&lt;/b&gt;!&lt;/string&gt;
&lt;/resources&gt;
</pre> 
 <p>Supported HTML elements include:</p> 
 <ul> 
  <li><code>&lt;b&gt;</code> for <b>bold</b> text.</li> 
  <li><code>&lt;i&gt;</code> for <i>italic</i> text.</li> 
  <li><code>&lt;u&gt;</code> for <u>underline</u> text.</li> 
 </ul> 
 <p>Sometimes you may want to create a styled text resource that is also used as a format string. Normally, this won't work because the <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format(String, Object...)</code></a> method will strip all the style information from the string. The work-around to this is to write the HTML tags with escaped entities, which are then recovered with <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, after the formatting takes place. For example:</p> 
 <ol> 
  <li>Store your styled text resource as an HTML-escaped string: <pre>
&lt;resources&gt;
  &lt;string name=&quot;welcome_messages&quot;&gt;Hello, %1$s! You have &amp;lt;b&gt;%2$d new messages&amp;lt;/b&gt;.&lt;/string&gt;
&lt;/resources&gt;
</pre> <p>In this formatted string, a <code>&lt;b&gt;</code> element is added. Notice that the opening bracket is HTML-escaped, using the <code>&amp;lt;</code> notation.</p> </li> 
  <li>Then format the string as usual, but also call <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> to convert the HTML text into styled text: <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), username, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> </li> 
 </ol> 
 <p>Because the <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> method will format all HTML entities, be sure to escape any possible HTML characters in the strings you use with the formatted text, using <code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode(String)</a></code>. For instance, if you'll be passing a string argument to <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format()</code></a> that may contain characters such as &quot;&lt;&quot; or &quot;&amp;&quot;, then they must be escaped before formatting, so that when the formatted string is passed through <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, the characters come out the way they were originally written. For example:</p> 
 <pre>
String escapedUsername = TextUtil.<code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode</a></code>(username);

Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), escapedUsername, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> 
</div> 
","Html","android.text.Html","class",1
,"Formatting and Styling","Styling with HTML markup","<h3>Styling with HTML markup</h3> 
 <p>You can add styling to your strings with HTML markup. For example:</p> 
 <pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;string name=&quot;welcome&quot;&gt;Welcome to &lt;b&gt;Android&lt;/b&gt;!&lt;/string&gt;
&lt;/resources&gt;
</pre> 
 <p>Supported HTML elements include:</p> 
 <ul> 
  <li><code>&lt;b&gt;</code> for <b>bold</b> text.</li> 
  <li><code>&lt;i&gt;</code> for <i>italic</i> text.</li> 
  <li><code>&lt;u&gt;</code> for <u>underline</u> text.</li> 
 </ul> 
 <p>Sometimes you may want to create a styled text resource that is also used as a format string. Normally, this won't work because the <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format(String, Object...)</code></a> method will strip all the style information from the string. The work-around to this is to write the HTML tags with escaped entities, which are then recovered with <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, after the formatting takes place. For example:</p> 
 <ol> 
  <li>Store your styled text resource as an HTML-escaped string: <pre>
&lt;resources&gt;
  &lt;string name=&quot;welcome_messages&quot;&gt;Hello, %1$s! You have &amp;lt;b&gt;%2$d new messages&amp;lt;/b&gt;.&lt;/string&gt;
&lt;/resources&gt;
</pre> <p>In this formatted string, a <code>&lt;b&gt;</code> element is added. Notice that the opening bracket is HTML-escaped, using the <code>&amp;lt;</code> notation.</p> </li> 
  <li>Then format the string as usual, but also call <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> to convert the HTML text into styled text: <pre>
Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), username, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> </li> 
 </ol> 
 <p>Because the <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code> method will format all HTML entities, be sure to escape any possible HTML characters in the strings you use with the formatted text, using <code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode(String)</a></code>. For instance, if you'll be passing a string argument to <a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)"><code>String.format()</code></a> that may contain characters such as &quot;&lt;&quot; or &quot;&amp;&quot;, then they must be escaped before formatting, so that when the formatted string is passed through <code><a href="../../../reference/android/text/Html.html#fromHtml(java.lang.String)">fromHtml(String)</a></code>, the characters come out the way they were originally written. For example:</p> 
 <pre>
String escapedUsername = TextUtil.<code><a href="../../../reference/android/text/TextUtils.html#htmlEncode(java.lang.String)">htmlEncode</a></code>(username);

Resources res = <code><a href="../../../reference/android/content/Context.html#getResources()">getResources()</a></code>;
String text = String.<a href="../../../reference/java/lang/String.html#format(java.lang.String,
java.lang.Object...)">format</a>(res.getString(R.string.welcome_messages), escapedUsername, mailCount);
CharSequence styledText = Html.fromHtml(text);
</pre> 
</div> 
","TextUtils","android.text.TextUtils","class",0
